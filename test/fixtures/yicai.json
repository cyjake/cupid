{
  "feed": {
    "$": {
      "xmlns": "http://www.w3.org/2005/Atom"
    },
    "title": [
      {
        "_": "Everything Jake",
        "$": {
          "type": "text",
          "xml:lang": "en"
        }
      }
    ],
    "link": [
      {
        "$": {
          "type": "application/atom+xml",
          "href": "http://cyj.me/feed/atom.xml",
          "rel": "self"
        }
      },
      {
        "$": {
          "type": "text/html",
          "href": "http://cyj.me/",
          "rel": "alternate"
        }
      }
    ],
    "updated": [
      "2013-08-29T20:49:20-07:00"
    ],
    "id": [
      "http://cyj.me/"
    ],
    "author": [
      {
        "name": [
          "Jake Chen"
        ]
      }
    ],
    "rights": [
      "Everything Jake © 2013"
    ],
    "entry": [
      {
        "title": [
          "设计师应该知道的 HTML 和 CSS"
        ],
        "link": [
          {
            "$": {
              "href": "http://cyj.me/f2e/html-css-for-designers"
            }
          }
        ],
        "updated": [
          "2013-08-10T00:00:00-07:00"
        ],
        "id": [
          "http://cyj.me/f2e/html-css-for-designers"
        ],
        "content": [
          {
            "_": "<p>想写这个很久了，我总觉的我的设计师同仁们需要知道一些 HTML 与 CSS，这样大家彼此沟通起来隔阂少些，\n最起码诸位设计师同僚们可以知道，当前端工程师谈论填充、边框与边距时都在谈论什么。幸运的是，许多\n设计师也是这么想的。</p>\n\n<h2>故纸堆</h2>\n\n<p>开讲之前，先挖点故纸堆。</p>\n\n<h3>NeXT</h3>\n\n<p>上世纪80年代，乔布斯被迫离开了他与另一个史蒂夫一并创立的苹果公司，感慨事情荒谬（被自己创立的公司开掉）\n之余，开始寻找新的机会，与人联合创立了 Pixar，还创立了 NeXT 公司。前者设计师同学们肯定知道，\n这家牛逼公司给我们带来太多精彩动画电影了，从 Toy Story 到 Monsters, Inc. 一时无两。</p>\n\n<p>而后者，NeXT 计算机公司，所出产的产品则成为了世界上第一个网站服务器。WWW 的创始人 Tim\nBerners-Lee 在一台 NeXT 工作站上编写了一个叫做 HTTPd 的程序，和相应的客户端浏览器，还在那台\n机器上贴了小纸条：这台机器是服务器，不许关机。</p>\n\n<p>从销售上说，NeXT 并不是家厉害的公司。乔布斯给它的定位是高端配置，牛逼界面，正因为后者，它所积累的\n软件开发经验被整合到了后来的 OS X，也就是诸位同僚使用的 MacBook Pro 或者 iMac 上所跑着的代码。</p>\n\n<h3>WorldWideWeb</h3>\n\n<p>高端机器是科研人士心头爱，在欧洲原子核物理做研究员的 Tim Berners-Lee 自然不例外。1990 年，\n他起草了 WorldWideWeb 项目，并在一台 NeXT 机器上完成了整套项目：</p>\n\n<ul>\n<li>Web 浏览器（它本身也是个 Web 编辑器）</li>\n<li>Web 服务器</li>\n<li>相应的网页，描述了这个项目本身</li>\n</ul>\n\n\n<p>他的这个项目，也被简称作 W3。1994 年，Tim 离开欧洲原子核物理研究所，跑到 MIT，得到 DARPA 支持，\n创立了 W3C，即 World Wide Web Consortium。如今前端同学们所热衷的 Web 前沿规范，正是 W3C\n在讨论、推进的。</p>\n\n<h3>CERN</h3>\n\n<p>CERN 的全称是欧洲原子核物理研究所。2008年的时候，CERN 非常出名，因为他们搞了个巨大的强子对撞机，\n据说搞不好会制造黑洞，把地球吞掉，大家十分关切，有人还做了网站：</p>\n\n<p><a href=\"http://hasthelargehadroncolliderdestroyedtheworldyet.com/\">http://hasthelargehadroncolliderdestroyedtheworldyet.com/</a></p>\n\n<p>在喧嚣的 2008 年，CERN 和 LHC，也是个热点词汇。你可能想不到，他们竟然也和互联网有关系。</p>\n\n<h3>DARPA</h3>\n\n<p>DARPA 的全称是美国国防先进项目所，是军方的机构。前面我说到，DARPA 支持创立了 W3C，但 DARPA\n对互联网的贡献可远不止此。早在 1967 年，DARPA 的前身 ARPA（全称里去掉“防御”一词），\n所支持的研究项目，创造了世界上第一个互联网，叫做 ARPANET。</p>\n\n<p>那个年代的互联网，网络传输很慢，75% 的网络流量都是彼此传来传去的电子邮件。第一封电子邮件，正是通过\nARPANET 传输的。</p>\n\n<h2>HTML</h2>\n\n<p>讲故事，其实三天三夜都讲不完，何况我这里只讲了 WWW 的创立，都还没说后来的浏览器之争，服务器实现演变，\n等等。但重点其实是，Tim 早在 1980 年的时候就写了 WWW 的前身 ENQUIRE，当时是 CERN 的独立承包商，\n之后又去做了三年技术老板，积累网络编程经验，直到9年后回到 CERN，才把 WorldWideWeb 给做出来。</p>\n\n<p>当真是念念不忘，必有回想。</p>\n\n<p>HTML 的全称是超文本标记语言。超文本是个历史悠久的概念，最早可以追溯到上世纪40年代，和它一块演进的\n是超媒体，后者可以算是前者的富集。不过对设计师来说，这俩都不重要，重要的是，最早的 WorldWideWeb，\n目的是用超文本的概念，方便研究者们共享研究资料。直至今日，W3C 制定 HTML 规范的原则仍然是这个，\n所以，HTML 的别名是文档，它应该语义化，装饰类的标签应该去除，样式代码应该分离，等等。</p>\n\n<p>所以，不管诸位的设计如何绚丽，那份 PSD，最终都会被前端工程师用语义化的 HTML 写成一份文档，它是个\n文本文件，你在 Windows 中用记事本，在 Mac 里用 TextEdit，都能打开它。</p>\n\n<h3>文本文件</h3>\n\n<p>在计算机世界里，文件有好多种，最基本的区分方式就是它的扩展名，但扩展名也有会忽悠人的，系统里某些配置\n文件故弄玄虚，甚至还喜欢把扩展名省去。当然大多数时候并非它们故意，使用不同的扩展名，目的是让操作系统\n可以更好地区分自己而已。</p>\n\n<p>HTML 文件也是如此，它的扩展名是 .html 或者 .htm，系统一般用默认的 Web 浏览器打开，它是文本文件，\n把扩展名改成 .txt，再双击就是用系统默认的文本编辑器打开了。要注意的是，自 Windows XP 起，\n操作系统默认是隐藏扩展名的。</p>\n\n<p>与文本文件不同的，是 .psd、.doc 等文件，它们有的是二进制文件，使用自有的数据编码格式，有的是复合的，\n可能是个压缩包，可能是个自解压的二进制文件（用过那种可以放在U盘里的所谓绿色版软件吗？）。</p>\n\n<p>不过，我可不想把计算机基础知识在这先重复一遍，大家都是21世纪的人，我们有更好的办法。jsFiddle 和\nGithub Gist，正是其中两个编写代码演示的好去处。</p>\n\n<h3>HTML 框架</h3>\n\n<p>所有的 HTML 页面都大概长这个样子：</p>\n\n<div class=\"highlight\"><pre><code class=\"html\"><span class=\"cp\">&lt;!doctype html&gt;</span>\n<span class=\"nt\">&lt;html&gt;</span>\n  <span class=\"nt\">&lt;head&gt;</span>\n    <span class=\"nt\">&lt;meta</span> <span class=\"na\">charset=</span><span class=\"s\">&quot;utf-8&quot;</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;/head&gt;</span>\n  <span class=\"nt\">&lt;body&gt;</span>\n    <span class=\"nt\">&lt;h1&gt;</span>设计师该知道的 HTML 与 CSS<span class=\"nt\">&lt;/h1&gt;</span>\n    <span class=\"nt\">&lt;p&gt;</span>人在江湖飘，能够多一技傍身，何乐而不为？<span class=\"nt\">&lt;/p&gt;</span>\n  <span class=\"nt\">&lt;/body&gt;</span>\n<span class=\"nt\">&lt;/html&gt;</span>\n</code></pre></div>\n\n\n<p>每个 HTML 文档都有个头部声明，叫做 DOCTYPE，声明方式多年前曾经百花齐放，这么写会如何如何，那么写\n又你想怎样，等等。在我们这个示例里头，正是 HTML5 运动起始时变得风靡的写法：</p>\n\n<div class=\"highlight\"><pre><code class=\"html\"><span class=\"cp\">&lt;!doctype html&gt;</span>\n</code></pre></div>\n\n\n<p>然后，就是超文本概念的真实演绎了。超文本其实就是标记文本，利用一系列规则，给普通的文本嵌入标记，\n这里强调，那里链接到别处，这里有个图片，那里有个引用，诸如此类。HTML自然不能算是只此一家，真正把这\n东西规范化的，是 SGML。SGML 是元标记语言，这句话的意思是，SGML 是用来定义标记语言语法的语言。</p>\n\n<p>言归正传，HTML 这门标记语言里要求，所有的文档内容都在 <code>&lt;html&gt;</code> 标签之内，文档内容分成 <code>&lt;head&gt;</code>\n与 <code>&lt;body&gt;</code>。这俩英文单词的意思，大家应该都懂的。所以现在你能看明白这张图了：</p>\n\n<p><img src=\"http://www.likecool.com/Gear/Pic/head%20body%2045399156/head-body.jpg\" alt=\"head body\" /></p>\n\n<h3>head</h3>\n\n<p>HTML 头部，通常内容有：</p>\n\n<ul>\n<li>文档的文件编码</li>\n<li>文档的额外信息</li>\n<li>文档的标题</li>\n<li>文档的收藏夹图标</li>\n<li>文档的外部、内联样式</li>\n<li>文档的外部、内联脚本</li>\n</ul>\n\n\n<p>其中涉及到的 HTML 标签有 <code>&lt;link&gt;</code>、<code>&lt;meta&gt;</code>、<code>&lt;script&gt;</code> 和 <code>&lt;title&gt;</code>。设计师在此处需要\n注意到的是收藏夹图标（favicon）。这货的作用从它的英文名字就能看出来，它是 favorite icon 的缩写，\n最初的作用就是，当用户收藏你的网页，能在收藏夹里看到这个网页的图标。因此，它能提高你的网站的辨识度。</p>\n\n<p>如今呢？它的用处更趋广泛，除了收藏夹之外，它还出现在浏览器标签栏，Windows 7 还支持直接拖拽链接到\n快速启动栏，从而让用户可以在桌面直达你的网站。</p>\n\n<h3>body</h3>\n\n<p><code>&lt;body&gt;</code> 是繁华所在，在最初的 HTML 中，HTML 中只是一些文本内容，加上一些加粗、斜体、外部链接、\n标题、段落、引用之类，后来又陆续加上了图片等多媒体的内容，并有 <code>&lt;object&gt;</code>、<code>&lt;embed&gt;</code> 等标签。</p>\n\n<p>在 HTML5 里，我们又有了 <code>&lt;video&gt;</code>、<code>&lt;audio&gt;</code>、<code>&lt;canvas&gt;</code>、<code>&lt;svg&gt;</code> 等等。</p>\n\n<p>这些琳琅满目的标签都用来做什么？答案很简单，它们的存在，就是为了让我们的内容，能够用标记文本描述出来。</p>\n\n<p>好吧，内容很丰富了，样式怎么控制呢？</p>\n\n<h2>CSS</h2>\n\n<p>我们用 CSS。不过开讲之前，有得讲个故事。</p>\n\n<p>多年前，在浏览器的战国时代，呃，确切说更像是楚汉争霸时代，楚国 Netscape 公司雄霸一方，靠卖浏览器\n赚得盆满钵满，有一票牛人，例如 <a href=\"http://www.jwz.org/\">jwz</a>，汉 微软 IE 开发小组，刚起步，\n和刘邦不同的是 IE 开发小组有个牛逼干爹，最终它靠着干爹带，把楚国给打败了。不过结果不重要，重要的是，\n在两方斗争过程中，由于当时谁也不知道 HTML 的规范该如何如何，而谁都想跟用户说用我把我最牛逼，\n导致两大浏览器 Netscape、Internet Explorer 各做各的，Netscape 搞了个\n<a href=\"http://en.wikipedia.org/wiki/Blink_element\"><code>&lt;blink&gt;</code></a>，IE 搞了个\n<a href=\"http://en.wikipedia.org/wiki/Marquee_element\"><code>&lt;marquee&gt;</code></a>，更多乱七八糟的细枝末节，\n最终把 Web 开发者搞残了，直至今日，可以只为一款浏览器开发网页，都是一种幸福。</p>\n\n<iframe width=\"100%\" height=\"200\" src=\"http://jsfiddle.net/dotnil/AVzCv/embedded/result/\" scrolling=\"no\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n\n\n<p>互拼软件实现度的结果是，最终用户选择了免费的那个。</p>\n\n<p>所以了解用户操蛋的需求是多么重要。如今翻旧账再来揣测，IE 的免费，更像是给免费模式的互联网拉开大幕，\n雅虎第一个登场，Google、Facebook、Taobao 们开始割据。</p>\n\n<p>扯远了，乱世之后，是大一统，当时的 Web 从业者们终于意识到，胡搅蛮缠该结束了。W3C 规范指定步入正轨，\nFirefox 冒出来扛着规范大旗鞭挞曾经对规范实现度最高的 IE6，没错，那个 IE6，在它发布后的很长一段\n时间里，它都是最牛逼的浏览器。但再牛逼的浏览器也抗不过时间，也抗不过 Firefox 的当众调戏、Opera 和\nSafari 的偷偷揩油。Web 开发者们开始呼吁内容与形式分离，让 HTML 回归朴素，把效果，放入 CSS。</p>\n\n<p>于是后来冒出一些著名的 CSS 宣传网站，<a href=\"http://www.csszengarden.com/\">CSS Zen Garden</a>\n便是其中之一。它的立意很有趣，同一份 HTML，通过不同的 CSS 得到完全不同的效果。考虑到当时的网络环境、\nCSS 规范实现程度，这个网站做得很不赖。</p>\n\n<p>说到这里，本文的立论也就出来了，内容回归 HTML，效果放入 CSS，作为设计网页展现形式的你，懂一点 CSS\n真的是大有裨益喔。</p>\n\n<h3>字体</h3>\n\n<p>我们经常会听到设计师或者需求方这样要求，这里给我用微软雅黑，看上去高端洋气一点，啊，能不能所有的都是\n微软雅黑，微软雅黑多好看呀。对于用惯了 Windows 系统，一路宋体走过来的同学们来说，Windows\nVista 里开始加入的雅黑、Tahoma 等反锯齿字体无疑是个福音。中文突然也不那么毛毛糙糙了，既然它这么好，\n干嘛不全用上呢？</p>\n\n<p>负责任的前端开发可能已经告诉你了，那在那些没有微软雅黑字体的浏览器里怎么办，用什么字体呢？</p>\n\n<p>要回答这个问题，我们得从 Web Safe Fonts 概念说起，在 Internet 如火如荼的日子里，Web 开发者和\n浏览器厂商都需要面对的一个问题是，都有那些字体可用。在这里需要表扬的是微软（咦，好奇怪）。1996 年，\n它开始了一项叫做 <a href=\"http://en.wikipedia.org/wiki/Core_fonts_for_the_Web\">Core Fonts for the Web</a>\n的项目，为因特网提供可免费使用的私有字体：</p>\n\n<ul>\n<li>Andale Mono</li>\n<li>Arial</li>\n<li>Arial Black</li>\n<li>Comic Sans MS</li>\n<li>Courier New</li>\n<li>Georgia</li>\n<li>Impact</li>\n<li>Times New Roman</li>\n<li>Trebuchet MS</li>\n<li>Verdana</li>\n<li>Webdings</li>\n</ul>\n\n\n<p>支持 Windows 和 Mac。因为授权协议，虽然 2002 年项目终止，这些已经发布的字体都能免费使用，使得\n开源社区也能得享便利，因此，所谓的 Web Safe Fonts，其实就是指主流计算机平台（Windows、Mac OS、\nUnix + X）上<a href=\"http://web.mit.edu/jmorzins/www/fonts.html\">均有支持的字体</a>：</p>\n\n<ul>\n<li><span style=\"font-family:Arial\">Arial</span> / <span style=\"font-family:Helvetica\">Helvetica</span></li>\n<li><span style=\"font-family:Times New Roman\">Times New Roman</span> / <span style=\"font-family:Times\">Times</span></li>\n<li><span style=\"font-family:Courier New\">Courier New</span> / <span style=\"font-family:Courier\">Courier</span></li>\n</ul>\n\n\n<p>注意这里的字体划分方式：</p>\n\n<ul>\n<li>Arial 和 Helvetica 归为一类，它们是无衬线字体，即 sans-serif。在 CSS 中，这个类别概念叫做\n字族，即 font-family 属性；</li>\n<li>Times New Roman 和 Times 也是一类，它们属于 serif 字族，即有衬线字体；</li>\n<li>Courier New 与 Courier 又是一类，它们是等宽字体，字族叫做 monospace。</li>\n</ul>\n\n\n<p>当然，随着事件推移，技术演进，能在 Web 中安全使用的字体早已不止这六个，字族也日渐丰富，但通常而言，\n字族<a href=\"http://en.wikipedia.org/wiki/Web_typography#Generic_font_families\">分成如下几类</a>：</p>\n\n<ul>\n<li><span style=\"font-family:sans-serif\">sans-serif</span>：无衬线字体，通常认为它们在屏幕上表现更好，更清晰</li>\n<li><span style=\"font-family:serif\">serif</span>：有衬线字体</li>\n<li><span style=\"font-family:monospace\">monospace</span>：等宽字体，中文天生等宽，英文则不同</li>\n<li><span style=\"font-family:cursive\">cursive</span>：草书</li>\n<li><span style=\"font-family:fantasy\">fantasy</span>：含有符文或者装饰属性，但仍能表示字符的字体</li>\n</ul>\n\n\n<p>通常在浏览器里，前三者是可配置的，用户可以设置自己在各个字族里偏好的字体。</p>\n\n<p>然后回到微软雅黑，假如要设置标题字体成雅黑，那么正确的 CSS 应该这么写：</p>\n\n<div class=\"highlight\"><pre><code class=\"css\"><span class=\"nt\">h1</span> <span class=\"p\">{</span>\n    <span class=\"k\">font-family</span><span class=\"o\">:</span> <span class=\"n\">Microsoft</span> <span class=\"n\">Yahei</span><span class=\"o\">,</span> <span class=\"k\">sans-serif</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n\n\n<p>我们设置了最佳字体为微软雅黑，但对于没有雅黑的用户，我们告诉它这里用用户浏览器里设置的无衬线字体即可。\n但是要注意的是，浏览器里的设置是会坑人的，浏览器并不阻止用户给等宽字族设置非等宽字体，所以，为了取得\n更好的设计体验，假如必须设置字体，则越详细越好：</p>\n\n<div class=\"highlight\"><pre><code class=\"css\"><span class=\"nt\">h1</span> <span class=\"p\">{</span>\n    <span class=\"k\">font-family</span><span class=\"o\">:</span> <span class=\"n\">Microsoft</span> <span class=\"n\">Yahei</span><span class=\"o\">,</span> <span class=\"n\">Hiragino</span> <span class=\"n\">Sans</span> <span class=\"n\">GB</span><span class=\"o\">,</span> <span class=\"n\">Helvetica</span><span class=\"o\">,</span> <span class=\"n\">Arial</span><span class=\"o\">,</span> <span class=\"k\">sans-serif</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n\n\n<p>在这里我告诉用户，你的电脑如果有微软雅黑，那就用雅黑；如果没有雅黑，那有<a href=\"http://www.typeisbeautiful.com/2010/01/1894/\">冬青黑</a>\n（Mac 下新增的中文字体，显示效果极佳）没？还没有啊，那就用 Helvetica，不行就 Arial。再不行，就\n随便哪个无衬线字体把。</p>\n\n<h3>盒子模型</h3>\n\n<p>前端工程师通常都希望设计师帮忙标注设计稿中各个设计元素的尺寸，但在设计师标注完尺寸之后，又会很愤怒地\n表示这不是他想要的。这种时候，双方的想法估计都是：</p>\n\n<p><img src=\"/assets/img/2013/are-you-f-kiding-me.jpg\" alt=\"\" /></p>\n\n<p>这里有个期望的差距，也正是本文想要填充的一个沟通的障碍。要标注符合 Web 设计的尺寸，最好先厘清 CSS\n中盒子模型的概念。</p>\n\n<p>前面我们说，在 HTML 诞生之初，它就是个文档的概念，是用来给研究者们共享文档、附件用的，但是在后来，\n渐渐地假如了 img、embed、video 等多媒体的内容，Web 内容也日趋丰富。于是浏览器犯难了，怎么把一份\n文档，渲染出一个层次化的页面呢？</p>\n\n<p>对浏览器而言，HTML 中的一个个标记，就是一个个小节点，<code>&lt;video&gt;</code> 标签，散落文档各处的文本，都是节点，\n每个节点都有它所属的类型，而每个类型的显示方式都可以归到如下几类：</p>\n\n<ul>\n<li>block</li>\n<li>inline</li>\n<li>inline-block</li>\n</ul>\n\n\n<p>即区块、内联、内联区块，我们先从区块开始。</p>\n\n<iframe width=\"100%\" height=\"300\" src=\"http://jsfiddle.net/dotnil/dBaSs/embedded/result\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n\n\n<p>在 CSS 中，每个区块都有三个属性可供设置，按照从外到内的顺序：</p>\n\n<ul>\n<li>margin：边距</li>\n<li>border：边框</li>\n<li>padding：填充</li>\n</ul>\n\n\n<p>在我的示例中，按区域颜色从浅至深的顺序设置。点 CSS 标签，可以看到 <code>.box</code> 区块的三个属性设置，为了\n显示效果，我还设置了背景色：</p>\n\n<div class=\"highlight\"><pre><code class=\"css\"><span class=\"nc\">.box</span> <span class=\"p\">{</span>\n    <span class=\"k\">margin</span><span class=\"o\">:</span> <span class=\"m\">20px</span><span class=\"p\">;</span>\n    <span class=\"k\">border</span><span class=\"o\">:</span> <span class=\"m\">5px</span> <span class=\"k\">solid</span> <span class=\"m\">#ccc</span><span class=\"p\">;</span>\n    <span class=\"k\">padding</span><span class=\"o\">:</span> <span class=\"m\">30px</span><span class=\"p\">;</span>\n    <span class=\"k\">background</span><span class=\"o\">:</span> <span class=\"m\">#999</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n\n\n<p>修改 margin 的效果：</p>\n\n<p><img src=\"/assets/img/2013/margin.gif\" alt=\"\" /></p>\n\n<p>修改 border 的效果：</p>\n\n<p><img src=\"/assets/img/2013/border.gif\" alt=\"\" /></p>\n\n<p>修改 padding 的效果：</p>\n\n<p><img src=\"/assets/img/2013/padding.gif\" alt=\"\" /></p>\n\n<p>每一个块级元素都有这三个属性，边距、边框、填充。</p>\n\n<h3>浮动与定位</h3>\n\n<p>TODO</p>\n\n<h3>布局</h3>\n\n<p>TODO</p>\n\n<h2>跋</h2>\n\n<p>给设计师的教程，是不应该像本文这般枯燥乏味的，本文可以算是知识点的预整理，在 2013 下半年，我将整理\n本文，将其以 Web 小应用的形式展现。</p>\n\n<p>希望我说到做到，哈哈。</p>\n",
            "$": {
              "type": "html"
            }
          }
        ]
      },
      {
        "title": [
          "RichBase 的前世今生"
        ],
        "link": [
          {
            "$": {
              "href": "http://cyj.me/f2e/what-is-rich-base"
            }
          }
        ],
        "updated": [
          "2013-08-06T00:00:00-07:00"
        ],
        "id": [
          "http://cyj.me/f2e/what-is-rich-base"
        ],
        "content": [
          {
            "_": "<p>KISSY 从 1.3.x 版本开始，提供一个叫做 RichBase 的模块，顾名思义，它是 Base 的富集，直接从\nBase 继承。但在我们挖 RichBase 的身份是红是黑之前，先有些基础知识得普及一下。</p>\n\n<h2>原型继承</h2>\n\n<p>在你初次接触 JavaScript 之前，可能就已经听到这种评价，JavaScript 有个叫做原型继承之类的东西，\n所以在 JavaScript 里要做面向对象编程，我们需要把数据和方法写成这个样子：</p>\n\n<h3>原型</h3>\n\n<div class=\"highlight\"><pre><code class=\"js\"><span class=\"kd\">function</span> <span class=\"nx\">Pet</span><span class=\"p\">(</span><span class=\"nx\">attrs</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">name</span> <span class=\"o\">=</span> <span class=\"nx\">attrs</span><span class=\"p\">.</span><span class=\"nx\">name</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">age</span> <span class=\"o\">=</span> <span class=\"nx\">attrs</span><span class=\"p\">.</span><span class=\"nx\">age</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">gender</span> <span class=\"o\">=</span> <span class=\"nx\">attrs</span><span class=\"p\">.</span><span class=\"nx\">gender</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">Pet</span><span class=\"p\">.</span><span class=\"nx\">prototype</span><span class=\"p\">.</span><span class=\"nx\">greeting</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;Hi there. I am &#39;</span> <span class=\"o\">+</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">name</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;.&#39;</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n\n\n<p>然后在实例化时，我们这么用：</p>\n\n<div class=\"highlight\"><pre><code class=\"js\"><span class=\"kd\">var</span> <span class=\"nx\">pet</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Pet</span><span class=\"p\">({</span> <span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"s1\">&#39;Ghibli&#39;</span><span class=\"p\">,</span> <span class=\"nx\">age</span><span class=\"o\">:</span> <span class=\"mi\">28</span><span class=\"p\">,</span> <span class=\"nx\">gender</span><span class=\"o\">:</span> <span class=\"s1\">&#39;male&#39;</span> <span class=\"p\">})</span>\n\n<span class=\"nx\">pet</span><span class=\"p\">.</span><span class=\"nx\">greeting</span><span class=\"p\">()</span>      <span class=\"c1\">// ==&gt; Hi there. I am Ghibli.</span>\n</code></pre></div>\n\n\n<p>将类方法定义在原型上，可以节省内存空间，不需要所有实例上都重新定义方法，以上定义方式，和如下写法，\n自然是不同的：</p>\n\n<div class=\"highlight\"><pre><code class=\"js\"><span class=\"kd\">function</span> <span class=\"nx\">Pet</span><span class=\"p\">(</span><span class=\"nx\">attrs</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">pet</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n\n    <span class=\"nx\">pet</span><span class=\"p\">.</span><span class=\"nx\">name</span> <span class=\"o\">=</span> <span class=\"nx\">attrs</span><span class=\"p\">.</span><span class=\"nx\">name</span>\n    <span class=\"nx\">pet</span><span class=\"p\">.</span><span class=\"nx\">age</span> <span class=\"o\">=</span> <span class=\"nx\">attrs</span><span class=\"p\">.</span><span class=\"nx\">age</span>\n    <span class=\"nx\">pet</span><span class=\"p\">.</span><span class=\"nx\">gender</span> <span class=\"o\">=</span> <span class=\"nx\">attrs</span><span class=\"p\">.</span><span class=\"nx\">gender</span>\n\n    <span class=\"nx\">pet</span><span class=\"p\">.</span><span class=\"nx\">greeting</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"p\">...</span> <span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"nx\">pet</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n\n\n<p>这种写法，唯一的好处是可以不用写 <code>new</code>，然而每个实例都有自己的 <code>.greeting()</code> 方法，当实例变多时，\n是极大的内存浪费。</p>\n\n<p>言归正传，原型写法看上去很美，可拿到实践中去又会冒出两个新问题：</p>\n\n<ul>\n<li>如何从 Pet 继承？</li>\n<li>如何声明私有属性？</li>\n</ul>\n\n\n<h3>如何实现继承？</h3>\n\n<p>在 JavaScript 里，原型有个重要的副概念，称之为原型链（prototype chain），当对象在自身找不到\n属性定义时，将从原型里找，所以上例中我们可以给不同的 Pet 实例共享 greeting 方法，因为此方法是定义\n在 Pet 原型上的。假如原型上仍然找不到呢，将到 <code>Pet.prototype.prototype</code> 上找，还找不到呢？\n将到 <code>Pet.prototype.prototype.prototype</code> 上找，还找不到呢？</p>\n\n<p>别闹了。此即所谓原型链。</p>\n\n<p>现在假设我们现在要从 Pet 派生出子类 Dog，然而 JavaScript 木有提供 extends 之类的语法，而按照\n原型链设计，我们需要做的事情如下：</p>\n\n<div class=\"highlight\"><pre><code class=\"js\"><span class=\"kd\">function</span> <span class=\"nx\">Dog</span><span class=\"p\">(</span><span class=\"nx\">attrs</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">Pet</span><span class=\"p\">.</span><span class=\"nx\">call</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">,</span> <span class=\"nx\">attrs</span><span class=\"p\">)</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">breed</span> <span class=\"o\">=</span> <span class=\"nx\">attrs</span><span class=\"p\">.</span><span class=\"nx\">breed</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// 将 Dog 的原型指为 Pet 实例，即变相将 Dog.prototype.prototype 设为 Pet.prototype</span>\n<span class=\"nx\">Dog</span><span class=\"p\">.</span><span class=\"nx\">prototype</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Pet</span><span class=\"p\">()</span>\n\n<span class=\"nx\">Dog</span><span class=\"p\">.</span><span class=\"nx\">prototype</span><span class=\"p\">.</span><span class=\"nx\">bark</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;Woof! Woof!&#39;</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n\n\n<p>这样，Dog 能够继承到 Pet 的方法，也能够继续扩展自己的。</p>\n\n<div class=\"highlight\"><pre><code class=\"js\"><span class=\"kd\">var</span> <span class=\"nx\">dog</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Dog</span><span class=\"p\">({</span>\n    <span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"s1\">&#39;Klinsmann&#39;</span><span class=\"p\">,</span>\n    <span class=\"nx\">age</span><span class=\"o\">:</span> <span class=\"mi\">49</span><span class=\"p\">,</span>\n    <span class=\"nx\">gender</span><span class=\"o\">:</span> <span class=\"s1\">&#39;male&#39;</span><span class=\"p\">,</span>\n    <span class=\"nx\">breed</span><span class=\"o\">:</span> <span class=\"s1\">&#39;Golden Retriever&#39;</span>\n<span class=\"p\">})</span>\n\n<span class=\"nx\">dog</span><span class=\"p\">.</span><span class=\"nx\">greeting</span><span class=\"p\">()</span>      <span class=\"c1\">// ==&gt; Hi there. I am Klinsmann.</span>\n<span class=\"nx\">dog</span><span class=\"p\">.</span><span class=\"nx\">bark</span><span class=\"p\">()</span>          <span class=\"c1\">// ==&gt; Woof! Woof!</span>\n</code></pre></div>\n\n\n<p>这样的继承实现有许多问题：</p>\n\n<ul>\n<li>与父类耦合严重，需要在子类构造函数中调用父类构造函数</li>\n<li>父类构造器有副作用时，需要一个临时函数做原型链中转</li>\n</ul>\n\n\n<p>第一个问题，暂时按下不表。第二个问题，意思是这样的：</p>\n\n<div class=\"highlight\"><pre><code class=\"js\"><span class=\"kd\">function</span> <span class=\"nx\">Dummy</span><span class=\"p\">()</span> <span class=\"p\">{}</span>\n\n<span class=\"nx\">Dummy</span><span class=\"p\">.</span><span class=\"nx\">prototype</span> <span class=\"o\">=</span> <span class=\"nx\">Pet</span><span class=\"p\">.</span><span class=\"nx\">prototype</span>\n<span class=\"nx\">Dog</span><span class=\"p\">.</span><span class=\"nx\">prototype</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Dummy</span><span class=\"p\">()</span>\n</code></pre></div>\n\n\n<p>为何不直接 <code>Dog.prototype = Pet.prototype</code>？\n因为这样的话 <code>Dog.prototype.bark = function() {}</code> 也会跑到 <code>Pet.prototype</code> 上去，\n并不是所有宠物都会吠的哇。</p>\n\n<p>不管这么样，这种继承方式当真是不直观，所以 Node.js 的官方 API 里，直接在 util 模块中提供了\ninherits 方法：</p>\n\n<div class=\"highlight\"><pre><code class=\"js\"><span class=\"kd\">var</span> <span class=\"nx\">util</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;util&#39;</span><span class=\"p\">)</span>\n\n<span class=\"c1\">// 仍然需要在子类中调用父类的构造函数</span>\n<span class=\"kd\">function</span> <span class=\"nx\">Dog</span><span class=\"p\">(</span><span class=\"nx\">attrs</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">Pet</span><span class=\"p\">.</span><span class=\"nx\">call</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">,</span> <span class=\"nx\">attrs</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// 使用 util.inherits 处理原型链</span>\n<span class=\"nx\">util</span><span class=\"p\">.</span><span class=\"nx\">inherits</span><span class=\"p\">(</span><span class=\"nx\">Dog</span><span class=\"p\">,</span> <span class=\"nx\">Pet</span><span class=\"p\">)</span>\n</code></pre></div>\n\n\n<p>于是，inherit 关键字，算是实现了。</p>\n\n<h3>如何声明私有属性？</h3>\n\n<p>在上述例子中，pet 或者 dog 的属性全部都是外部可以直接访问的，例如：</p>\n\n<div class=\"highlight\"><pre><code class=\"js\"><span class=\"kd\">var</span> <span class=\"nx\">dog</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Dog</span><span class=\"p\">({</span> <span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"s1\">&#39;Christiano&#39;</span> <span class=\"p\">})</span>\n\n<span class=\"nx\">dog</span><span class=\"p\">.</span><span class=\"nx\">name</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Ronaldo&#39;</span>\n</code></pre></div>\n\n\n<p>假如我们需要进行变量验证，使用类似 Java Bean 中 getter、setter 这种写法，以确保获取与设置变量\n的正确性：</p>\n\n<div class=\"highlight\"><pre><code class=\"js\"><span class=\"nx\">Dog</span><span class=\"p\">.</span><span class=\"nx\">prototype</span><span class=\"p\">.</span><span class=\"nx\">getAge</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">age</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">Dog</span><span class=\"p\">.</span><span class=\"nx\">prototype</span><span class=\"p\">.</span><span class=\"nx\">setAge</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">age</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">age</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nx\">age</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">20</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">age</span> <span class=\"o\">=</span> <span class=\"nx\">age</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">var</span> <span class=\"nx\">dog</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Dog</span><span class=\"p\">({</span> <span class=\"nx\">age</span><span class=\"o\">:</span> <span class=\"mi\">10</span> <span class=\"p\">})</span>\n\n<span class=\"nx\">dog</span><span class=\"p\">.</span><span class=\"nx\">getAge</span><span class=\"p\">()</span>        <span class=\"c1\">// ==&gt; 10</span>\n<span class=\"nx\">dog</span><span class=\"p\">.</span><span class=\"nx\">setAge</span><span class=\"p\">(</span><span class=\"mi\">49</span><span class=\"p\">)</span>      <span class=\"c1\">// 哪有狗狗可以活 49 岁的</span>\n<span class=\"nx\">dog</span><span class=\"p\">.</span><span class=\"nx\">setAge</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>      <span class=\"c1\">// 哪有 -1 岁的？这不科学</span>\n<span class=\"nx\">dog</span><span class=\"p\">.</span><span class=\"nx\">getAge</span><span class=\"p\">()</span>        <span class=\"c1\">// ==&gt; 10</span>\n\n<span class=\"c1\">// 但是挡不住这一招必杀</span>\n<span class=\"nx\">dog</span><span class=\"p\">.</span><span class=\"nx\">age</span> <span class=\"o\">=</span> <span class=\"kc\">NaN</span>       <span class=\"c1\">// 囧</span>\n</code></pre></div>\n\n\n<p>在编程范式一书中，谈论了许多对象继承、接口约束、私有变量保护之类的事情，感兴趣的同学可以找来看，\n本文不往下讨论。</p>\n\n<h2>KISSY 中的辅助方法</h2>\n\n<p>你可能注意到了，不管是定义类还是继承类，都与 prototype 脱不了关系。所以在说 Base 之前，我们需要\n了解一下 KISSY 中为了方便处理原型链、继承等事务所提供的辅助方法。有如下三个方法：</p>\n\n<ul>\n<li>S.mix</li>\n<li>S.augment</li>\n<li>S.extend</li>\n</ul>\n\n\n<h3>S.mix</h3>\n\n<p>当我们需要往对象上混入（mix）属性或者方法时，可以使用 S.mix：</p>\n\n<div class=\"highlight\"><pre><code class=\"js\"><span class=\"kd\">var</span> <span class=\"nx\">Singleton</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"nx\">data</span><span class=\"o\">:</span> <span class=\"p\">{</span> <span class=\"p\">...</span> <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">S</span><span class=\"p\">.</span><span class=\"nx\">mix</span><span class=\"p\">(</span><span class=\"nx\">Singleton</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n    <span class=\"nx\">get</span><span class=\"o\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">prop</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">[</span><span class=\"nx\">prop</span><span class=\"p\">]</span>\n    <span class=\"p\">},</span>\n    <span class=\"nx\">set</span><span class=\"o\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">prop</span><span class=\"p\">,</span> <span class=\"nx\">value</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">typeof</span> <span class=\"nx\">value</span> <span class=\"o\">!==</span> <span class=\"s1\">&#39;undefined&#39;</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">[</span><span class=\"nx\">prop</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">value</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">})</span>\n</code></pre></div>\n\n\n<p>在此例中，我们实现了一个单体，它有 get、set 方法，同时持有 data 数据。</p>\n\n<p>除了这种简单的混入之外，<a href=\"http://docs.kissyui.com/docs/html/api/seed/kissy/mix.html\">S.mix</a>\n还支持额外的参数，本文不着重讨论，按下不表。</p>\n\n<p>此外，用于方便处理默认与自定义配置项合并的方法，还有 <a href=\"http://docs.kissyui.com/docs/html/api/seed/kissy/merge.html\">S.merge</a>。\n它不会影响第一个参数，会返回一个新的对象。</p>\n\n<h3>S.augment</h3>\n\n<p>S.augment 其实就是混入，只不过混入的对象是第一个参数的 prototype 属性，它的用法如下：</p>\n\n<div class=\"highlight\"><pre><code class=\"js\"><span class=\"kd\">var</span> <span class=\"nx\">Furry</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"nx\">shave</span><span class=\"o\">:</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">shaved</span> <span class=\"o\">=</span> <span class=\"kc\">true</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">Dog</span><span class=\"p\">(</span><span class=\"nx\">attrs</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">Pet</span><span class=\"p\">.</span><span class=\"nx\">call</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">,</span> <span class=\"nx\">attrs</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">Cat</span><span class=\"p\">(</span><span class=\"nx\">attrs</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">Pet</span><span class=\"p\">.</span><span class=\"nx\">call</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">,</span> <span class=\"nx\">attrs</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">S</span><span class=\"p\">.</span><span class=\"nx\">augment</span><span class=\"p\">(</span><span class=\"nx\">Dog</span><span class=\"p\">,</span> <span class=\"nx\">Furry</span><span class=\"p\">)</span>\n<span class=\"nx\">S</span><span class=\"p\">.</span><span class=\"nx\">augment</span><span class=\"p\">(</span><span class=\"nx\">Cat</span><span class=\"p\">,</span> <span class=\"nx\">Furry</span><span class=\"p\">)</span>\n\n<span class=\"kd\">var</span> <span class=\"nx\">dog</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Dog</span><span class=\"p\">()</span>\n<span class=\"kd\">var</span> <span class=\"nx\">cat</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Cat</span><span class=\"p\">()</span>\n\n<span class=\"nx\">dog</span><span class=\"p\">.</span><span class=\"nx\">shave</span><span class=\"p\">()</span>\n<span class=\"nx\">cat</span><span class=\"p\">.</span><span class=\"nx\">shave</span><span class=\"p\">()</span>\n</code></pre></div>\n\n\n<p>同样的，<a href=\"http://docs.kissyui.com/docs/html/api/seed/kissy/augment.html\">S.augment</a>\n所支持的用法比这里的示例要强大很多，此处不深入。</p>\n\n<h3>S.extend</h3>\n\n<p>S.extend 像 Node.js 里的 util.inherits，就是用于声明两个类的继承关系，与 util.inherits\n相比，它更为贴心，还会维护 superclass 和 superclass.constructor。</p>\n\n<div class=\"highlight\"><pre><code class=\"js\"><span class=\"kd\">function</span> <span class=\"nx\">Dog</span><span class=\"p\">(</span><span class=\"nx\">attrs</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">Dog</span><span class=\"p\">.</span><span class=\"nx\">superclass</span><span class=\"p\">.</span><span class=\"nx\">constructor</span><span class=\"p\">.</span><span class=\"nx\">call</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">,</span> <span class=\"nx\">attrs</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">S</span><span class=\"p\">.</span><span class=\"nx\">extend</span><span class=\"p\">(</span><span class=\"nx\">Dog</span><span class=\"p\">,</span> <span class=\"nx\">Pet</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n    <span class=\"nx\">greeting</span><span class=\"o\">:</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"nx\">Dog</span><span class=\"p\">.</span><span class=\"nx\">superclass</span><span class=\"p\">.</span><span class=\"nx\">greeting</span><span class=\"p\">.</span><span class=\"nx\">call</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">)</span>\n        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;Woof!&#39;</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">})</span>\n</code></pre></div>\n\n\n<p>详细用法请看 <a href=\"http://docs.kissyui.com/docs/html/api/seed/kissy/extend.html\">S.extend 的官方文档</a>。</p>\n\n<p>注意 Dog 的构造函数体内，通过 Dog 类上的 superclass 属性，子类不再需要显式写明父类的名称，\n只需要直接调 <code>SubClass.superclass.constructor.call(this, attrs)</code> 即可。</p>\n\n<p>而在方法内，也可以通过 <code>SubClass.superclass</code> 拿到父类上的方法，类似其他编程语言中的 super 之类。</p>\n\n<h2>Base</h2>\n\n<p>有了 S.augment，我们可以很方便得扩展类的原型；有了 S.extend，我们可以很方便地继承；那么 KISSY\n对属性 getter、setter 有什么好的解决方案么？答案自然是 Base。</p>\n\n<p>顾名思义，Base 是个基础类；而这个类，也是通过 S.augment 等搞定的。</p>\n\n<h3>Attribute</h3>\n\n<p>Base 的属性配置来自 Attribute 模块，它提供如下方法：</p>\n\n<ul>\n<li>addAttr()</li>\n<li>addAttrs()</li>\n<li>hasAttr()</li>\n<li>get()</li>\n<li>getAttrVals()</li>\n<li>set()</li>\n<li>reset()</li>\n</ul>\n\n\n<p>眼尖的同学们，看到 get() 和 set() 了不？</p>\n\n<p>通过 get() 与 set() 这一层包装，Base 允许类在定义自己时，配置 getter、setter 方法：</p>\n\n<div class=\"highlight\"><pre><code class=\"js\"><span class=\"kd\">function</span> <span class=\"nx\">Dog</span><span class=\"p\">(</span><span class=\"nx\">attrs</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">Dog</span><span class=\"p\">.</span><span class=\"nx\">superclass</span><span class=\"p\">.</span><span class=\"nx\">call</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">,</span> <span class=\"nx\">attrs</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">Dog</span><span class=\"p\">.</span><span class=\"nx\">ATTRS</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"nx\">breed</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n        <span class=\"nx\">value</span><span class=\"o\">:</span> <span class=\"s1\">&#39;中华田园犬&#39;</span><span class=\"p\">,</span>\n        <span class=\"nx\">getter</span><span class=\"o\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">return</span> <span class=\"nx\">value</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;，汪星人&#39;</span>\n        <span class=\"p\">},</span>\n        <span class=\"nx\">setter</span><span class=\"o\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">S</span><span class=\"p\">.</span><span class=\"nx\">inArray</span><span class=\"p\">([</span><span class=\"s1\">&#39;金毛猎犬&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;拉布拉多&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;萨摩&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;中华田园犬&#39;</span><span class=\"p\">],</span> <span class=\"nx\">value</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n                <span class=\"k\">return</span> <span class=\"nx\">value</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n\n\n<p>在此，我们定义了 Dog 的属性 breed，即狗狗的种类，默认值是“中华田园犬”，同时，在设置种类时，\n我们限制种类只能是金毛猎犬、拉布拉多、萨摩、或者中华田园犬。而在获取种类时，我们恶意卖萌，给返回值加上\n汪星人后缀。</p>\n\n<div class=\"highlight\"><pre><code class=\"js\"><span class=\"kd\">var</span> <span class=\"nx\">dog</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Dog</span><span class=\"p\">()</span>\n\n<span class=\"nx\">dog</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;breed&#39;</span><span class=\"p\">)</span>                <span class=\"c1\">// ==&gt; 中华田园犬，汪星人</span>\n<span class=\"nx\">dog</span><span class=\"p\">.</span><span class=\"nx\">set</span><span class=\"p\">(</span><span class=\"s1\">&#39;breed&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;金毛猎犬&#39;</span><span class=\"p\">)</span>\n<span class=\"nx\">dog</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;breed&#39;</span><span class=\"p\">)</span>                <span class=\"c1\">// ==&gt; 金毛猎犬，汪星人</span>\n</code></pre></div>\n\n\n<h3>属性变更事件</h3>\n\n<p>同时 Base 提供如下事件：</p>\n\n<ul>\n<li>beforeAttrNameChange</li>\n<li>afterAttrNameChange</li>\n<li>*Change</li>\n</ul>\n\n\n<p>注意此处的 AttrName 是个示例名称，例如 breed 的相应事件名称是：</p>\n\n<ul>\n<li>beforeBreedChange</li>\n<li>afterBreedChange</li>\n</ul>\n\n\n<div class=\"highlight\"><pre><code class=\"js\"><span class=\"nx\">dog</span><span class=\"p\">.</span><span class=\"nx\">on</span><span class=\"p\">(</span><span class=\"s1\">&#39;afterBreedChange&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;我要从&#39;</span> <span class=\"o\">+</span> <span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">prevVal</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;变成&#39;</span> <span class=\"o\">+</span> <span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">newVal</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;啦！&#39;</span><span class=\"p\">)</span>\n<span class=\"p\">})</span>\n</code></pre></div>\n\n\n<h3>从 Base 继承</h3>\n\n<p>追求性能卓越的偏执狂，可能会想，“那我直接从 Attribute 继承好了呗？反正我只需要属性支持”，但在彻底\n了解 Base、Attribute、EventTarget 之前，这是个危险的想法，所以对于普通模块开发者，我的建议\n是直接从 Base 继承：</p>\n\n<div class=\"highlight\"><pre><code class=\"js\"><span class=\"kd\">function</span> <span class=\"nx\">Dog</span><span class=\"p\">(</span><span class=\"nx\">attrs</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">Dog</span><span class=\"p\">.</span><span class=\"nx\">superclass</span><span class=\"p\">.</span><span class=\"nx\">call</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">,</span> <span class=\"nx\">attrs</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">S</span><span class=\"p\">.</span><span class=\"nx\">extend</span><span class=\"p\">(</span><span class=\"nx\">Dog</span><span class=\"p\">,</span> <span class=\"nx\">Base</span><span class=\"p\">)</span>\n</code></pre></div>\n\n\n<p>从 Base 继承，我们就有了封装属性、自定义事件的能力。在从 Base 继承的模块中，我们还可以向外部抛出\n自定义事件：</p>\n\n<div class=\"highlight\"><pre><code class=\"js\"><span class=\"nx\">S</span><span class=\"p\">.</span><span class=\"nx\">extend</span><span class=\"p\">(</span><span class=\"nx\">Dog</span><span class=\"p\">,</span> <span class=\"nx\">Base</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n    <span class=\"nx\">bark</span><span class=\"o\">:</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">fire</span><span class=\"p\">(</span><span class=\"s1\">&#39;bark&#39;</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n            <span class=\"nx\">message</span><span class=\"o\">:</span> <span class=\"s1\">&#39;Woof! I just barked!&#39;</span>\n        <span class=\"p\">})</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">})</span>\n\n<span class=\"kd\">var</span> <span class=\"nx\">dog</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Dog</span><span class=\"p\">()</span>\n\n<span class=\"nx\">dog</span><span class=\"p\">.</span><span class=\"nx\">on</span><span class=\"p\">(</span><span class=\"s1\">&#39;bark&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">message</span><span class=\"p\">)</span>      <span class=\"c1\">// ==&gt; &#39;Woof! I just barked!&#39;</span>\n<span class=\"p\">})</span>\n</code></pre></div>\n\n\n<h2>RichBase</h2>\n\n<p>终于讲到正主啦，在 Base 一节中我们了解到，可以通过继承 Base 获得属性封装、自定义事件等特性，\n在寻常工作中处理业务逻辑，大致是够的了。但是，假如需求非常变态，单线继承变得不够用呢？</p>\n\n<p>所以开讲之前，先来八一八 Base 的不足处：</p>\n\n<ul>\n<li>单线继承，每个子类都只有一个父类，继承树类似 DOM 树</li>\n<li>实例化声明周期无法干预，实例销毁需要自行搞定</li>\n<li>写法蹩脚过时，看看人家 <a href=\"http://aralejs.org/class/\">arale/class</a></li>\n</ul>\n\n\n<h3>简单示例</h3>\n\n<p>于是有了 RichBase，先来看写法：</p>\n\n<div class=\"highlight\"><pre><code class=\"js\"><span class=\"kd\">var</span> <span class=\"nx\">Student</span> <span class=\"o\">=</span> <span class=\"nx\">RichBase</span><span class=\"p\">.</span><span class=\"nx\">extend</span><span class=\"p\">({</span>\n    <span class=\"nx\">learn</span><span class=\"o\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">lesson</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;Yeah, yeah. I am learning &#39;</span> <span class=\"o\">+</span> <span class=\"nx\">lesson</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;...&#39;</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">},</span> <span class=\"p\">{</span>\n    <span class=\"nx\">ATTRS</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n        <span class=\"nx\">college</span><span class=\"o\">:</span> <span class=\"p\">{</span> <span class=\"nx\">value</span><span class=\"o\">:</span> <span class=\"s1\">&#39;&#39;</span> <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">},</span> <span class=\"s1\">&#39;Student&#39;</span><span class=\"p\">)</span>\n</code></pre></div>\n\n\n<p>咦，怎么和 Base 一个样？跟底下这写法有啥区别？</p>\n\n<div class=\"highlight\"><pre><code class=\"js\"><span class=\"kd\">function</span> <span class=\"nx\">Student</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">Student</span><span class=\"p\">.</span><span class=\"nx\">superclass</span><span class=\"p\">.</span><span class=\"nx\">constructor</span><span class=\"p\">.</span><span class=\"nx\">apply</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">,</span> <span class=\"nx\">arguments</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">S</span><span class=\"p\">.</span><span class=\"nx\">extend</span><span class=\"p\">(</span><span class=\"nx\">Student</span><span class=\"p\">,</span> <span class=\"nx\">Base</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n    <span class=\"nx\">learn</span><span class=\"o\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">lesson</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;lesson &#39;</span> <span class=\"o\">+</span> <span class=\"nx\">lesson</span> <span class=\"o\">+</span> <span class=\"s1\">&#39; learned the hard way.&#39;</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">},</span> <span class=\"p\">{</span>\n    <span class=\"nx\">ATTRS</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n        <span class=\"nx\">college</span><span class=\"o\">:</span> <span class=\"p\">{</span> <span class=\"nx\">value</span><span class=\"o\">:</span> <span class=\"s1\">&#39;&#39;</span> <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">})</span>\n</code></pre></div>\n\n\n<p>答案是如果你的类就如 Student 这么简单，那就仍然用 Base 即可，这两种定义方式没有本质区别。\n对于简单用法，<code>RichBase.extend</code> 只是个语法糖。</p>\n\n<p>不过，咱还没触及本质呢。</p>\n\n<h3>构造函数、初始化函数与析构函数</h3>\n\n<p>好吧，这个标题其实挺无奈的，我觉得要理解这仨，绝对要知道它们对应的英文单词：</p>\n\n<ul>\n<li>constructor</li>\n<li>initializer</li>\n<li>destructor</li>\n</ul>\n\n\n<p>在使用 <code>RichBase.extend</code> 定义子类时，我们可以定义这三个方法，用于干预类的实例化与销毁过程。</p>\n\n<p>constructor 用于替换 RichBase 默认自动生成的构造函数，当调用 <code>RichBase.extend</code> 而没指定\nconstructor 时，RichBase 将创建一个匿名函数：</p>\n\n<div class=\"highlight\"><pre><code class=\"js\"><span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">C</span><span class=\"p\">.</span><span class=\"nx\">superclass</span><span class=\"p\">.</span><span class=\"nx\">constructor</span><span class=\"p\">.</span><span class=\"nx\">apply</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">,</span> <span class=\"nx\">arguments</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n\n\n<p>如果指定了构造函数名，而且在 KISSY 开发模式下，则会 eval 如下匿名函数：</p>\n\n<div class=\"highlight\"><pre><code class=\"js\"><span class=\"s2\">&quot;function &quot;</span> <span class=\"o\">+</span> <span class=\"nx\">CamelCase</span><span class=\"p\">(</span><span class=\"nx\">name</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;{\\n&quot;</span> <span class=\"o\">+</span>\n    <span class=\"s2\">&quot;C.superclass.constructor.apply(this, arguments)\\n&quot;</span> <span class=\"o\">+</span>\n<span class=\"s2\">&quot;}&quot;</span>\n</code></pre></div>\n\n\n<p>所以，如果你要干预默认的构造函数行为，记得加上 <code>.superclass.constructor.apply(this, arguments)</code>。</p>\n\n<p>也正是因为构造函数重载时这个恼人的强制要求的语句，RichBase 还提供 initializer 方法以便重载，\n普通的实例化时干预，例如内部事件预绑定，初始数据正规化，可以在此函数内进行。</p>\n\n<p>然后是析构函数，或者说销毁函数，当调用 <code>.destroy()</code> 方法时，将执行类定义时声明的 desctructor\n方法，整个 <code>.destroy()</code> 逻辑如下：</p>\n\n<div class=\"highlight\"><pre><code class=\"js\"><span class=\"nx\">destroy</span><span class=\"o\">:</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">self</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">;</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">self</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;destroyed&#39;</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n        <span class=\"nx\">self</span><span class=\"p\">.</span><span class=\"nx\">callPluginsMethod</span><span class=\"p\">(</span><span class=\"s2\">&quot;destructor&quot;</span><span class=\"p\">);</span>\n        <span class=\"nx\">destroyHierarchy</span><span class=\"p\">(</span><span class=\"nx\">self</span><span class=\"p\">);</span>\n        <span class=\"nx\">self</span><span class=\"p\">.</span><span class=\"nx\">detach</span><span class=\"p\">();</span>\n        <span class=\"nx\">self</span><span class=\"p\">.</span><span class=\"nx\">set</span><span class=\"p\">(</span><span class=\"s1\">&#39;destroyed&#39;</span><span class=\"p\">,</span> <span class=\"kc\">true</span><span class=\"p\">);</span>\n        <span class=\"nx\">self</span><span class=\"p\">.</span><span class=\"nx\">fire</span><span class=\"p\">(</span><span class=\"s1\">&#39;destroy&#39;</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n\n\n<p>会先调用插件上的 destructor，然后自身按依赖层级调 destructor，然后解除自身绑定的所有事件，\n再将 <code>destroyed</code> 属性设为 <code>true</code>，最终触发 <code>destroy</code> 事件。</p>\n\n<p>等等，插件是什么意思？我们来看个复杂的例子。</p>\n\n<h3>复杂例子</h3>\n\n<div class=\"highlight\"><pre><code class=\"js\"><span class=\"c1\">// Extensions definition</span>\n<span class=\"kd\">function</span> <span class=\"nx\">Man</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">Man</span><span class=\"p\">.</span><span class=\"nx\">superclass</span><span class=\"p\">.</span><span class=\"nx\">constructor</span><span class=\"p\">.</span><span class=\"nx\">apply</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">,</span> <span class=\"nx\">arguments</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">S</span><span class=\"p\">.</span><span class=\"nx\">extend</span><span class=\"p\">(</span><span class=\"nx\">Man</span><span class=\"p\">,</span> <span class=\"nx\">Base</span><span class=\"p\">,</span> <span class=\"p\">{},</span> <span class=\"p\">{</span>\n    <span class=\"nx\">ATTRS</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n        <span class=\"nx\">sexualOrientation</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n            <span class=\"nx\">value</span><span class=\"o\">:</span> <span class=\"s1\">&#39;female&#39;</span><span class=\"p\">,</span>\n            <span class=\"nx\">setter</span><span class=\"o\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"k\">return</span> <span class=\"nx\">value</span> <span class=\"o\">===</span> <span class=\"s1\">&#39;male&#39;</span> <span class=\"o\">?</span> <span class=\"nx\">value</span> <span class=\"o\">:</span> <span class=\"s1\">&#39;female&#39;</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">},</span>\n        <span class=\"nx\">homosexual</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n            <span class=\"nx\">getter</span><span class=\"o\">:</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n                <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;sexualOrientation&#39;</span><span class=\"p\">)</span> <span class=\"o\">===</span> <span class=\"s1\">&#39;male&#39;</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">})</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">Italian</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">Italian</span><span class=\"p\">.</span><span class=\"nx\">superclass</span><span class=\"p\">.</span><span class=\"nx\">constructor</span><span class=\"p\">.</span><span class=\"nx\">apply</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">,</span> <span class=\"nx\">argments</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">S</span><span class=\"p\">.</span><span class=\"nx\">extend</span><span class=\"p\">(</span><span class=\"nx\">Italian</span><span class=\"p\">,</span> <span class=\"nx\">Base</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n    <span class=\"nx\">greeting</span><span class=\"o\">:</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;Ciao, mangiato!&#39;</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">},</span> <span class=\"p\">{</span>\n    <span class=\"nx\">ATTRS</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n        <span class=\"nx\">city</span><span class=\"o\">:</span> <span class=\"p\">{</span> <span class=\"nx\">value</span><span class=\"o\">:</span> <span class=\"s1\">&#39;Florence&#39;</span> <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">})</span>\n\n\n<span class=\"c1\">// Plugins definition, will be plugged into class dinamically.</span>\n<span class=\"kd\">function</span> <span class=\"nx\">Painter</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">Painter</span><span class=\"p\">.</span><span class=\"nx\">superclass</span><span class=\"p\">.</span><span class=\"nx\">constructor</span><span class=\"p\">.</span><span class=\"nx\">apply</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">,</span> <span class=\"nx\">arguments</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">S</span><span class=\"p\">.</span><span class=\"nx\">extend</span><span class=\"p\">(</span><span class=\"nx\">Painter</span><span class=\"p\">,</span> <span class=\"nx\">Base</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n    <span class=\"nx\">paint</span><span class=\"o\">:</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"p\">...</span> <span class=\"p\">}</span>\n<span class=\"p\">},</span> <span class=\"p\">{</span>\n    <span class=\"nx\">ATTRS</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n        <span class=\"nx\">paints</span><span class=\"o\">:</span> <span class=\"p\">{</span> <span class=\"nx\">value</span><span class=\"o\">:</span> <span class=\"p\">[]</span> <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">})</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">Sculptor</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">Sculptor</span><span class=\"p\">.</span><span class=\"nx\">superclass</span><span class=\"p\">.</span><span class=\"nx\">constructor</span><span class=\"p\">.</span><span class=\"nx\">apply</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">,</span> <span class=\"nx\">arguments</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">S</span><span class=\"p\">.</span><span class=\"nx\">extend</span><span class=\"p\">(</span><span class=\"nx\">Sculptor</span><span class=\"p\">,</span> <span class=\"nx\">Base</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n    <span class=\"nx\">sculpt</span><span class=\"o\">:</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"p\">...</span> <span class=\"p\">}</span>\n<span class=\"p\">},</span> <span class=\"p\">{</span>\n    <span class=\"nx\">ATTRS</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n        <span class=\"nx\">sculpts</span><span class=\"o\">:</span> <span class=\"p\">{</span> <span class=\"nx\">value</span><span class=\"o\">:</span> <span class=\"p\">[]</span> <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">})</span>\n\n\n<span class=\"c1\">// Class definition: Italian Renaissance man</span>\n<span class=\"kd\">var</span> <span class=\"nx\">ItalianRenaissanceMan</span> <span class=\"o\">=</span> <span class=\"nx\">RichBase</span><span class=\"p\">.</span><span class=\"nx\">extend</span><span class=\"p\">([</span><span class=\"nx\">Man</span><span class=\"p\">,</span> <span class=\"nx\">Italian</span><span class=\"p\">],</span> <span class=\"p\">{</span>\n    <span class=\"nx\">greeting</span><span class=\"o\">:</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// 注意，这行不通，ItalianRenaissanceMan.superclass 在此处指向的是 RichBase</span>\n        <span class=\"c1\">// ItalianRenaissanceMan.superclass.greeting.call(this)</span>\n        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;I have no idea why I am so versatile!&#39;</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">},</span> <span class=\"p\">{</span>\n    <span class=\"nx\">ATTRS</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n        <span class=\"nx\">fullname</span><span class=\"o\">:</span> <span class=\"p\">{</span> <span class=\"nx\">value</span><span class=\"o\">:</span> <span class=\"s1\">&#39;&#39;</span> <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">},</span> <span class=\"s1\">&#39;ItalianRenaissanceMan&#39;</span><span class=\"p\">)</span>\n\n<span class=\"c1\">// 达芬奇</span>\n<span class=\"kd\">var</span> <span class=\"nx\">leonardo</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">ItalianRenaissanceMan</span><span class=\"p\">({</span>\n    <span class=\"nx\">fullname</span><span class=\"o\">:</span> <span class=\"s1\">&#39;Leonardo di ser Piero da Vinci&#39;</span>\n<span class=\"p\">})</span>\n\n<span class=\"nx\">leonardo</span><span class=\"p\">.</span><span class=\"nx\">plug</span><span class=\"p\">(</span>\n    <span class=\"k\">new</span> <span class=\"nx\">Painter</span><span class=\"p\">({</span> <span class=\"nx\">paints</span><span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"s1\">&#39;Mona Lisa&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;The Last Supper&#39;</span><span class=\"p\">]</span> <span class=\"p\">})</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\">// 米开朗基罗</span>\n<span class=\"kd\">var</span> <span class=\"nx\">michelangelo</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">ItalianRenaissanceMan</span><span class=\"p\">({</span>\n    <span class=\"nx\">fullname</span><span class=\"o\">:</span> <span class=\"s1\">&#39;Michelangelo di Lodovico Buonarroti Simoni&#39;</span>\n<span class=\"p\">})</span>\n\n<span class=\"nx\">michelangelo</span><span class=\"p\">.</span><span class=\"nx\">plug</span><span class=\"p\">([</span>\n    <span class=\"k\">new</span> <span class=\"nx\">Painter</span><span class=\"p\">({</span> <span class=\"nx\">paints</span><span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"s1\">&#39;Ceiling of Sistine Chapel&#39;</span><span class=\"p\">]</span> <span class=\"p\">}),</span>\n    <span class=\"k\">new</span> <span class=\"nx\">Sculptor</span><span class=\"p\">({</span> <span class=\"nx\">sculpts</span><span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"s1\">&#39;Pieta&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;David&#39;</span><span class=\"p\">]</span> <span class=\"p\">})</span>\n<span class=\"p\">])</span>\n</code></pre></div>\n\n\n<p>这是个比较详细的例子，展示了 RichBase 为应对 Base 的不足，所提供的几大特性：</p>\n\n<ul>\n<li>从多个扩展（extension）继承</li>\n<li>动态插入（plug）</li>\n<li>RichBase.extend 语法糖</li>\n</ul>\n\n\n<h3>多继承</h3>\n\n<p>RichBase.extend 的第一个参数，是 extensions，即扩展数组，可以指定多个类，RichBase 会帮你维护\n好扩展与主类的关系，将扩展类里的 ATTRS 声明混入主类的 ATTRS，将扩展类里的方法混入主类的原型链，等等。</p>\n\n<p>在此例中，我定义了两个类作为扩展类：</p>\n\n<ul>\n<li>Man</li>\n<li>Italian</li>\n</ul>\n\n\n<p>即男人、意大利人，<a href=\"http://en.wikipedia.org/wiki/Leonardo_da_Vinci\">达芬奇</a> 和\n<a href=\"http://en.wikipedia.org/wiki/Michelangelo\">米开朗基罗</a> 都是意大利人，是文艺复兴的中坚力量，\n两位都多才多艺，都是画家、雕塑家、工程师，达芬奇还是音乐家、数学家、发明家，米开朗基罗还是诗人。</p>\n\n<p>后来，对这种涉猎广泛，每一行还都做得屌炸天的人，称之为 <a href=\"http://en.wikipedia.org/wiki/Renaissance_Man\">文艺复兴男</a>。</p>\n\n<p>所以我定义的这个类叫做 Italian Renaissance man，意大利文艺复兴男的意思。定义方法很简单，用\nRichBase 继承 Man 与 Italian 即可。</p>\n\n<p>extensions 这个参数是可以省略的，如果你只是想用 RichBase 定义一个类的话，可以这么写：</p>\n\n<div class=\"highlight\"><pre><code class=\"js\"><span class=\"kd\">var</span> <span class=\"nx\">MyClass</span> <span class=\"o\">=</span> <span class=\"nx\">RichBase</span><span class=\"p\">.</span><span class=\"nx\">exnted</span><span class=\"p\">(</span>\n    <span class=\"p\">{</span> <span class=\"p\">...</span><span class=\"nx\">methods</span><span class=\"p\">...</span> <span class=\"p\">},</span>\n    <span class=\"p\">{</span> <span class=\"p\">...</span><span class=\"kr\">static</span> <span class=\"nx\">methods</span><span class=\"p\">...</span> <span class=\"p\">},</span>\n    <span class=\"s1\">&#39;MyClass&#39;</span>\n<span class=\"p\">)</span>\n</code></pre></div>\n\n\n<h3>插件</h3>\n\n<p>每个文艺复兴男的技能点都加得不一样，为了简单写，达芬奇是个画家：</p>\n\n<div class=\"highlight\"><pre><code class=\"js\"><span class=\"nx\">leonardo</span><span class=\"p\">.</span><span class=\"nx\">plug</span><span class=\"p\">(</span>\n    <span class=\"k\">new</span> <span class=\"nx\">Painter</span><span class=\"p\">({</span> <span class=\"nx\">paints</span><span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"s1\">&#39;Mona Lisa&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;The Last Supper&#39;</span><span class=\"p\">]</span> <span class=\"p\">})</span>\n<span class=\"p\">)</span>\n</code></pre></div>\n\n\n<p>米开朗基罗是个画家、雕塑家：</p>\n\n<div class=\"highlight\"><pre><code class=\"js\"><span class=\"nx\">michelangelo</span><span class=\"p\">.</span><span class=\"nx\">plug</span><span class=\"p\">([</span>\n    <span class=\"k\">new</span> <span class=\"nx\">Painter</span><span class=\"p\">({</span> <span class=\"nx\">paints</span><span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"s1\">&#39;Ceiling of Sistine Chapel&#39;</span><span class=\"p\">]</span> <span class=\"p\">}),</span>\n    <span class=\"k\">new</span> <span class=\"nx\">Sculptor</span><span class=\"p\">({</span> <span class=\"nx\">sculpts</span><span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"s1\">&#39;Pieta&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;David&#39;</span><span class=\"p\">]</span> <span class=\"p\">})</span>\n<span class=\"p\">])</span>\n</code></pre></div>\n\n\n<p>其实达芬奇也是雕塑家，只是他的雕塑作品没有画作那么有名。他曾经有过一个巨型战马雕塑的设计，后来因为金主\n变故而流产，还因此被米开朗基罗嘲讽了很多次。</p>\n\n<p>言归正传，还可以在实例化的时候传入 plugs 属性：</p>\n\n<div class=\"highlight\"><pre><code class=\"js\"><span class=\"kd\">var</span> <span class=\"nx\">leonardo</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">ItalianRenaissanceMan</span><span class=\"p\">({</span>\n    <span class=\"nx\">plugs</span><span class=\"o\">:</span> <span class=\"p\">[</span> <span class=\"p\">...</span> <span class=\"p\">]</span>\n<span class=\"p\">})</span>\n</code></pre></div>\n\n\n<h3>listeners</h3>\n\n<p>在实例化 RichBase 子类时，还可以传入 listeners 属性，在其中定义事件监听：</p>\n\n<div class=\"highlight\"><pre><code class=\"js\"><span class=\"kd\">var</span> <span class=\"nx\">leonardo</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">ItalianRenaissanceMan</span><span class=\"p\">({</span>\n    <span class=\"nx\">listeners</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">&#39;paint&#39;</span><span class=\"o\">:</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n            <span class=\"nx\">cosnole</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;I am painting something awesome. It is gonna be legendary!&#39;</span><span class=\"p\">)</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">})</span>\n</code></pre></div>\n\n\n<p>RichBase 将在实例化的时候帮你绑定，所以通过参数传入的事件监听，会在你自己拿到实例再绑定的事件监听\n之前：</p>\n\n<div class=\"highlight\"><pre><code class=\"js\"><span class=\"nx\">leonardo</span><span class=\"p\">.</span><span class=\"nx\">on</span><span class=\"p\">(</span><span class=\"s1\">&#39;paint&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;Dude, too late. The paint is finished already.&#39;</span><span class=\"p\">)</span>\n<span class=\"p\">})</span>\n\n<span class=\"c1\">// 当 leonardo.fire(&#39;paint&#39;) 事件时，将在 console 中先后输出：</span>\n<span class=\"c1\">//</span>\n<span class=\"c1\">//     I am painting something awesome. It is gonna be legendary!</span>\n<span class=\"c1\">//     Dude, too late. The paint is finished already.</span>\n</code></pre></div>\n\n\n<h3>_onSet*</h3>\n\n<p>在定义类的时候，还可以给 RichBase.extend 传 <code>_onSet*</code> 方法，使得在外部绑定的 <code>after*Change</code>\n之前，类本身可以先行处理：</p>\n\n<div class=\"highlight\"><pre><code class=\"js\"><span class=\"kd\">var</span> <span class=\"nx\">Man</span> <span class=\"o\">=</span> <span class=\"nx\">RichBase</span><span class=\"p\">.</span><span class=\"nx\">extend</span><span class=\"p\">({</span>\n    <span class=\"nx\">_onSetSexualOrientation</span><span class=\"o\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;was: &#39;</span> <span class=\"o\">+</span> <span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">prevValue</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;; now: &#39;</span> <span class=\"o\">+</span> <span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">nextValue</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">})</span>\n</code></pre></div>\n\n\n<p>当属性值发生变更时，顺序依次是：</p>\n\n<ol>\n<li>ATTRS 里的 setter 方法，即事前正规化</li>\n<li>类定义里的 <code>_onSetSexualOrientation</code> 方法</li>\n<li>实例化之后绑定的 <code>afterSexualOrientationChange</code> 事件</li>\n</ol>\n\n\n<h2>跋</h2>\n\n<p>以上即 RichBase 的简单说明，和个中来由，有些是我个人演绎，如有谬误，一定要指出来喔。</p>\n\n<p>最后，要知道从 util.inherits 到 Base，直到 RichBase，这一系列全都不是 JavaScript\n原生的东西，而是诸位开疆拓土的仁人志士们，利用 JavaScript 的灵活特性构造出来凭空架构，\n用得好，它们是天空之城，画出一片美丽世界，用不好，它们成了海市蜃楼，迷失自己。</p>\n\n<p>所以，感谢承玉给 KISSY 添加了如此之多的模块与功能；在 JavaScript 的世界里，与诸君共勉。</p>\n",
            "$": {
              "type": "html"
            }
          }
        ]
      },
      {
        "title": [
          "使用 mina 与 kirua 快速部署 express 应用"
        ],
        "link": [
          {
            "$": {
              "href": "http://cyj.me/f2e/deploying-express-app"
            }
          }
        ],
        "updated": [
          "2013-07-24T00:00:00-07:00"
        ],
        "id": [
          "http://cyj.me/f2e/deploying-express-app"
        ],
        "content": [
          {
            "_": "<p>初涉 Node.js 与 express.js 的同学，在做完首个应用之后，都可能会问这样的问题，该怎么样正确部署\n这个应用呢？</p>\n\n<h2>Short Answer</h2>\n\n<p>简单点的回答是：</p>\n\n<pre><code>$ NODE_ENV=production nohup node app.js &amp;\n</code></pre>\n\n<p>对比开发时跑 express 的命令：</p>\n\n<pre><code>$ node app.js\n</code></pre>\n\n<p>能够发现多了三个东西：</p>\n\n<ul>\n<li>NODE_ENV=production</li>\n<li>nohup</li>\n<li>&amp;</li>\n</ul>\n\n\n<h3>NODE_ENV</h3>\n\n<p>NODE_ENV 环境变量用来告诉 express，把它的 env 配置项设为 production，即加了这个前缀之后，\napp.js 中的环境变量判断，会变到 production 分支：</p>\n\n<div class=\"highlight\"><pre><code class=\"js\"><span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;env&#39;</span><span class=\"p\">)</span> <span class=\"o\">===</span> <span class=\"s1\">&#39;production&#39;</span>             <span class=\"c1\">// ==&gt; true</span>\n\n<span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nx\">configure</span><span class=\"p\">(</span><span class=\"s1\">&#39;production&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// production env configurations</span>\n<span class=\"p\">})</span>\n</code></pre></div>\n\n\n<h3>nohup 与 &amp;</h3>\n\n<p>nohup 其实就是 no hangup 的意思，后来延伸为即使父进程退出，子进程也不会终止，末尾的 &amp; ，即让此\n命名在后台运行。</p>\n\n<h3>缺点</h3>\n\n<p>用了这条命令，线上服务就可以跑起来了。不过，有两个比较显著的缺点：</p>\n\n<ul>\n<li>反复部署时很麻烦，得把旧进程 kill 掉</li>\n<li>没能利用到服务器的多核</li>\n</ul>\n\n\n<p>对后者，Node.js 0.10.x 版本开始，内建了 <a href=\"http://nodejs.org/api/cluster.html\">cluster</a>\n模块，使我们可以快速派生出工作进程，并在主进程中管理起来。</p>\n\n<p>而前者，则只能依靠诸位的 bash 脚本功底，自行记录进程 pid，下次发布前在用记好的 pid 把相关进程杀掉。</p>\n\n<p>不过，也不尽然，我们可以试试 <a href=\"https://github.com/dotnil/kirua\">kirua</a></p>\n\n<h2>使用 kirua 维护线上服务</h2>\n\n<p>讲 kirua 之前，得说说 forever，两者的定位是一样的其实。forever 是\n<a href=\"http://nodejitsu.com/\">nodejitsu</a> 维护的线上环境管理工具，顾名思义，就是让 express 应用\n永远运行着的意思。因为不管我们代码写得如何，总会出现异常导致进程挂掉，或者进程假死变成僵尸等等状况，\nforever 会在出状况时，自动 fork 新的进程。</p>\n\n<p>但是它也有两个不好的地方：</p>\n\n<ol>\n<li>没有内建 cluster，</li>\n<li>我在用它时发现 forever restart app.js 经常没效果</li>\n</ol>\n\n\n<p>kirua 正是为了解决这两点不足而开发的。</p>\n\n<p>kirua 要求 express app 的目录结构为：</p>\n\n<pre><code>.\n├── app.js\n├── log\n└── tmp\n    └── pids\n</code></pre>\n\n<p>当你执行 kirua start，它会在相应目录中放置相应文件：</p>\n\n<pre><code>.\n├── app.js\n├── log\n│   └── production.log\n└── tmp\n    └── pids\n        ├── master.pid\n        ├── worker.1.pid\n        └── worker.2.pid\n</code></pre>\n\n<p>log/production.log 即应用在运行时记录的日志，tmp/pids 下面那些，则是主进程与工作进程的进程 id，\n默认情况下，工作进程数与 CPU 数相同。</p>\n\n<h3>安装 kirua</h3>\n\n<p>kirua 以 NPM 包形式发布，通过 npm 命令安装即可：</p>\n\n<pre><code>$ npm install kirua -g\n</code></pre>\n\n<p>装好后，有三个子命令可用：</p>\n\n<ul>\n<li>kirua start</li>\n<li>kirua stop</li>\n<li>kirua restart</li>\n</ul>\n\n\n<p>在项目根目录执行相关命令即可。</p>\n\n<h2>使用 mina 部署代码到线上</h2>\n\n<p>有了 kirua，我们可以很方便地维护线上的进程了，那如何讲代码快速部署到线上服务呢？Rails 社区提供了\n许多好选择，最著名的莫过于：</p>\n\n<ul>\n<li>capistrano</li>\n<li>mina</li>\n</ul>\n\n\n<p>前者我用得太久，有些腻了，后者一直以小清新闻名，我们不妨一试。</p>\n\n<h3>安装 mina</h3>\n\n<p>首先，它是个 gem，我们执行：</p>\n\n<pre><code>$ gem install mina\n</code></pre>\n\n<p>即可得到 mina 命令，在项目根目录中执行：</p>\n\n<pre><code>$ mina init\n</code></pre>\n\n<p>会初始化一份文件，在 config/deploy.rb，在这个文件里配置好相关项，以我的为例：</p>\n\n<div class=\"highlight\"><pre><code class=\"ruby\"><span class=\"nb\">require</span> <span class=\"s1\">&#39;mina/git&#39;</span>\n\n\n<span class=\"n\">set</span> <span class=\"ss\">:domain</span><span class=\"p\">,</span> <span class=\"s1\">&#39;cyj.me&#39;</span>\n<span class=\"n\">set</span> <span class=\"ss\">:deploy_to</span><span class=\"p\">,</span> <span class=\"s1\">&#39;/home/johndoe/webapp/awesome-app&#39;</span>\n<span class=\"n\">set</span> <span class=\"ss\">:repository</span><span class=\"p\">,</span> <span class=\"s1\">&#39;git@github.com:johndoe/awesome-app.git&#39;</span>\n<span class=\"n\">set</span> <span class=\"ss\">:branch</span><span class=\"p\">,</span> <span class=\"s1\">&#39;master&#39;</span>\n\n<span class=\"c1\"># Manually create these paths in shared/ (eg: shared/config/database.yml) in your server.</span>\n<span class=\"c1\"># They will be linked in the &#39;deploy:link_shared_paths&#39; step.</span>\n<span class=\"n\">set</span> <span class=\"ss\">:shared_paths</span><span class=\"p\">,</span> <span class=\"o\">[</span><span class=\"s1\">&#39;config/database.yml&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;log&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;tmp&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;node_modules&#39;</span><span class=\"o\">]</span>\n\n<span class=\"c1\"># Optional settings:</span>\n<span class=\"n\">set</span> <span class=\"ss\">:user</span><span class=\"p\">,</span> <span class=\"s1\">&#39;johndoe&#39;</span>    <span class=\"c1\"># Username in the server to SSH to.</span>\n\n<span class=\"c1\"># This task is the environment that is loaded for most commands, such as</span>\n<span class=\"c1\"># `mina deploy` or `mina rake`.</span>\n<span class=\"n\">task</span> <span class=\"ss\">:environment</span> <span class=\"k\">do</span>\n<span class=\"k\">end</span>\n\n<span class=\"c1\"># Put any custom mkdir&#39;s in here for when `mina setup` is ran.</span>\n<span class=\"c1\"># For Rails apps, we&#39;ll make some of the shared paths that are shared between</span>\n<span class=\"c1\"># all releases.</span>\n<span class=\"n\">task</span> <span class=\"ss\">:setup</span> <span class=\"o\">=&gt;</span> <span class=\"ss\">:environment</span> <span class=\"k\">do</span>\n  <span class=\"n\">queue!</span> <span class=\"sx\">%[mkdir -p &quot;</span><span class=\"si\">#{</span><span class=\"n\">deploy_to</span><span class=\"si\">}</span><span class=\"sx\">/shared/log&quot;]</span>\n  <span class=\"n\">queue!</span> <span class=\"sx\">%[chmod g+rx,u+rwx &quot;</span><span class=\"si\">#{</span><span class=\"n\">deploy_to</span><span class=\"si\">}</span><span class=\"sx\">/shared/log&quot;]</span>\n\n  <span class=\"n\">queue!</span> <span class=\"sx\">%[mkdir -p &quot;</span><span class=\"si\">#{</span><span class=\"n\">deploy_to</span><span class=\"si\">}</span><span class=\"sx\">/shared/config&quot;]</span>\n  <span class=\"n\">queue!</span> <span class=\"sx\">%[chmod g+rx,u+rwx &quot;</span><span class=\"si\">#{</span><span class=\"n\">deploy_to</span><span class=\"si\">}</span><span class=\"sx\">/shared/config&quot;]</span>\n\n  <span class=\"n\">queue!</span> <span class=\"sx\">%[mkdir -p &quot;</span><span class=\"si\">#{</span><span class=\"n\">deploy_to</span><span class=\"si\">}</span><span class=\"sx\">/shared/node_modules&quot;]</span>\n  <span class=\"n\">queue!</span> <span class=\"sx\">%[chmod g+rx,u+rwx &quot;</span><span class=\"si\">#{</span><span class=\"n\">deploy_to</span><span class=\"si\">}</span><span class=\"sx\">/shared/node_modules&quot;]</span>\n\n  <span class=\"n\">queue</span> <span class=\"sx\">%[touch &quot;</span><span class=\"si\">#{</span><span class=\"n\">deploy_to</span><span class=\"si\">}</span><span class=\"sx\">/shared/config/database.yml&quot;]</span>\n<span class=\"k\">end</span>\n\n<span class=\"n\">desc</span> <span class=\"s2\">&quot;Deploys the current version to the server.&quot;</span>\n<span class=\"n\">task</span> <span class=\"ss\">:deploy</span> <span class=\"o\">=&gt;</span> <span class=\"ss\">:environment</span> <span class=\"k\">do</span>\n  <span class=\"n\">deploy</span> <span class=\"k\">do</span>\n    <span class=\"c1\"># Put things that will set up an empty directory into a fully set-up</span>\n    <span class=\"c1\"># instance of your project.</span>\n    <span class=\"n\">invoke</span> <span class=\"ss\">:&#39;git:clone&#39;</span>\n    <span class=\"n\">invoke</span> <span class=\"ss\">:&#39;deploy:link_shared_paths&#39;</span>\n    <span class=\"n\">queue!</span> <span class=\"sx\">%[npm install]</span>\n\n    <span class=\"n\">to</span> <span class=\"ss\">:launch</span> <span class=\"k\">do</span>\n      <span class=\"n\">queue</span> <span class=\"s1\">&#39;NODE_ENV=production kirua restart&#39;</span>\n    <span class=\"k\">end</span>\n  <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n\n<span class=\"n\">desc</span> <span class=\"s2\">&quot;Start the server.&quot;</span>\n<span class=\"n\">task</span> <span class=\"ss\">:start</span> <span class=\"k\">do</span>\n  <span class=\"n\">queue</span> <span class=\"sx\">%[cd </span><span class=\"si\">#{</span><span class=\"n\">deploy_to</span><span class=\"si\">}</span><span class=\"sx\">/current &amp;&amp; NODE_ENV=production kirua start]</span>\n<span class=\"k\">end</span>\n\n<span class=\"n\">desc</span> <span class=\"s2\">&quot;Restart the server.&quot;</span>\n<span class=\"n\">task</span> <span class=\"ss\">:restart</span> <span class=\"k\">do</span>\n  <span class=\"n\">queue</span> <span class=\"sx\">%[cd </span><span class=\"si\">#{</span><span class=\"n\">deploy_to</span><span class=\"si\">}</span><span class=\"sx\">/current &amp;&amp; NODE_ENV=production kirua restart]</span>\n<span class=\"k\">end</span>\n\n<span class=\"n\">desc</span> <span class=\"s2\">&quot;Stop the server.&quot;</span>\n<span class=\"n\">task</span> <span class=\"ss\">:stop</span> <span class=\"k\">do</span>\n  <span class=\"n\">queue</span> <span class=\"sx\">%[cd </span><span class=\"si\">#{</span><span class=\"n\">deploy_to</span><span class=\"si\">}</span><span class=\"sx\">/current &amp;&amp; NODE_ENV=production kirua stop]</span>\n<span class=\"k\">end</span>\n\n<span class=\"c1\"># For help in making your deploy script, see the Mina documentation:</span>\n<span class=\"c1\">#</span>\n<span class=\"c1\">#  - http://nadarei.co/mina</span>\n<span class=\"c1\">#  - http://nadarei.co/mina/tasks</span>\n<span class=\"c1\">#  - http://nadarei.co/mina/settings</span>\n<span class=\"c1\">#  - http://nadarei.co/mina/helpers</span>\n</code></pre></div>\n\n\n<h3>准备线上环境</h3>\n\n<p>使用过 capistrano 的同学应该比较了解一些，在我们初始部署之前，要执行 setup 命令，准备好线上的\n目录结构，mina 也是如此。</p>\n\n<p>执行 setup 之前，确保 deploy_to 变量设置的目录是有权限访问的，在我的配置里，这个目录是：</p>\n\n<pre><code>/home/johndoe/webapp/awesome-app/\n</code></pre>\n\n<p>执行 setup 之后，这个目录中将有：</p>\n\n<ul>\n<li>releases</li>\n<li>shared</li>\n<li>current</li>\n</ul>\n\n\n<p>current 是个软链接，指向 releases 中某个子目录。</p>\n\n<h3>部署</h3>\n\n<p>搞定之后，把代码推送到 git 仓库，然后在自己机器上，项目根目录下执行：</p>\n\n<pre><code>$ mina deploy\n</code></pre>\n\n<p>就妥啦。</p>\n",
            "$": {
              "type": "html"
            }
          }
        ]
      },
      {
        "title": [
          "古荡夕阳"
        ],
        "link": [
          {
            "$": {
              "href": "http://cyj.me/life/sunset-at-gudang"
            }
          }
        ],
        "updated": [
          "2013-07-19T00:00:00-07:00"
        ],
        "id": [
          "http://cyj.me/life/sunset-at-gudang"
        ],
        "content": [
          {
            "_": "<p>7月17日天目山路中间，四个古荡公交车站西北侧那个的附近。</p>\n\n<p>这天的夕阳很有味道，阳光射到晚霞，天马行空。</p>\n\n<p><embed src=\"http://player.youku.com/player.php/sid/XNTg0NjI4MDMy/v.swf\" allowFullScreen=\"true\" quality=\"high\" width=\"680\" height=\"425\" align=\"middle\" allowScriptAccess=\"always\" type=\"application/x-shockwave-flash\"></embed></p>\n\n<p>逐帧拍摄的试验品，问题比较多：</p>\n\n<ul>\n<li>没有带快门线，每次都要按机身上的快门，虽然设置了延迟两秒拍摄，但仍导致每次拍摄都有些许晃动。</li>\n<li>相机模式没有选对，应该锁定曝光，下次换 M 档测试</li>\n<li>做成视频时，照片的时间间隔偏长，应该拍更久，使得成品更紧凑</li>\n</ul>\n\n\n<p>希望有机会把玩移轴镜头，尝试一些效果。也请诸位设计师先生 @十圆QCee @何起颀 多多指教。</p>\n",
            "$": {
              "type": "html"
            }
          }
        ]
      },
      {
        "title": [
          "随江东去的瑞安老城"
        ],
        "link": [
          {
            "$": {
              "href": "http://cyj.me/life/gone-with-the-river"
            }
          }
        ],
        "updated": [
          "2013-07-01T00:00:00-07:00"
        ],
        "id": [
          "http://cyj.me/life/gone-with-the-river"
        ],
        "content": [
          {
            "_": "<p>6月20日，公司团建途径瑞安，作为瑞安乡下人，在这小县城待了三年，如今回头望望，更胜往昔。\n他像是一个志得意满的前辈，跟我笑着说，旧日子就是用来忘掉的，这老城，还是拆了罢。</p>\n\n<p>我们住在解放路邮电北路口的温商酒店，16层高，登高俯瞰，这片老城一览无遗。我惊讶于它如今的沧桑，\n竟毫无当年穿梭其间，目不暇给的感觉。</p>\n\n<p>次日中午，一行人启程返杭，我从家里回来，比约定的时间早了些，彼时艳阳高照，便拿着相机，沿大沙堤往北，\n又从邮电路往南，扫了一圈。</p>\n\n<p><img src=\"http://pic.yupoo.com/yicai-cyj_v/CYGdxuJy/RXJDg.jpg\" alt=\"\" />\n<img src=\"http://pic.yupoo.com/yicai-cyj_v/CYGdy5jv/QhBT0.jpg\" alt=\"\" /></p>\n\n<p><img src=\"http://pic.yupoo.com/yicai-cyj_v/CYGdyZki/vCARQ.jpg\" alt=\"\" />\n<img src=\"http://pic.yupoo.com/yicai-cyj_v/CYGdBh8p/MoZY5.jpg\" alt=\"\" /></p>\n\n<p><img src=\"http://pic.yupoo.com/yicai-cyj_v/CYGdCiX2/P0rhy.jpg\" alt=\"\" />\n<img src=\"http://pic.yupoo.com/yicai-cyj_v/CYGdEFoZ/IpPTj.jpg\" alt=\"\" /></p>\n\n<p><img src=\"http://pic.yupoo.com/yicai-cyj_v/CYGdGUjq/QryNW.jpg\" alt=\"\" />\n<img src=\"http://pic.yupoo.com/yicai-cyj_v/CYGdK8O5/MGHZp.jpg\" alt=\"\" /></p>\n\n<p><img src=\"http://pic.yupoo.com/yicai-cyj_v/CYGdKJed/XJWq3.jpg\" alt=\"\" />\n<img src=\"http://pic.yupoo.com/yicai-cyj_v/CYGdMD0r/jsLty.jpg\" alt=\"\" /></p>\n\n<p><img src=\"http://pic.yupoo.com/yicai-cyj_v/CYGdOiix/iRuXp.jpg\" alt=\"\" />\n<img src=\"http://pic.yupoo.com/yicai-cyj_v/CYGdR7SG/4YVpp.jpg\" alt=\"\" /></p>\n\n<p><img src=\"http://pic.yupoo.com/yicai-cyj_v/CYGdSA5m/lc7sA.jpg\" alt=\"\" />\n<img src=\"http://pic.yupoo.com/yicai-cyj_v/CYGdUoIL/CCsM.jpg\" alt=\"\" /></p>\n\n<p><img src=\"http://pic.yupoo.com/yicai-cyj_v/CYGdWJLf/KjO0H.jpg\" alt=\"\" />\n<img src=\"http://pic.yupoo.com/yicai-cyj_v/CYGdY6Hw/Rjjzg.jpg\" alt=\"\" /></p>\n\n<p><img src=\"http://pic.yupoo.com/yicai-cyj_v/CYGe0eSQ/Ahj6X.jpg\" alt=\"\" />\n<img src=\"http://pic.yupoo.com/yicai-cyj_v/CYGe0XmL/TTwtN.jpg\" alt=\"\" /></p>\n\n<p><img src=\"http://pic.yupoo.com/yicai-cyj_v/CYGe2HGI/14urhh.jpg\" alt=\"\" />\n<img src=\"http://pic.yupoo.com/yicai-cyj_v/CYGe5zZ0/Lhrs7.jpg\" alt=\"\" /></p>\n\n<p><img src=\"http://pic.yupoo.com/yicai-cyj_v/CYGe6hc7/Rnfcz.jpg\" alt=\"\" />\n<img src=\"http://pic.yupoo.com/yicai-cyj_v/CYGe91bP/avlh1.jpg\" alt=\"\" /></p>\n\n<p><img src=\"http://pic.yupoo.com/yicai-cyj_v/CYGe9Mkm/lPk7B.jpg\" alt=\"\" />\n<img src=\"http://pic.yupoo.com/yicai-cyj_v/CYGebUSx/oO4w1.jpg\" alt=\"\" /></p>\n\n<p><img src=\"http://pic.yupoo.com/yicai-cyj_v/CYGedssd/10Chml.jpg\" alt=\"\" />\n<img src=\"http://pic.yupoo.com/yicai-cyj_v/CYGeg5Im/Bowx3.jpg\" alt=\"\" /></p>\n",
            "$": {
              "type": "html"
            }
          }
        ]
      },
      {
        "title": [
          "在 Windows 下开发 Rails 项目"
        ],
        "link": [
          {
            "$": {
              "href": "http://cyj.me/binary/arch-linux-in-vbox"
            }
          }
        ],
        "updated": [
          "2013-06-19T00:00:00-07:00"
        ],
        "id": [
          "http://cyj.me/binary/arch-linux-in-vbox"
        ],
        "content": [
          {
            "_": "<p>MacBook Pro 电池挂掉了，右上角电池状态是个 X ，于是交给 IT 送修，翻出一台老旧的\nDell 760 主机，装着 Windows XP，平日里用来测 IE6 的，继续日常的工作。</p>\n\n<p>然而基于 Rails 的项目开发自然是没辙了。</p>\n\n<p>恰好前些日子，有个新同事来，申请的 rMBP 还没来得及采购，也是让他用虚拟机装\nLinux 跑项目，但是中间过程有些语焉不详，也缺乏记录。于是自己动手丰衣足食，\n实践之，并记录本文。</p>\n\n<h2>基本过程</h2>\n\n<ol>\n<li>下载、安装 <a href=\"https://www.virtualbox.org/\">VirtualBox</a></li>\n<li>下载 <a href=\"http://www.archlinux.org\">Arch Linux</a> 光盘镜像</li>\n<li>在 VirtualBox 中创建 Linux 虚拟机，光驱中装载下载好的 .iso 文件</li>\n<li>遵照 <a href=\"https://wiki.archlinux.org/index.php/Beginners%27_Guide\">Begginer's Guide</a> 完成安装</li>\n<li>安装 <a href=\"http://rvm.io\">RVM</a> 与 Ruby</li>\n</ol>\n\n\n<h3>Why X?</h3>\n\n<p>解释一下选择 VirtualBox 和 Arch Linux 的理由。在 Sun 还没被 Oracle\n吞掉前我就在用前者，因为开源且免费，虽然未必有 VMware 强大，但想要的都有，\n比 qemu 神马的，看起来不吓人很多，故而一直在用。</p>\n\n<p>在 Mac 平台里需要测试 IE 各个版本时，我也是通过多个版本的 Windows 系统虚拟机来搞的。\n当然有更好的方式，大公司里，会有团队致力于前端工程的自动化，自然会有又快又方便的\nWindows 2003，Windows 7 之类的服务，用远程桌面连接一下即可。利用这些服务，\n还可以快速跑前端代码的测试用例，参考 @ejohn 大神的 TestSwarm 。</p>\n\n<p>选择 Arch Linux ，原因则复杂一些，我用过的 Linux 发行版有：</p>\n\n<ul>\n<li>Ubuntu</li>\n<li>Debian</li>\n<li>Fedora</li>\n<li>RedHat Enterprise Linux</li>\n<li>Arch Linux</li>\n</ul>\n\n\n<p>Arch Linux 是我单凭个人喜好选择的最近一款 Linux 发行版，滚动发布，永远最新，\nWiki 建设的非常好，社区反馈也一直很快。我的 <a href=\"/binary/when-arch-linux-met-linode/\">VPS</a>\n装的也是它，跑了一年多，中间只因我的个人疏忽强制更新而出了一次篓子，其余顺滑如丝。</p>\n\n<h3>Arch Linux 安装步骤</h3>\n\n<p>看到这里，我猜你已经装好了 VirtualBox ，下好了 .iso 了。首先要创建 VirtualBox VM ：</p>\n\n<ul>\n<li>类型：Linux</li>\n<li>版本：Arch Linux</li>\n</ul>\n\n\n<p><img src=\"/assets/img/2013-arch-linux-install-guide/create-vm.jpg\" alt=\"创建 VM\" /></p>\n\n<p>即可。会询问你给这虚拟机分配多少硬盘和内存空间，一般而言硬盘 20G ，内存 512M ，\n也就够了。将来要是觉得不够用，还可以调整。当然，调整过程看起来有点奇诡，\n所以如果你的硬盘有富余，多分配些吧就。 创建完毕之后，在存储一栏里找到虚拟光驱，\n挂载好下载的 archlinux.iso ，然后启动机器。</p>\n\n<p><img src=\"/assets/img/2013-arch-linux-install-guide/boot-from-iso.png\" alt=\"从光盘启动\" /></p>\n\n<p>选择 Boot Arch Linux ，等它启动完，就能动手开始安装了。</p>\n\n<p>启动好的界面可能有点吓人，啥也木有，进入的是 root 帐号，/root/ 下只有一个\ninstall.txt 文件，其实是\n<a href=\"https://wiki.archlinux.org/index.php/Installation_Guide\">Install Guide</a>\n的 Wiki 源码，所以直接看该页面就好啦。</p>\n\n<p>在之前的 Arch 版本中，提供过初始安装脚本，但在最新的 Arch 里去掉了，\n以几个人肉步骤代替，分别是：</p>\n\n<ol>\n<li>选择键盘布局</li>\n<li>划分磁盘</li>\n<li>格式化磁盘</li>\n<li>挂载分区</li>\n<li>配置网络</li>\n<li>安装基础系统</li>\n<li>配置系统</li>\n<li>安装 GRUB 引导</li>\n<li>重启</li>\n</ol>\n\n\n<p>这些步骤里，假如物理安装，磁盘操作和启动引导部分比较有风险，幸亏我们是在虚拟机里。</p>\n\n<h3>键盘布局</h3>\n\n<p>我们的键盘布局都很正常，默认的 us 就是，无需修改。如果你不走运和我一样，\n买过一些欧版键盘，则需要到 /usr/share/kbd/keymaps 目录寻找相应的布局，并装载：</p>\n\n<pre><code>loadkeys uk\n</code></pre>\n\n<h3>准备磁盘</h3>\n\n<p>没有操作过分区软件的同学，在这一步可能会手足无措，所以 Wiki 中建议使用图形化工具\n<a href=\"http://sourceforge.net/projects/gparted/files/gparted-live-stable/0.16.1-1/\">GParted</a> 。\n后者直接以 Live CD 形式提供，可以直接在虚拟机里挂载，启动，打开 GParted 工具，\n鼠标点点，把分区工作做好。后面还会提到它。</p>\n\n<p><img src=\"/assets/img/2013-arch-linux-install-guide/gparted-boot.png\" alt=\"GParted 启动\" /></p>\n\n<p>选择第一项（GParted Live），回车即可。在启动的过程中，它会探测硬盘中安装的系统，\n并询问是否要根据系统中的配置调整从 Live CD 启动的系统。Live CD 中采用的系统是\n<a href=\"http://2008.cyj.me/debian.html\">Debian</a> 。</p>\n\n<p>根据它提供的选项，貌似还提供中文界面，为了保险起见，我没有选择。启动好界面：</p>\n\n<p><img src=\"/assets/img/2013-arch-linux-install-guide/gparted-live-cd.png\" alt=\"GParted 界面\" /></p>\n\n<p>如果嫌麻烦，用 cfdisk 之类的工具，按照\n<a href=\"https://wiki.archlinux.org/index.php/Beginners%27_Guide#Example\">新手指南 - 分区示例</a>\n操作即可。</p>\n\n<h3>格式化磁盘</h3>\n\n<p>弄好之后，可以用 <code>lsblk /dev/sda</code> 检查是否正确，如果你是物理安装，而且有多个磁盘，\n记得一定别搞混了。</p>\n\n<pre><code>mkfs.ext4 /dev/sda1\nmkfs.ext4 /dev/dsa2\n</code></pre>\n\n<p>即以 EXT4 为文件系统，格式化新创建的磁盘 a 上的 1、2 分区。</p>\n\n<h3>挂载分区</h3>\n\n<p>命令如下：</p>\n\n<pre><code>mount /dev/sda1 /mnt\nmkdir /mnt/home\nmount /dev/sda2 /mnt/home\n</code></pre>\n\n<h3>配置网络</h3>\n\n<p>如果是物理安装，而且刚好没法连有线网络（例如正在用 MacBook Air 而且没有 USB\n转以太网口），那这里会稍微麻烦点。幸好这里只是在虚拟机中安装，网络设置的又是桥接，\n只要你的网络环境支持 dhcp ，这一步应该就不用愁。</p>\n\n<p>可以 ping Google ，确定网络正常：</p>\n\n<pre><code># ping -c 3 google.com\n\nPING www.l.google.com (74.125.132.105) 56(84) bytes of data.\n64 bytes from wb-in-f105.1e100.net (74.125.132.105): icmp_req=1 ttl=50 time=17.0 ms\n64 bytes from wb-in-f105.1e100.net (74.125.132.105): icmp_req=2 ttl=50 time=18.2 ms\n64 bytes from wb-in-f105.1e100.net (74.125.132.105): icmp_req=3 ttl=50 time=16.6 ms\n\n--- www.l.google.com ping statistics ---\n3 packets transmitted, 3 received, 0% packet loss, time 2003ms\nrtt min/avg/max/mdev = 16.660/17.320/18.254/0.678 ms\n</code></pre>\n\n<p>然后，记得要做的是，从 /etc/pacman.d/mirrorlist 中选择一个地理位置最接近的 Arch\n镜像服务器，一般地理位置越近，网络越快。</p>\n\n<p>文件有点长，搜一下 China 即可，国内 Arch 镜像很不少了。把其余的都注释掉，剩这一个。</p>\n\n<h3>安装基础系统</h3>\n\n<p>执行：</p>\n\n<pre><code>pacstrap -i /mnt base\n</code></pre>\n\n<p>如果不想一个个选，把 <code>-i</code> 去掉就好。</p>\n\n<p>生成 fstab ，让装好的系统能自动挂载相关分区：</p>\n\n<pre><code>genfstab -U -p /mnt &gt;&gt; /mnt/etc/fstab\n</code></pre>\n\n<p>然后 chroot 到新系统的分区，配置系统：</p>\n\n<pre><code>chroot /mnt\n</code></pre>\n\n<p>需要配置的东西其实不多：</p>\n\n<ul>\n<li>locale</li>\n<li>dhcp 服务</li>\n<li>时区</li>\n<li>hostname</li>\n</ul>\n\n\n<p>按 <a href=\"https://wiki.archlinux.org/index.php/Beginners%27_Guide#Chroot_and_configure_the_base_system\">新手指南 - 配置</a>\n章节介绍的操作即可。</p>\n\n<p>记得执行 passwd 命令，给 root 帐号设置个密码。</p>\n\n<h3>安装 GRUB</h3>\n\n<p>再一次，如果是物理安装，磁盘可能是别的值（例如 /dev/sdb），记得修改。\n注意不要加上分区号：</p>\n\n<pre><code>pacman -S grub-bios\ngrub-install --recheck /dev/sda\ncp /usr/share/locale/en\\@quot/LC_MESSAGES/grub.mo /boot/grub/locale/en.mo\n</code></pre>\n\n<p>生成配置文件：</p>\n\n<pre><code>grub-mkconfig -o /boot/grub/grub.cfg\n</code></pre>\n\n<h3>重启</h3>\n\n<p>退出 chroot ，卸载磁盘，重启：</p>\n\n<pre><code>exit\numount /mnt/home\numount /mnt\nreboot\n</code></pre>\n\n<p>记得在 VirtualBox 里把挂载的 .iso 文件取消掉。</p>\n\n<h3>配置新系统</h3>\n\n<p>首先，安装一些必备软件：</p>\n\n<pre><code>pacman -S sudo vim zsh curl openssh\n</code></pre>\n\n<p>添加个普通帐号，把它加为 sudoer ：</p>\n\n<pre><code>useradd -m -g users -G wheel -s /usr/bin/zsh john\npasswd john\nvisudo\n</code></pre>\n\n<p>然后 exit ，切换到刚创建的 john 帐号：</p>\n\n<ol>\n<li>安装 RVM</li>\n<li>用 RVM 安装 Ruby</li>\n<li>安装 bundler</li>\n<li>用 bundler 安装项目依赖</li>\n</ol>\n\n\n<p>至此，基本的 Arch Linux 系统安装完毕。但一些增强可用性的软件还没装：</p>\n\n<ul>\n<li>Xorg</li>\n<li>VirtualBox Guest Additions</li>\n</ul>\n\n\n<p>安装 Xorg 和相应的桌面软件（GNOME、KDE、XFCE 等）非常简单，可玩度也很高。\n此处按下不表。</p>\n\n<h3>安装 VirtualBox Guest Additions</h3>\n\n<p><a href=\"https://wiki.archlinux.org/index.php/VirtualBox\">Arch Wiki</a> 上就有，\n我兜售一下二手资料。执行如下命令即可：</p>\n\n<pre><code>pacman -S virtualbox-guest-utils\nmodprobe -a vboxguest vboxsf vboxvideo\n</code></pre>\n\n<p>创建 /etc/modules-load.d/virtualbox.conf 文件，内容为：</p>\n\n<pre><code>vboxguest\nvboxsf\nvboxvideo\n</code></pre>\n\n<p>告诉 Arch Linux 下次启动的时候自动加载这三个模块。</p>\n\n<p>在 ~/.xinitrc 里加上：</p>\n\n<pre><code>exec VBoxClient-all\n</code></pre>\n\n<p>要配置共享文件夹的话，首先需要创建分组，并将用户加到该组：</p>\n\n<pre><code>groupadd vboxsf\ngpasswd -a john vboxsf\n</code></pre>\n\n<p>在 VirtualBox 虚拟机里配置好需要挂载的共享目录，然后启动 vboxservice ：</p>\n\n<pre><code>systemctl enable vboxservice\nsystemctl start vboxservice\n</code></pre>\n\n<p>这样就能在 /media/ 目录下看到共享目录了，例如 <code>/media/sf_Dropbox/</code>。</p>\n\n<p>把它链接到 /home/john 下面：</p>\n\n<pre><code>ln -s /media/sf_Dropbox ~/dropbox\n</code></pre>\n\n<h3>Windows 下开发，Linux 下提交</h3>\n\n<p>在两种不同系统下共享文件，文件权限控制（filemode）的问题比较讨厌。Git\n默认会记录文件的权限设置，普通文本文件的权限应该是 0644 ，但在 Linux\n里挂载 Windows 目录，这些文件会的权限是 0777 。爽快点的办法，让 Git 别记录了：</p>\n\n<pre><code>git config code.filemode false\n</code></pre>\n\n<h2>后记</h2>\n\n<p>其实这样并非长久之计，最爽利的方式该是直接在 Linux 中开发，抛弃 Windows，\n但确实用 Linux 会把人往可劲折腾的地方引，导致忘了正事。</p>\n\n<p>所以还是买 Mac 吧！</p>\n",
            "$": {
              "type": "html"
            }
          }
        ]
      },
      {
        "title": [
          "jQuery 与 KISSY 对照表"
        ],
        "link": [
          {
            "$": {
              "href": "http://cyj.me/f2e/jquery-kissy-rosetta"
            }
          }
        ],
        "updated": [
          "2013-06-02T00:00:00-07:00"
        ],
        "id": [
          "http://cyj.me/f2e/jquery-kissy-rosetta"
        ],
        "content": [
          {
            "_": "<p>搬家到独立的 Github 仓库了，链接也因此有变化，请猛击 <a href=\"http://cyj.me/jquery-kissy-rosetta\">http://cyj.me/jquery-kissy-rosetta</a>。</p>\n",
            "$": {
              "type": "html"
            }
          }
        ]
      },
      {
        "title": [
          "悠长假期"
        ],
        "link": [
          {
            "$": {
              "href": "http://cyj.me/life/long-vocation"
            }
          }
        ],
        "updated": [
          "2013-05-05T00:00:00-07:00"
        ],
        "id": [
          "http://cyj.me/life/long-vocation"
        ],
        "content": [
          {
            "_": "<p>五一小长假，放假方案颇为惊天地泣鬼神，先连上七天班，再休三日，再上周四周五的班，再休息一个周末。\n鹳狸猿们为了刺激消费，又为了省点带薪假期，连这种奇葩方案都使出来了，真难为他们。\n反对不了自然就闭上眼睛享受，果断请了周四周五的假，加上周一周二的调休，周三国家法定节假日，\n周六周日的正常休息，凑成七天，所谓屌丝的悠长假期。</p>\n\n<p>谢主隆恩，五一其实只放了这么一天假，竟然也能凑成整一个星期。</p>\n\n<p>头一日，初定龙门古镇，结果饿着肚子出门找饭辙，各种不靠谱，走走停停，到了五常大道，\n西溪印象城新开张，顶着油漆味在外婆家吃了一顿。</p>\n\n<p>人不算特别多，许多店铺也都还没好，五常大道上那个掉头的红绿灯不止车道奇葩，时间也太仓促，\n五辆车都可以等仨红绿灯。</p>\n\n<p>饭吃得七七八八，天公也不作美，于是折返自家，将打包的这些个菜吃了，顺便聊作打扫。又至西溪天堂商业街寻觅\n前些日子新开张的保利影院，票价业界良心。《疯狂原始人》，台词：“这不是活着，这只不过是…… 没有死掉。”</p>\n\n<p>次日，天气预报有雨，出游不宜，于是宅家，不曾想下午放晴，果断出门，目的地良渚。沿着古墩路一路向北，\n愈发拨云见日，到了良渚文化村，阳光洒然，春光无限。</p>\n\n<p>文化村里消费竟然都要“村民卡”，哪有村子这么现代化的，通信靠吼娱乐靠手的好不。买了两杯奶茶，\n到湖边转了转，钓鱼的人好多，景色说不上美，但也别致，散散步挺好。</p>\n\n<p>某度假酒店：</p>\n\n<p><img src=\"http://pic.yupoo.com/yicai-cyj_v/CQ1wNR6n/pkCxj.jpg\" alt=\"某度假酒店\" /></p>\n\n<p>好多人在钓鱼，欢迎洛杉矶渣湖到此观光指导：</p>\n\n<p><img src=\"http://pic.yupoo.com/yicai-cyj_v/CQ1wOIzL/2ARET.jpg\" alt=\"钓鱼\" /></p>\n\n<p>许许多多杜鹃花：</p>\n\n<p><img src=\"http://pic.yupoo.com/yicai-cyj_v/CQ1wQn8w/10Rt88.jpg\" alt=\"杜鹃花\" /></p>\n\n<p>而后去了良渚博物馆，有一些当年的考古发现和相关知识普及，进去得晚了，保安在后头撵人，许多展示没来得及\n细看，走马观花着出来了。</p>\n\n<p>博物馆里的玉璧：</p>\n\n<p><img src=\"http://pic.yupoo.com/yicai-cyj_v/CQ1wQts7/I4ivu.jpg\" alt=\"博物馆里的玉璧\" /></p>\n\n<p>博物馆外的杜鹃花：</p>\n\n<p><img src=\"http://pic.yupoo.com/yicai-cyj_v/CQ1wSxeR/nI7O9.jpg\" alt=\"杜鹃花\" /></p>\n\n<p>浙江省的博物馆似乎都是免费开放的，读书时去了孤山路上的省博物馆，也是一样的观其大略，囫囵吞枣着看完出来。\n其实那些个旧物件，都不要紧，了解过往才是正事。</p>\n\n<p>第三日，终于要去龙门古镇啦，之所以选择此处，是因为它符合此次目的地检索条件：</p>\n\n<ul>\n<li>杭州周边，二小时内车程</li>\n<li>人文游</li>\n</ul>\n\n\n<p>当然，真要深度游，得像<a href=\"http://chanyouji.com/trips/10305#nd/73008\">这位姑娘</a>一般，\n带着访古的心，了然历史于胸，才能赏得了此情此景。我《三国演义》只看了些许，《三国志》只闻其名，\n接触到的三国体裁游戏、漫画之类，视角也都是蜀、魏、甚或司马家（《火凤燎原》），东吴了解得最少。</p>\n\n<p>单说景，龙门古镇最有名的照片应该是砚池，我们到那儿的时候，夕阳西下，白墙都金灿灿的，煞是好看，\n然而砚池却长了水藻，富营养化污染了。</p>\n\n<p>砚池一二：</p>\n\n<p><img src=\"http://pic.yupoo.com/yicai-cyj_v/CQ1wUrkH/151c3F.jpg\" alt=\"砚池\" /></p>\n\n<p><img src=\"http://pic.yupoo.com/yicai-cyj_v/CQ1wVQaR/FVJLA.jpg\" alt=\"砚池\" /></p>\n\n<p>整个龙门古镇的景致，这张照片基本涵盖全了，有老房子，有新点缀，更有当地人铺天盖地的烟火气，\n像极了儿时生活的小镇，连馄饨都是那个味道，三块钱一碗。</p>\n\n<p><img src=\"http://pic.yupoo.com/yicai-cyj_v/CQ1wU7zD/CBcLa.jpg\" alt=\"晒笋\" /></p>\n\n<p>票价八十，但没有围墙，满世界都是逃票的口子，如果只想看徽派建筑，不介意孙氏宗祠之类的，不买票倒也无所谓，\n吃一碗馄饨，买一只球拍，也是为当地人做贡献了。</p>\n\n<p>古镇西南角，是些较新的楼房，可能这块的人日子过得好些，起了许多新屋，旧墙里，也多了许多点缀，比如蔷薇：</p>\n\n<p><img src=\"http://pic.yupoo.com/yicai-cyj_v/CQ1wfPbl/Dertp.jpg\" alt=\"蔷薇\" /></p>\n\n<p><img src=\"http://pic.yupoo.com/yicai-cyj_v/CQ1wXvJG/NGpq4.jpg\" alt=\"蔷薇\" /></p>\n\n<p>返程开得很痛苦，尤其是绕城高速，真真地堵成大便，能够把最低限速六十公里的高速公路堵成停车场，真是不容易。</p>\n\n<p>第四日，仍然是保利影院，钢铁侠。</p>\n\n<p>第五日，南山路，办公园卡，顺便逛凤凰山路与周边景点。南山路其实比北山路好逛，只是一览西湖无余的路段很少，\n路旁的大小园子，各有情趣，很是别致。</p>\n\n<p>沿凤凰山路往南，可以到茶叶博物馆，然而我们出门拖沓，办好公园卡，已近傍晚，博物馆们五点关门，\n四点半不再接客，于是很遗憾地没能进去看看：</p>\n\n<p><img src=\"http://pic.yupoo.com/yicai-cyj_v/CQ1wK1Ta/SnMYk.jpg\" alt=\"茶叶博物馆\" /></p>\n\n<p>回来的路上，南山路的西边有许多公园，著名的比如湖滨、涌金公园和柳浪闻莺，少些名气的比如阔石板巷边的这个\n公园，无处不在的绿：</p>\n\n<p><img src=\"http://pic.yupoo.com/yicai-cyj_v/CQ1wM0cQ/aEQJ1.jpg\" alt=\"无处不在的绿\" /></p>\n\n<p><img src=\"http://pic.yupoo.com/yicai-cyj_v/CQ1wMbpf/MM077.jpg\" alt=\"林子\" /></p>\n\n<p><img src=\"http://pic.yupoo.com/yicai-cyj_v/CQ1wN9H0/J1oMi.jpg\" alt=\"初夏\" /></p>\n\n<p>第六日，西溪花朝节，引用微博上说过的话：</p>\n\n<blockquote><p>之前从天目山路放着“非诚勿扰”大字的门口进去玩过两次，坐了摇橹船，游了许多地方，总觉得不过尔尔，\n一直以为西溪湿地就这点名堂了，今天从文三西路直过去那个门口进去，赏花朝节，还是很漂亮的，\n加上免费开放的河渚街、蒋村慢生活街区部分，确实是个休闲好去处。</p></blockquote>\n\n<p>可能因为卖票收费的关系，比太子湾保养得好多了，不是说管理者做得不好，而是游客下手轻些。\n绿堤及沿途赏花园子，设计得很妙，主干道作卖店，支线分流，繁花遍地。</p>\n\n<p><img src=\"http://pic.yupoo.com/yicai-cyj_v/CQ1wIEaC/ftXic.jpg\" alt=\"枫叶\" /></p>\n\n<p><img src=\"http://pic.yupoo.com/yicai-cyj_v/CQ1wHXZD/7vbQf.jpg\" alt=\"牵牛花\" /></p>\n\n<p>有个油菜花赏花处，去得完，已是初夏，油菜都已结子：</p>\n\n<p><img src=\"http://pic.yupoo.com/yicai-cyj_v/CQ1wI26T/4zJuj.jpg\" alt=\"结子的油菜\" /></p>\n\n<p>月季？牡丹？</p>\n\n<p><img src=\"http://pic.yupoo.com/yicai-cyj_v/CQ1wHcEY/xb6cv.jpg\" alt=\"月季\" /></p>\n\n<p><img src=\"http://pic.yupoo.com/yicai-cyj_v/CQ1wGJ89/aNNdv.jpg\" alt=\"繁花拱门\" /></p>\n\n<p><img src=\"http://pic.yupoo.com/yicai-cyj_v/CQ1wEE0K/HZXy7.jpg\" alt=\"苗圃\" /></p>\n\n<p>亮点自己找：</p>\n\n<p><img src=\"http://pic.yupoo.com/yicai-cyj_v/CQ1wEbco/R20hP.jpg\" alt=\"自己找\" /></p>\n\n<p><img src=\"http://pic.yupoo.com/yicai-cyj_v/CQ1wEgaz/bwGg2.jpg\" alt=\"霞光\" /></p>\n\n<p><img src=\"http://pic.yupoo.com/yicai-cyj_v/CQ1wCcuV/Uss3o.jpg\" alt=\"牡丹\" /></p>\n\n<p><img src=\"http://pic.yupoo.com/yicai-cyj_v/CQ1wChn2/k1q3P.jpg\" alt=\"小径\" /></p>\n\n<p><img src=\"http://pic.yupoo.com/yicai-cyj_v/CQ1wALFX/AJphK.jpg\" alt=\"镜\" /></p>\n\n<p>路灯杆上的牵牛花：</p>\n\n<p><img src=\"http://pic.yupoo.com/yicai-cyj_v/CQ1wzUT5/vRjnx.jpg\" alt=\"牵牛花\" /></p>\n\n<p>第七日，小结，收拾身心，准备上班。</p>\n",
            "$": {
              "type": "html"
            }
          }
        ]
      },
      {
        "title": [
          "Specified, Computed, Used, and Resolved Value"
        ],
        "link": [
          {
            "$": {
              "href": "http://cyj.me/f2e/specified-computed-used-and-resolved-value"
            }
          }
        ],
        "updated": [
          "2013-04-26T00:00:00-07:00"
        ],
        "id": [
          "http://cyj.me/f2e/specified-computed-used-and-resolved-value"
        ],
        "content": [
          {
            "_": "<p>前几日 HTML5 兴趣小组讨论的话题中设计到这四个值，鄙人傻傻分不清楚，所以贯彻一下求是之精神，\n仔细查阅了相关文档，一窥究竟。</p>\n\n<h2>Specified Value</h2>\n\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/CSS/specified_value\">MDN</a></li>\n<li><a href=\"http://www.w3.org/TR/CSS2/cascade.html#specified-value\">W3C</a></li>\n</ul>\n\n\n<p>即<strong>设定值</strong>，文档样式表中所设定的值，可以是：</p>\n\n<ul>\n<li><code>&lt;link type=\"stylesheet\"&gt;</code> 标签里指定的 CSS 文件中设定的值</li>\n<li><code>&lt;style&gt;</code> 标签中所设定的值</li>\n<li>内联 style 属性中所设定的值</li>\n</ul>\n\n\n<p>如果没找到样式设定，则从父节点上继承\n（<a href=\"https://developer.mozilla.org/en-US/docs/CSS/inheritance\">inheritance</a>）。例如：</p>\n\n<div class=\"highlight\"><pre><code class=\"html\"><span class=\"nt\">&lt;div</span> <span class=\"na\">style=</span><span class=\"s\">&quot;font:helvetica;&quot;</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;p&gt;&lt;/p&gt;</span>\n<span class=\"nt\">&lt;/div&gt;</span>\n</code></pre></div>\n\n\n<p>p 标签没有指定 font 样式，则从父节点 div 上继承，也就是 helvetica</p>\n\n<p>如果仍然没找到，即 initial ，为浏览器默认值。</p>\n\n<h2>Computed Value</h2>\n\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/CSS/computed_value\">MDN</a></li>\n<li><a href=\"http://www.w3.org/TR/CSS2/cascade.html#computed-value\">W3C</a></li>\n</ul>\n\n\n<p>即<strong>计算值</strong></p>\n\n<p>将所设定值中为相对值的，转换为绝对值（例如 em 单位、百分比、或者 url() 中的相对路径）。</p>\n\n<div class=\"highlight\"><pre><code class=\"css\"><span class=\"nt\">div</span> <span class=\"p\">{</span>\n  <span class=\"k\">font-size</span><span class=\"o\">:</span> <span class=\"m\">12px</span><span class=\"p\">;</span>\n  <span class=\"k\">padding-top</span><span class=\"o\">:</span> <span class=\"m\">1.5em</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"o\">//</span> <span class=\"err\">转换为</span>\n<span class=\"nt\">div</span> <span class=\"p\">{</span>\n  <span class=\"k\">font-size</span><span class=\"o\">:</span> <span class=\"m\">12px</span><span class=\"p\">;</span>\n  <span class=\"k\">padding-top</span><span class=\"o\">:</span> <span class=\"m\">18px</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n\n\n<p>有些值，单从 CSS 是推不出的，例如 width、margin-right、text-indent、top 等，这些值的\nComputed Value ，仍然保留为相对值，直到 Used Value 被推导出来。</p>\n\n<h2>Used Value</h2>\n\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/CSS/used_value\">MDN</a></li>\n<li><a href=\"http://www.w3.org/TR/CSS2/cascade.html#used-value\">W3C</a></li>\n</ul>\n\n\n<p>即<strong>使用值</strong>，CSS 属性最终被计算出来的值，可以通过调用\n<a href=\"https://developer.mozilla.org/en-US/docs/DOM/window.getComputedStyle\">window.getComputedStyle</a>\n取得。维度值（width、line-height 等）都以像素为单位，简写属性（例如 background）都与组成属性\n（例如 backgroung-color ）同步，display 与 position 和 float 也达成一致，所有的 CSS\n属性都有值。</p>\n\n<p>计算值是在不渲染页面的前提下尽可能计算出的值。但有些值，只能在文档被展示时才能推出来。例如，\n如果一个节点的宽度值为其容器的百分之多少，则这个宽度在容器节点宽度被算出来之前是无从计算的。</p>\n\n<p>而使用值，即解决所有剩余依赖之后，计算出的绝对值。</p>\n\n<p>所以计算值与使用值的区别是，前者是在页面展现之前，仅处理样式时能得出的尽可能接近绝对的结果；\n而后者则是页面展示时，得出的绝对值。</p>\n\n<h2>Resolved Value</h2>\n\n<ul>\n<li><a href=\"http://dev.w3.org/csswg/cssom/#resolved-values\">W3C Draft</a></li>\n</ul>\n\n\n<p>即<strong>决定值</strong></p>\n\n<ul>\n<li>line-height\n\n<ul>\n<li>使用值即决定值</li>\n</ul>\n</li>\n<li>height</li>\n<li>margin</li>\n<li>margin-bottom</li>\n<li>margin-left</li>\n<li>margin-right</li>\n<li>margin-top</li>\n<li>padding</li>\n<li>padding-bottom</li>\n<li>padding-left</li>\n<li>padding-right</li>\n<li>padding-top</li>\n<li>width\n\n<ul>\n<li>如果属性应用到节点或者伪节点，且该节点的 display 决定值不为 none，则使用值即决定值；反之，\n则计算值即决定值。</li>\n</ul>\n</li>\n<li>bottom</li>\n<li>left</li>\n<li>right</li>\n<li>top\n\n<ul>\n<li>如果属性应用到定位节点，且该节点 display 决定值不为 none，则使用值即决定值；反之，\n则计算值即决定值。</li>\n</ul>\n</li>\n<li>其他属性\n\n<ul>\n<li>计算值即决定值</li>\n</ul>\n</li>\n</ul>\n\n",
            "$": {
              "type": "html"
            }
          }
        ]
      },
      {
        "title": [
          "我所设想的 Brix"
        ],
        "link": [
          {
            "$": {
              "href": "http://cyj.me/f2e/the-brix-that-i-envisioned"
            }
          }
        ],
        "updated": [
          "2013-04-16T00:00:00-07:00"
        ],
        "id": [
          "http://cyj.me/f2e/the-brix-that-i-envisioned"
        ],
        "content": [
          {
            "_": "<p><img src=\"http://pic.yupoo.com/yicai-cyj_v/CMVI8Mv5/Pmxd4.jpg\" alt=\"樱花\" /></p>\n\n<p>代码 + README，似乎不能很好地表达自己，之前弄了\n<a href=\"https://github.com/dotnil/brix-core\">Brix Core</a> 与\n<a href=\"https://github.com/dotnil/brix-test\">其演示项目</a>，\n并在两个项目的说明档里表达了自己做这两件事情的想法，但是从反馈上来看，没能顺利达到目标。</p>\n\n<p>所以写了这篇博文，说明一下为什么我要简化 Brix 即我所设想的 Brix 又该是如何。</p>\n\n<h3>当我们讨论 Brix 时，我们在讨论什么</h3>\n\n<p>李牧老师为 Brix 组件框架画了个\n<a href=\"http://img01.taobaocdn.com/tps/i1/T1DWzOXmxdXXXUBqn8-3663-1304.png\">蓝图</a>，\n同时要求组件可以拥有一些高级特性，例如局部刷新、嵌套组件等。</p>\n\n<p>要完成以上这些目标，Brix 必须有如下身份：</p>\n\n<ul>\n<li>Style： 基础样式</li>\n<li>Loader： 组件加载器</li>\n<li>Manager： 组件管理工具</li>\n<li>Base： 组件基类</li>\n<li>Gallery：基础组件</li>\n</ul>\n\n\n<p>Loader 与 Base 都应该能够加载其当前持有节点下的所有组件，即所有拥有 @bx-name 属性的子节点。\nLoader 自身需要提供组件的版本、时间戳配置，提供指定区块加载。Base 则需要提供某种方式以获取子模板，\n并可以在其关联数据发生变更时，重新渲染这部分子模板，并加载渲染结果中可能有的子组件。</p>\n\n<p>Manager ，依赖于 Loader 形成的配置规范。Style 则提供组件的基础样式。Gallery 则提供基本的组件，\n例如面包屑导航、下拉选择等。</p>\n\n<p>而目前我们是将这五者放在一块谈，Style 里有部分是以 Gallery 形式出现的，Loader\n需要确立的东西显得混乱，让 Manager 有点无所适从，Base 提供的功能，缺乏明确的文档、用例来说明。</p>\n\n<p>当我们谈论 Brix 时，它可能是其中任何一个角色，太容易因为蓝图太过宏伟而吓跑用户了。\n我所设想的 Brix 是，包含以上所有功能，但各个模块各司其职，明确其接口，简化各自的使用方式：</p>\n\n<p>想要像 Bootstrap 那样使用 Brix？你只要引入 brix.css；</p>\n\n<p>那 Bootstrap 里的弹窗、提示浮层又在哪里？你只要加上 <code>KISSY.use('brix/app')</code>，并在你的 HTML\n里像 Bootstrap 要求的那样标记出你的组件；</p>\n\n<div class=\"highlight\"><pre><code class=\"html\"><span class=\"nt\">&lt;div</span> <span class=\"na\">bx-app</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;div</span> <span class=\"na\">bx-name=</span><span class=\"s\">&quot;brix/dialog&quot;</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;h2&gt;</span>Congrats!<span class=\"nt\">&lt;/h2&gt;</span>\n    <span class=\"nt\">&lt;p&gt;</span>There&#39;s a Nigeria pricess wants to marry you!<span class=\"nt\">&lt;/p&gt;</span>\n    <span class=\"nt\">&lt;span</span> <span class=\"na\">class=</span><span class=\"s\">&quot;btn btn-blue&quot;</span><span class=\"nt\">&gt;</span>Yay!<span class=\"nt\">&lt;/span&gt;</span>\n  <span class=\"nt\">&lt;/div&gt;</span>\n<span class=\"nt\">&lt;/div&gt;</span>\n</code></pre></div>\n\n\n<p>想要利用 Brix 提供的组件封装自己的？你只需要：</p>\n\n<div class=\"highlight\"><pre><code class=\"js\"><span class=\"nx\">KISSY</span><span class=\"p\">.</span><span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"s1\">&#39;myapp/dropdown/index&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">S</span><span class=\"p\">,</span> <span class=\"nx\">Dropdown</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n    <span class=\"kd\">function</span> <span class=\"nx\">MyDropdown</span><span class=\"p\">(</span><span class=\"nx\">opts</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">MyDropdown</span><span class=\"p\">.</span><span class=\"nx\">superclass</span><span class=\"p\">.</span><span class=\"nx\">constructor</span><span class=\"p\">.</span><span class=\"nx\">call</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">,</span> <span class=\"nx\">opts</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">S</span><span class=\"p\">.</span><span class=\"nx\">extend</span><span class=\"p\">(</span><span class=\"nx\">MyDropdown</span><span class=\"p\">,</span> <span class=\"nx\">Dropdown</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"nx\">MyDropdown</span>\n<span class=\"p\">},</span> <span class=\"p\">{</span>\n    <span class=\"nx\">requires</span><span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"s1\">&#39;brix/dropdown&#39;</span><span class=\"p\">]</span>\n<span class=\"p\">})</span>\n</code></pre></div>\n\n\n<p>然后在你的页面中与默认组件一样使用自己的组件：</p>\n\n<div class=\"highlight\"><pre><code class=\"html\"><span class=\"nt\">&lt;div</span> <span class=\"na\">bx-name=</span><span class=\"s\">&quot;myapp/dropdown&quot;</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;ul&gt;</span>\n    <span class=\"nt\">&lt;li&gt;</span>Please select...<span class=\"nt\">&lt;/li&gt;</span>\n    <span class=\"nt\">&lt;li&gt;</span>One<span class=\"nt\">&lt;/li&gt;</span>\n    <span class=\"nt\">&lt;li&gt;</span>Two<span class=\"nt\">&lt;/li&gt;</span>\n    <span class=\"nt\">&lt;li&gt;</span>睡！<span class=\"nt\">&lt;/li&gt;</span>\n  <span class=\"nt\">&lt;/ul&gt;</span>\n<span class=\"nt\">&lt;/div&gt;</span>\n</code></pre></div>\n\n\n<p>想要分享自己的组件，或者安装别人的组件？ <code>npm install bpm -g</code>，让 BPM 来帮你做剩下的事情吧亲。</p>\n\n<p>所以，我想做的事情是：</p>\n\n<h3>拆掉 Brix</h3>\n\n<p>拆成四个项目：</p>\n\n<ul>\n<li>Brix Core：提供加载器与 Base</li>\n<li>Brix Style：提供基础样式</li>\n<li>Brix Gallery 提供基本组件</li>\n<li>Brix Manager 组件依赖管理工具</li>\n</ul>\n\n\n<p>Brix Style 相对独立，我已经提出来，放到了\n<a href=\"https://github.com/brixjs/brix-style\">brixjs/brix-style</a>。</p>\n\n<p>Brix Core 是后两者（Gallery 与 Manager）的依赖，需要明确组件目录结构，开发、线上组件加载方式等，\n是重中之重，根据之前的一些想法，我写了个演示项目，放在\n<a href=\"http://github.com/dotnil/brix-core\">dotnil/brix-core</a>，并在其说明档中解释了一些。\n但是如篇首所说，效果不彰，因此有了本文。</p>\n\n<p>Brix Gallery 与 Brix Manager 容后再谈。</p>\n\n<h2>设想的使用方式</h2>\n\n<h3>组件的文件组织</h3>\n\n<p>目录下会有一到五个文件：</p>\n\n<ul>\n<li>index.{less,css}</li>\n<li>index.js</li>\n<li>template.html</li>\n<li>template.js</li>\n<li>data.json</li>\n</ul>\n\n\n<p>除了 template.js，组件开发者需要提供剩余四个文件，index.less 或者 index.css 均可，\n推荐使用前者。</p>\n\n<p>data.json 与 template.html 结合，可以渲染出一份示例 HTML 片段，用于演示此组件需要的数据输入，\n和 index.js 所需要的 DOM 结构。</p>\n\n<p>template.js 是 template.html 的编译结果，在线上使用时，会采用编译后的内容，即前者。</p>\n\n<h3>项目的文件组织</h3>\n\n<p>项目的初始目录中，需要含有两个目录，用来放置相关组件：</p>\n\n<ul>\n<li>imports</li>\n<li>components</li>\n</ul>\n\n\n<p>imports 即此项目引入的组件，结构如下：</p>\n\n<pre><code>imports\n├── ux.shopping-ads\n│   └── ceiling\n│       ├── 0.1.0\n│       │   └── index.js\n│       └── 0.1.1\n│           └── index.js\n└── ux.tanx\n    ├── dropdown\n    │   └── 0.1.5\n    │       ├── index.js\n    │       ├── template.html\n    │       └── template.js\n    ├── grid\n    │   └── 0.2.1\n    │       └── index.js\n    └── message\n        └── 0.1.2\n            └── index.js\n</code></pre>\n\n<p>引入的组件基本路径为 <code>imports/ux.shopping-ads/ceiling/0.1.0/</code>：</p>\n\n<pre><code>+--------------------+-------------------+\n| imports            |                   |\n| └──ux.shopping-ads | namespace         |\n|    └──ceiling      | component name    |\n|       └──0.1.0     | component version |\n+--------------------+-------------------+\n</code></pre>\n\n<p>components 即此项目自身的组件，结构如下：</p>\n\n<pre><code>components\n└── ux.brix-test\n    ├── ceiling\n    │   └── index.js\n    └── footer\n        ├── index.js\n        └── template.html\n</code></pre>\n\n<p>项目自身的组件基本路径为 <code>components/ux.brix-test/ceiling/</code>。与 imports 目录的区别是，\ncomponents 目录中，不需要在组件名目录下创建组件的相关版本目录，直接写组件的相关文件就可以了。</p>\n\n<p>以上内容，与当前版本的 Brix 出入不大，只是在 components 目录设计中，加入了一层当前项目的命名空间，\n即示例中的 ux.brix-test。</p>\n\n<h3>组件的使用方式</h3>\n\n<p>在现有的 Brix 组件名划分中，有三种组件名：</p>\n\n<ul>\n<li>业务组件：components/ceiling</li>\n<li>外部组件：imports/ux.tanx/ceiling/0.1.0</li>\n<li>核心组件：brix/gallery/ceiling/0.1.2</li>\n</ul>\n\n\n<p>我建议将这三种组件名统一掉，一律为 <namespace>/<component> 这种形式，假设当前项目的命名空间为\nux.brix-test：</p>\n\n<ul>\n<li>业务组件：ux.brix-test/ceiling</li>\n<li>外部组件：ux.tanx/ceiling</li>\n<li>核心组件：brix/ceiling</li>\n</ul>\n\n\n<p>外部组件，本来就是从各个业务组件中提炼出来的，而核心组件，除了命名空间为 brix 之外，也不应有何不同。\n并且，这里我去掉了版本，将其提取出来，放到统一的地方配置。</p>\n\n<p>名字统一掉之后，在页面中，我们只需要统一用 @bx-name 来引用：</p>\n\n<div class=\"highlight\"><pre><code class=\"html\"><span class=\"nt\">&lt;div</span> <span class=\"na\">bx-name=</span><span class=\"s\">&quot;ux.tanx/ceiling&quot;</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;p&gt;</span>你好，逸才<span class=\"nt\">&lt;/p&gt;</span>\n  <span class=\"nt\">&lt;span&gt;</span>已买到的宝贝<span class=\"nt\">&lt;/span&gt;</span>\n<span class=\"nt\">&lt;/div&gt;</span>\n</code></pre></div>\n\n\n<p>不再像现有 Brix 实现那样，还需要额外指定一下 @bx-path，说明一下这个组件是从哪儿来的。</p>\n\n<p>那我该怎么锁定组件的版本呢？得先从 Brix Core 的入口模块说起：</p>\n\n<h2>Brix Core</h2>\n\n<h3>brix/app</h3>\n\n<p>Brix 将暴露出一个叫做 brix/app 的入口模块，项目开发者只需要像平常 KISSY 模块一般使用它：</p>\n\n<div class=\"highlight\"><pre><code class=\"js\"><span class=\"nx\">KISSY</span><span class=\"p\">.</span><span class=\"nx\">use</span><span class=\"p\">(</span><span class=\"s1\">&#39;brix/app&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">S</span><span class=\"p\">,</span> <span class=\"nx\">app</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// config and boot your app</span>\n<span class=\"p\">})</span>\n</code></pre></div>\n\n\n<p>以下代码示例，为求简单，只讲包装其中的部分，省略外层的</p>\n\n<div class=\"highlight\"><pre><code class=\"js\"><span class=\"nx\">KISSY</span><span class=\"p\">.</span><span class=\"nx\">use</span><span class=\"p\">(</span><span class=\"s1\">&#39;brix/app&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">S</span><span class=\"p\">,</span> <span class=\"nx\">app</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"p\">...</span> <span class=\"p\">})</span>\n</code></pre></div>\n\n\n<p>app 提供暴露出一些常用方法，例如：</p>\n\n<ul>\n<li>config</li>\n<li>set</li>\n<li>boot</li>\n<li>on</li>\n<li>bootStyle</li>\n</ul>\n\n\n<p>config 用来配置你的 app，不管是单页应用还是传统页面，我们更能接受的都是一个页面一次配置，\n即页面初始化，加载 brix/app，配置 app，这些事情，只需要做一次。通常项目需要配置的内容如下：</p>\n\n<div class=\"highlight\"><pre><code class=\"js\"><span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nx\">config</span><span class=\"p\">({</span>\n    <span class=\"nx\">namespace</span><span class=\"o\">:</span> <span class=\"s1\">&#39;ux.brix-test&#39;</span><span class=\"p\">,</span>      <span class=\"c1\">// 项目自己的 namespace</span>\n    <span class=\"nx\">imports</span><span class=\"o\">:</span> <span class=\"p\">{</span>                      <span class=\"c1\">// 引入的组件</span>\n        <span class=\"s1\">&#39;ux.tanx&#39;</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n            <span class=\"nx\">ceiling</span><span class=\"o\">:</span> <span class=\"s1\">&#39;0.1.2&#39;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">},</span>\n    <span class=\"nx\">components</span><span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"s1\">&#39;footer&#39;</span><span class=\"p\">],</span>         <span class=\"c1\">// 项目自身组件，app.bootStyle 需要用到</span>\n    <span class=\"nx\">timestamp</span><span class=\"o\">:</span> <span class=\"mi\">130416</span>               <span class=\"c1\">// 时间戳，项目发布时写入</span>\n<span class=\"p\">})</span>\n</code></pre></div>\n\n\n<p>在这其中，必配项为：</p>\n\n<ul>\n<li>namespace</li>\n<li>imports</li>\n<li>components （如果你需要 brix/app 帮你加载样式，不推荐这样做，后面会介绍更好的办法）</li>\n</ul>\n\n\n<p>timestamp 在开发时不需配置，在项目资源文件发布之后，再另行配置即可。实际页面里的初始化，\n可能类似这样：</p>\n\n<div class=\"highlight\"><pre><code class=\"html\"><span class=\"nt\">&lt;script </span><span class=\"na\">src=</span><span class=\"s\">&quot;http://a.tbcdn.cn/s/kissy/1.3.0/seed.js&quot;</span><span class=\"nt\">&gt;&lt;/script&gt;</span>\n<span class=\"nt\">&lt;script&gt;</span>\n<span class=\"nx\">KISSY</span><span class=\"p\">.</span><span class=\"nx\">config</span><span class=\"p\">(</span><span class=\"s1\">&#39;packages&#39;</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n    <span class=\"nx\">brix</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n        <span class=\"nx\">base</span><span class=\"o\">:</span> <span class=\"s1\">&#39;http://a.tbcdn.cn/s/brix/&#39;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">})</span>\n<span class=\"nx\">KISSY</span><span class=\"p\">.</span><span class=\"nx\">use</span><span class=\"p\">(</span><span class=\"s1\">&#39;brix/app&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">S</span><span class=\"p\">,</span> <span class=\"nx\">app</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nx\">config</span><span class=\"p\">({</span>\n        <span class=\"nx\">namespace</span><span class=\"o\">:</span> <span class=\"s1\">&#39;ux.brix-test&#39;</span><span class=\"p\">,</span>\n        <span class=\"nx\">imports</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n            <span class=\"c1\">// import 进来的组件</span>\n        <span class=\"p\">},</span>\n        <span class=\"nx\">components</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n            <span class=\"c1\">// ux.brix-test 项目自身的组件</span>\n        <span class=\"p\">],</span>\n        <span class=\"nx\">timestamp</span><span class=\"o\">:</span> <span class=\"mi\">130416</span>\n    <span class=\"p\">})</span>\n<span class=\"p\">})</span>\n<span class=\"nt\">&lt;/script&gt;</span>\n</code></pre></div>\n\n\n<p>这样，即可在开发时忘掉时间戳这茬，上线时又可以先发布资源文件，再更新 vm 或者 TMS 中的 timestamp\n来完成发布流程。</p>\n\n<p>配置的部分讲完了，接下来就是启动页面，方式如下：</p>\n\n<div class=\"highlight\"><pre><code class=\"js\"><span class=\"c1\">// 如果只需要初始化页面中所有组件，其他啥也不用做：</span>\n<span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nx\">boot</span><span class=\"p\">()</span>              <span class=\"c1\">// 等同于 app.boot(&#39;[bx-app]&#39;)</span>\n                        <span class=\"c1\">// 即如果选择器参数忽略，会自动找有自定义属性 bx-app 标记的节点</span>\n                        <span class=\"c1\">// 返回 brix/page 模块的实例</span>\n\n<span class=\"c1\">// 如果需要传递数据，以便使用模板的组件正确渲染：</span>\n<span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nx\">boot</span><span class=\"p\">({</span>\n    <span class=\"c1\">// 数据</span>\n    <span class=\"c1\">// ...</span>\n<span class=\"p\">})</span>                      <span class=\"c1\">// 等同于 app.boot(&#39;[bx-app]&#39;, { ... })</span>\n\n<span class=\"c1\">// 如果只需要初始化某个节点（单页应用中的某个 View）</span>\n<span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nx\">boot</span><span class=\"p\">(</span><span class=\"s1\">&#39;#J_someView&#39;</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"p\">...</span> <span class=\"p\">})</span>\n\n<span class=\"c1\">// 如果需要初始化完毕之后进行额外的操作：</span>\n<span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nx\">boot</span><span class=\"p\">(</span><span class=\"s1\">&#39;#J_myView&#39;</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"p\">...</span> <span class=\"p\">}).</span><span class=\"nx\">on</span><span class=\"p\">(</span><span class=\"s1\">&#39;bx:ready&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// app.boot() 返回的是 brix/page 实例，可以通过监听该实例的 bx:ready 事件，</span>\n    <span class=\"c1\">// 以进一步操作被初始化页面中组件。</span>\n\n    <span class=\"c1\">// 按照组件名查找组件，可能返回多个</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">bxFind</span><span class=\"p\">(</span><span class=\"s1\">&#39;ux.brix-test/ceiling&#39;</span><span class=\"p\">)</span>\n\n    <span class=\"c1\">// 按照组件所在节点 ID 查找组件，返回结果唯一</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">bxFind</span><span class=\"p\">(</span><span class=\"s1\">&#39;#J_ceiling&#39;</span><span class=\"p\">)</span>\n<span class=\"p\">})</span>\n</code></pre></div>\n\n\n<p>那个 page 参数是神马？ page 即 Brix Core 暴露出来的另一个模块，brix/page，它只在 app.boot\n触发的 bx:ready 事件回调中返回，用处是持有当前被初始化的节点，以及该节点下直属的组件。</p>\n\n<p>通过 page.find，用户即可查找该 HTML 区域中的组件，对其进行进一步操作。</p>\n\n<p>至此，brix/app 模块就基本讲完了，它做的事情非常简单，提供用户配置组件版本、自定义组件的时间戳，\n让用户通过 app.boot 方法初始化整个页面、或者某个局部节点。</p>\n\n<h3>为什么不推荐使用 app.bootStyle</h3>\n\n<p>app.bootStyle 做的事情是，获取 app.config 中配置掉的所有 imports 与 components，\n将它们的 index.css 一并 KISSY.use 一下，类似：</p>\n\n<div class=\"highlight\"><pre><code class=\"js\"><span class=\"nx\">KISSY</span><span class=\"p\">.</span><span class=\"nx\">use</span><span class=\"p\">(</span><span class=\"s1\">&#39;ux.brix-test/ceiling/index.css, ux.tanx/table/index.css&#39;</span><span class=\"p\">)</span>\n</code></pre></div>\n\n\n<p>这里的问题在于，CSS 文件的优化空间很小，优化不到两个不同组件引入了相同 CSS 模块的情况，\n例如可能有类似以下情况：</p>\n\n<div class=\"highlight\"><pre><code class=\"scss\"><span class=\"c1\">// ux.brix-test/ceiling/index.scss</span>\n<span class=\"k\">@import</span> <span class=\"s2\">&quot;brix/mixins.scss&quot;</span><span class=\"p\">;</span>\n\n<span class=\"nc\">.yangqi</span> <span class=\"p\">{</span>\n    <span class=\"k\">@include</span><span class=\"nd\"> border-radius</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"kt\">px</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n\n\n\n\n<div class=\"highlight\"><pre><code class=\"scss\"><span class=\"c1\">// ux.tanx/table/index.scss</span>\n<span class=\"k\">@import</span> <span class=\"s2\">&quot;brix/mixins.scss&quot;</span><span class=\"p\">;</span>\n\n<span class=\"nc\">.shangdangci</span> <span class=\"p\">{</span>\n    <span class=\"k\">@include</span><span class=\"nd\"> border-radius</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"kt\">px</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n\n\n<p>在这俩组件生成的 index.css 里，可能都会有份 brix/mixins 的编译结果，但在项目级别上看，\n很容易就发现这 mixins.scss ，不应该存在多份。</p>\n\n<p>如果能够做到在项目开发时，样式与脚本分开处理，使用 less 或者 scss 来自动打包项目的样式文件，\n效果应该会好很多。</p>\n\n<h3>imports 对象该如何生成</h3>\n\n<p><code>app.config('imports', { ... })</code> 参数里，所需要传入的对象是这种结构：</p>\n\n<div class=\"highlight\"><pre><code class=\"js\"><span class=\"p\">{</span>\n    <span class=\"s1\">&#39;ux.tanx&#39;</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n        <span class=\"nx\">breadcrumb</span><span class=\"o\">:</span> <span class=\"s1\">&#39;0.1.0&#39;</span><span class=\"p\">,</span>\n        <span class=\"nx\">dropdown</span><span class=\"o\">:</span> <span class=\"s1\">&#39;0.1.2&#39;</span>\n    <span class=\"p\">},</span>\n    <span class=\"s1\">&#39;ux.diamond&#39;</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n        <span class=\"nx\">table</span><span class=\"o\">:</span> <span class=\"s1\">&#39;0.1.4&#39;</span><span class=\"p\">,</span>\n        <span class=\"nx\">list</span><span class=\"o\">:</span> <span class=\"s1\">&#39;0.2.0&#39;</span>\n    <span class=\"p\">},</span>\n    <span class=\"nx\">brix</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n        <span class=\"nx\">kwicks</span><span class=\"o\">:</span> <span class=\"s1\">&#39;0.3.1&#39;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n\n\n<p>假如项目使用到的外部与标准组件十分多，这个对象会变得非常大，难以维护。所以在设计上，这个文件理应提出来，\n作为一个单独的 JS 或者 JSON 文件，放在项目根部，在实际页面中只需要引用这份 JS 即可。我想，应该有个\nBrixlock.js 文件，它的内容类似：</p>\n\n<div class=\"highlight\"><pre><code class=\"js\"><span class=\"kd\">var</span> <span class=\"nx\">Brixlock</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"p\">...</span> <span class=\"p\">}</span>          <span class=\"c1\">// imports 对象的实际内容</span>\n</code></pre></div>\n\n\n<p>注意，imports 对象需要描述当前项目 <strong>所有</strong> 引入的组件的版本，这样才能保证 brix/app 在根据\nbx-name 初始化页面时可以顺利进行。但在实际应用中这么做肯定是不现实的，所以完整的解决方案，\n应该有两个文件。</p>\n\n<p>项目根目录下，会有个 brix.json 文件，这个文件描述了这个项目中直接使用到的组件版本，描述格式类似\nRails 项目的 Gemfile，或者 NPM 的 package.json ：</p>\n\n<div class=\"highlight\"><pre><code class=\"js\"><span class=\"p\">{</span>\n    <span class=\"s2\">&quot;imports&quot;</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">&quot;ux.tanx&quot;</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n            <span class=\"s2\">&quot;ceiling&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;~ 0.1.0&quot;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">},</span>\n    <span class=\"s2\">&quot;components&quot;</span><span class=\"o\">:</span> <span class=\"p\">[</span>             <span class=\"c1\">// 如果不写，则解析 components 下所有组件</span>\n        <span class=\"s2\">&quot;nav&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;sidenav&quot;</span>\n    <span class=\"p\">]</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n\n\n<p>然后，在 components/ux.brix-test/nav 和 components/ux.brix-test/sidenav 目录中，\n则有 brick.json 文件，结构同样类似 package.json ，用于描述当前组件所依赖的父组件，\n以 components/ux.brix-test/nav 为例：</p>\n\n<div class=\"highlight\"><pre><code class=\"js\"><span class=\"p\">{</span>\n    <span class=\"s2\">&quot;name&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;ux.brix-test/nav&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;version&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;0.1.0&quot;</span><span class=\"p\">,</span>          <span class=\"c1\">// 因为是项目组件，此处版本写不写无所谓，只在发布时需要</span>\n    <span class=\"s2\">&quot;dependencies&quot;</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">&quot;brix/dropdown&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;~ 0.1.0&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;brix/checkbox&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;~ 0.1.0&quot;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n\n\n<p>imports/ux.tanx/ceiling/0.1.0 目录下，自然也会有这么一份 brick.json ，内容类似：</p>\n\n<div class=\"highlight\"><pre><code class=\"js\"><span class=\"p\">{</span>\n    <span class=\"s2\">&quot;name&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;ux.tanx/ceiling&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;version&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;0.1.0&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;dependencies&quot;</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">&quot;brix/dropdown&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;~ 0.1.0&quot;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n\n\n<p>但这份文件不需要使用者关心，我们可以拜托 Brix Manager 来帮忙做这件事情。</p>\n\n<p>所以，理想的情况，应当是用户在开发一个页面时，通过 brix.json 文件来描述当前页面会直接使用到的组件，\n并且以比较宽松的方式指定外部组件的版本，如果需要限定自定义组件的依赖查找，则在额外写个 components\n数组，最终形成类似前文所述那种描述。</p>\n\n<p>剩下的事情，就拜托 Brix Manager 来做，让它去下载外部组件的 brick.json ，去找自定义组件的\nbrick.json ，解析它们，如果它们所依赖的组件还有依赖，则继续往上找，直到所有依赖都获取完毕，\n形成了多颗倒着长的树。这个时候，再去把这棵树铺平，找到满足依赖关系的所有组件，把它们都下载下来，\n放到 imports 目录，与最终所下载的确切版本一起，把这个铺平的映射，反映到 Brixlock.js 文件中去。</p>\n\n<p>这里有两件比较有难度的事情：</p>\n\n<ul>\n<li>需要写明组件的依赖，同时在 brick.json 中，又不能写得太死；</li>\n<li>组件的版本需要满足一定规则，例如 <a href=\"http://semver.org\">http://semver.org</a>，使得这一切依赖关系是可以推断的。</li>\n</ul>\n\n\n<p>说到底，这对 Brix Manager 是个大挑战。</p>\n\n<h3>Brix Manager 该当如何</h3>\n\n<p>简单说，Brix Manager 需要做两件事情：</p>\n\n<ul>\n<li>publish 组件到仓库，并将相应版本发布到 CDN</li>\n<li>install 组件到本地</li>\n</ul>\n\n\n<p>但同时，Brix Manager 需要支持一些高级特性，包括：</p>\n\n<ul>\n<li>从一段 HTML 片段中解析需要引入的组件，生成或者更新 brix.json，并形成 Brixlock.js</li>\n<li>从 brix.json 与 brick.json 解析出整个项目的依赖组件图，最终形成 Brixlock.js</li>\n</ul>\n\n\n<h3>组件依赖如何处理</h3>\n\n<p>我设想的 Brix 组件，是应该有其依赖的。具体做法，思考 ing，容后谈。</p>\n\n<p><img src=\"http://pic.yupoo.com/yicai-cyj_v/CMVI827C/CJW6g.jpg\" alt=\"杭州之春\" /></p>\n",
            "$": {
              "type": "html"
            }
          }
        ]
      },
      {
        "title": [
          "如何上手 Rails"
        ],
        "link": [
          {
            "$": {
              "href": "http://cyj.me/rails/how-to-rails"
            }
          }
        ],
        "updated": [
          "2013-04-15T00:00:00-07:00"
        ],
        "id": [
          "http://cyj.me/rails/how-to-rails"
        ],
        "content": [
          {
            "_": "<p>Rails 也有些年头拉，幸好它有个“专制独裁”且认为自己“非常有品味”的话事人，叫做 @dhh，\n在我经历的 Rails 2 到 3 版本变化，和即将来临的 3 到 4 中，都不难看到这位话事人勇于突破，\n敢于尝新，且确实品位不俗。</p>\n\n<p>在 Rails 3 里，我们可以看到\n<a href=\"http://guides.rubyonrails.org/asset_pipeline.html\">Asset Pipeline</a>、新的 routes、\nActiveModel 提炼等大改动，并且都不赖。在 3 到 4 里，我所知的亮点即 Concern 与 turbolink，\n前者为现有的代码组织困扰提供统一的解决方案，后者为普通网站加速，让 webpage 摇身变成 webapp，\n用起来又是透明的，当真是化繁为简。</p>\n\n<p>不过本文立意不在此，而在为 Rails 有志者作指引，希望说明一些原则性的东西，让诸位初次接触\nRails 的人，正确走在通往 Rails 大拿的康庄大道上。</p>\n\n<h2>开发环境</h2>\n\n<h3>Ruby</h3>\n\n<p>Ruby 语言本身是跨平台的，它已经 18 岁了，在它走向成年的日子里，先后有 C、Java、C++、C#、\nSmalltalk、Objective C 等版本的实现。跨平台支持最好的是前两位，C 版本的实现，又成为\nMRI Ruby，它是 Ruby 语言的创造者 Matz 实现的。</p>\n\n<p>在它的<a href=\"http://ruby-lang.org\">官方网站</a> 上，提供了以上各个版本的下载地址，推荐的自然是 MRI\n实现，在类 UNIX 系统上，直接通过相关包管理工具安装即可，Windows 用户，则可以通过\n<a href=\"http://rubyinstaller.org/\">RubyInstaller</a> 安装。</p>\n\n<h3>Rails</h3>\n\n<p>Ruby 语言里，除了自带库（<a href=\"http://ruby-doc.org/stdlib-1.9.3/\">stdlib</a>）之外，还可以借助\n<a href=\"http://rubygems.org\">rubygems</a> 系统，安装其他人共享出来的封装好的库，称为 gem 。</p>\n\n<p>Rails 项目本身，就是由一系列 gem 组成的，许多以 active 开头：</p>\n\n<ul>\n<li>acitvesupport</li>\n<li>activerecord</li>\n<li>activeresource</li>\n<li>actionmailer</li>\n<li>actionpack</li>\n<li>railties</li>\n<li>bundler</li>\n</ul>\n\n\n<p>到这里，Ruby 与 Rails，都跨得两脚好平台，Windows 上跑跑，问题不大。</p>\n\n<h3>其他库</h3>\n\n<p>但问题往往出在浓眉大眼的第三方库上，一个最寻常的 Rails 开发的网络应用，通常需要数据库、图片处理、\n数据缓存等技术，相应的，它需要这仨：</p>\n\n<ul>\n<li>mysql2</li>\n<li>mini_magick</li>\n<li>redis</li>\n</ul>\n\n\n<p>mysql2 顾名思义，即 MySQL 支持，做得还不错，配合 RubyInstaller 与 DevKit，一般搞得定；\nmini_magick 即 ImageMagick 的 Ruby 接口封装，已经略有些坑；到了 redis…… redis-server\n官方不支持 Windows 好么？</p>\n\n<h3>没得选择</h3>\n\n<p>所以啰嗦了这么一堆，只想告诉诸位亲一个事实，如果要入 Rails 的门，切莫拄 Windows 这根拐。</p>\n\n<p>解决方案，按如下优先级：</p>\n\n<ul>\n<li>能申请或者购买到 Mac 不？</li>\n<li>能直接安装自己中意的 Linux 发行版不？</li>\n<li>能虚拟机安装个 Linux 配合宿主机做开发不？</li>\n</ul>\n\n\n<p>好啦，我当你搞定了，不管用什么环境开发 Rails 项目，都有相应的方案，即使是支持程度不佳的\nWindows 操作系统，我们也可以曲线救国，通过\n<a href=\"/binary/arch-linux-in-vbox\">安装虚拟机来跑环境</a></p>\n\n<h2>Mac 环境安装</h2>\n\n<p>Mac 用户是最幸福的，因为既不像 Windows 那么束手束脚，也不像 Linux 这样容易被沿途的风景耽误\n正事，安装 Rails 环境，只需要：</p>\n\n<ul>\n<li>安装 <a href=\"https://developer.apple.com/xcode/\">Xcode</a></li>\n<li>安装 <a href=\"https://developer.apple.com/downloads/\">Command Line Tools</a></li>\n<li>安装 <a href=\"http://mxcl.github.io/homebrew/\">HomeBrew</a></li>\n<li>安装 <a href=\"http://rvm.io/\">RVM</a></li>\n<li>安装 <a href=\"http://gembundler.com/\">bundler</a></li>\n</ul>\n\n\n<p>剩下的就交给 bundle install 即可。</p>\n\n<h3>HomeBrew 还是 MacPorts</h3>\n\n<p>MacPorts 是 BSD 里 Ports 工具的 Mac 版本，HomeBrew 则是在其后出现的，广告词曾是\n“MacPorts 让你借酒浇愁？试试 HomeBrew 吧”，现在则是 Mac OS X 所遗漏的包管理工具。</p>\n\n<p>后者比 MacPorts 的好处有很多：</p>\n\n<ul>\n<li>比 MacPorts 新</li>\n<li>支持二进制直接安装</li>\n<li>Formula 是 Ruby 写的</li>\n<li>在 <a href=\"https://github.com/mxcl/homebrew\">Github 开源</a></li>\n</ul>\n\n\n<p>我没用过 MacPorts ，而 HomeBrew 一直好用，所以像诸位郑重推荐。</p>\n\n<h3>zsh 与 oh-my-zsh</h3>\n\n<p>zsh 相比 bash 的好处，恐怕普通用户说不出所以然来，更好的补全支持可能是一大方面，而对我来说\n<a href=\"https://github.com/robbyrussell/oh-my-zsh\">oh-my-zsh</a> 也是很重要的一方面。通过\noh-my-zsh 包，可以很方便地配置需要补全支持的子命令（git、gem、bundle、rails、npm 之类），\n可以选择主题，等等。</p>\n\n<p>安装方式非常简单：</p>\n\n<div class=\"highlight\"><pre><code class=\"bash\"><span class=\"c\"># 安装 zsh</span>\nbrew install zsh\n\n<span class=\"c\"># 手动安装 oh-my-zsh</span>\ngit clone git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh\ncp ~/.zshrc ~/.zshrc.orig\ncp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc\nchsh -s /bin/zsh\n</code></pre></div>\n\n\n<p>需要注意的是，如果在安装了 RVM 之后才安装 zsh 的，需要将相关初始化语句加到 ~/.zshrc 里。</p>\n\n<p>另外我还推荐使用 <a href=\"http://www.iterm2.com/\">iTerm2</a> 与 zsh 搭配，OS X 自带的 Terminal\n弱了一些。</p>\n\n<h2>从哪儿开始？</h2>\n\n<h3>Ruby 语言</h3>\n\n<p>Rails 是个很厉害的框架，它把 Ruby 语言特性发挥得淋漓尽致，又封装得简明干练。如果没有学过\nRuby ，那即使知晓其他编程语言，我也不推荐大家直接从 Rails 开始。除了 Smalltalk、schema、\n或者 Perl 这些影响过 Ruby 的，一般编程语言对学习 Ruby 基本没有帮助，自然更不建议直接从\nRails 开始。</p>\n\n<p>直接硬上，小到理解 <code>render :template =&gt; 'foo.html.erb'</code>，大到 <code>method_missing</code>\n之流，都容易碰壁，所以还是安安心，从 Ruby 开始。</p>\n\n<p>而学习 Ruby 没有什么快办法，就是找本书来看。推荐：</p>\n\n<ul>\n<li><a href=\"http://mislav.uniqpath.com/poignant-guide/\">Why's Poignant Guide to Ruby</a></li>\n<li><a href=\"http://book.douban.com/subject/3329887/\">Ruby 编程语言</a></li>\n</ul>\n\n\n<p>速查 stdlib 的 API，可以使用 <a href=\"http://ruby-doc.org\">http://ruby-doc.org</a> 网站。</p>\n\n<h3>Rails 指引</h3>\n\n<p>Rails 当初驰名，还让 @dhh 上了回杂志，常被人提及的正是那个 5 分钟开发个博客的教程，\n这个教程现在被丰富，改写，作为\n<a href=\"http://guides.rubyonrails.org/getting_started.html\">Rails 指南首篇</a>，自然是不得不看，\n鄙站，将不日推出此文中译，提请诸位垂注。</p>\n\n<p>练完手，继续看 <a href=\"http://guides.rubyonrails.org/index.html\">Rails 指引</a> 即可，这些文章，\n能解答你在用 Rails 开发网站时遇到的绝大部分问题，找准关键字，理清技术点，可保无虞。</p>\n\n<p>也有一本书值得推荐：</p>\n\n<ul>\n<li><a href=\"http://book.douban.com/subject/1416743/\">Agile Web Development with Rails</a></li>\n</ul>\n\n\n<p>但这本书有几个问题，比较老，新版拿 Rails 3 讲，但是内容反而薄了，我只看了旧版，谨慎怀疑新版把\nRails 2 到 3，3.0 到 3.1 的一些问题给忽略掉了。而旧版本身，真的很有些旧了，不适合拿来跟着做。</p>\n\n<p>所以，如果你借得到这本，就不妨看看；如果要买，还是算了，看官方的指引吧。</p>\n\n<h2>后记</h2>\n\n<p><img src=\"http://pic.yupoo.com/yicai-cyj_v/CMYZob6E/4Oovj.jpg\" alt=\"东区长廊\" /></p>\n\n<p>如上，即 Rails 上手基础，其余，后补。</p>\n",
            "$": {
              "type": "html"
            }
          }
        ]
      },
      {
        "title": [
          "杭州之春"
        ],
        "link": [
          {
            "$": {
              "href": "http://cyj.me/life/spring-in-hangzhou"
            }
          }
        ],
        "updated": [
          "2013-04-13T00:00:00-07:00"
        ],
        "id": [
          "http://cyj.me/life/spring-in-hangzhou"
        ],
        "content": [
          {
            "_": "<p>3月尾，清明将至，连续几个周末却是阴雨绵绵，不免觉得气闷，窝在家里看去年的照片，\n告诉自己杭州的春天应该是这样的：</p>\n\n<p><img src=\"http://pic.yupoo.com/yicai-cyj_v/CMVvgNCn/pWNX2.jpg\" alt=\"苏堤晴好\" /></p>\n\n<p>应该是看发了嫩芽儿的柳枝在和煦春日里自在摇摆，看游人如织，看波澜不惊。</p>\n\n<p>而非像这将将入夜时的小雨，和那拥堵不堪：</p>\n\n<p><img src=\"http://pic.yupoo.com/yicai-cyj_v/CMVvgHRe/FxmNa.jpg\" alt=\"文二路小雨\" /></p>\n\n<p>所幸，到了清明小长假，不再雨纷纷，于是起了个晚，去青芝坞的朴墅吃饭。</p>\n\n<p><img src=\"http://pic.yupoo.com/yicai-cyj_v/CMVwJ5IH/SDq8J.jpg\" alt=\"朴墅\" /></p>\n\n<p>朴墅是家餐厅，开在两幢连一块的小别墅里，亭台水榭，坐在二楼临水的位置，直觉心旷神怡。但很不美的是，\n杭州的餐厅，价格亲民但又做得好吃的多半需要等位，以外婆家、第二乐章、指福门、白鹿、绿茶、弄堂里为典型，\n在绿茶最长一次从晚上5点等到7点多足足两个多小时这种事情我会随便乱说？</p>\n\n<p>而朴墅也属此类。中午、晚上都去过，营业时间还没到，就会有一溜人坐在外边排队。老板见了，应该很开心。</p>\n\n<p>吃罢饭，在两年前美好的太子湾印象勾引下，走杨公堤往南山路进发。可惜它已经风韵全无，变成大妈模样，\n游人如织，草地微秃，只有那稍稍开过了的郁金香在诉说着她的往日荣光。</p>\n\n<p>这粉色郁金香，开在门口，就在南山路边上，向堵在南山路上的各色机动车招摇，官人，进来歇会吧。\n满头大汗的司机与交警们，则在暗骂，这尼玛风景倒是如画，且教洒家在哪儿停车下马哇。</p>\n\n<p><img src=\"http://pic.yupoo.com/yicai-cyj_v/CMVANKoN/kwewk.jpg\" alt=\"粉色郁金香\" /></p>\n\n<p>太子湾公园里，比肩继踵，你在花前赏花，人在花前摆拍，到底是赏花人在赏花，还是花在赏游人自拍，\n不得而知。幸好，曲径通幽，越往里走，人群越分散，不经意间抬头，园里某处，看到一片郁金香，色彩斑斓。</p>\n\n<p><img src=\"http://pic.yupoo.com/yicai-cyj_v/CMVANSyx/S5C2g.jpg\" alt=\"五彩斑斓\" /></p>\n\n<p>满眼都是人自然憋闷，出得园门，豁然开朗，南山路旁竟然各色郁金香与菊花交织。穿插了许多旁的，叫不出名字，\n老婆说这个叫长寿花。</p>\n\n<p><img src=\"http://pic.yupoo.com/yicai-cyj_v/CMVAOmxW/Y1mUr.jpg\" alt=\"长寿花\" /></p>\n\n<p>真想看看太子湾的美，理该请个小半天假，花一早上在里头徜徉吧。清明前那几周，全都是工作日晴好，周末下雨，\n老天爷暗示了这么久，只可惜凡夫俗子没这魄力哇。</p>\n\n<p>人浪领略完毕，从赤山埠停车场出发，沿三台山路往南走，到浴鹄湾看看，那边有个长廊，似乎《非诚勿扰》\n里头都出现过的。这一路可以领略的，便是各种恣意骄纵的绿了。</p>\n\n<p><img src=\"http://pic.yupoo.com/yicai-cyj_v/CMVHGyqr/X6iOr.jpg\" alt=\"浴鹄湾的长廊\" /></p>\n\n<p><img src=\"http://pic.yupoo.com/yicai-cyj_v/CMVI827C/CJW6g.jpg\" alt=\"新绿\" /></p>\n\n<p>穿过走廊，沿着三台山路，靠杨公堤侧走，可以经过江南会，这个贵死人的高级会所，对游人却是极客气的，\n随便进出。继续往北，可以到一处满是樱花的小径，满树银花，跟不要钱似的。</p>\n\n<p><img src=\"http://pic.yupoo.com/yicai-cyj_v/CMVI8dly/c09o5.jpg\" alt=\"樱花\" /></p>\n\n<p><img src=\"http://pic.yupoo.com/yicai-cyj_v/CMVI8Mv5/Pmxd4.jpg\" alt=\"樱花黑白\" /></p>\n\n<p><img src=\"http://pic.yupoo.com/yicai-cyj_v/CMYsRbw9/FLXfe.jpg\" alt=\"黑白\" /></p>\n\n<p>一路上，有人拍婚纱，有人组团邀模特拍摄，人流终于不再密集，终于有了“好美呀”的闲暇。</p>\n\n<p>后二日，往紫金港，这个建于新世纪初叶的校区，终成规模，有人文味道了。</p>\n\n<p>西区教学楼的黄昏：</p>\n\n<p><img src=\"http://pic.yupoo.com/yicai-cyj_v/CMVAOgnA/oolNf.jpg\" alt=\"西区教学楼的黄昏\" /></p>\n\n<p>启真湖里的黑天鹅：</p>\n\n<p><img src=\"http://pic.yupoo.com/yicai-cyj_v/CMVAOnVt/mC3Dj.jpg\" alt=\"启真湖里的黑天鹅\" /></p>\n\n<p>以上，即清明小长假之游记，希望对诸位出行游玩有所帮助。</p>\n",
            "$": {
              "type": "html"
            }
          }
        ]
      },
      {
        "title": [
          "前端轶事"
        ],
        "link": [
          {
            "$": {
              "href": "http://cyj.me/f2e/eyes-opening"
            }
          }
        ],
        "updated": [
          "2013-04-13T00:00:00-07:00"
        ],
        "id": [
          "http://cyj.me/f2e/eyes-opening"
        ],
        "content": [
          {
            "_": "<p><img src=\"http://pic.yupoo.com/yicai-cyj_v/CMYdgUtU/sRCBN.jpg\" alt=\"太子湾的郁金香\" /></p>\n\n<p>前一阵，有好多前端大拿在抱怨，说前端技术可做的小，饼没有其他工作大之类。传播负面消息自然不好，\n直接导致我这边有位外聘同学要离职创业去。好吧，这是玩笑话，他原本就打算不做前端，跟高P们的牢骚关系不大。\n在他不长的前端经历中，绝大多数时间花在了切页面上，所以给他的感受是，做前端，和农村里做工艺品差不多。\n接一批活，做完，交差，拿钱。</p>\n\n<p>但我是不能认同这种看法的。作为严肃的 IT 从业人士，前端工程师只是我的伪装，本着 DRY、\n<a href=\"http://www.python.org/dev/peps/pep-0020/\">Python 之禅</a> 等一系列计算机主义之精神，\n我积极投身于一下前端工程师所热衷的事务之中：</p>\n\n<ul>\n<li>代码模块化</li>\n<li>页面组件化</li>\n<li>测试自动化</li>\n</ul>\n\n\n<p>希望以这些为底子，我们可以与设计师、与开发一起，获得\n<a href=\"http://tieba.baidu.com/p/1787925405\">生命的大和谐</a>！</p>\n\n<h2>模块化</h2>\n\n<h3>看上去很美</h3>\n\n<p>前年尾，去年初，忽如一夜春风来，好像全世界的前端工程师都突然开始做模块化。技术大拿们讨论的模块声明语法\n（CommonJS），在 NodeJS 里得到印证、细化，变得健壮、直观，很洋气地说，非常 promising（有前途），\n于是我们又有了 <a href=\"http://cyj.me/why-seajs/requirejs/#why-amd\">RequireJS</a>、\n<a href=\"https://github.com/etaoux/kslite#readme\">KSLITE</a>、\n<a href=\"https://github.com/seajs/seajs/issues/242\">SeaJS</a>、\n<a href=\"http://ozjs.org/cn/\">OzJS</a> 等等，连\n<a href=\"http://docs.kissyui.com/docs/html/api/seed/loader/\">KISSY</a>\n都摇身变成模块加载器了有木有？</p>\n\n<p>我们有这么多用法：</p>\n\n<div class=\"highlight\"><pre><code class=\"js\"><span class=\"c1\">// SeaJS</span>\n<span class=\"nx\">define</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">require</span><span class=\"p\">,</span> <span class=\"nx\">exports</span><span class=\"p\">,</span> <span class=\"nx\">module</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">a</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;./a&#39;</span><span class=\"p\">)</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">b</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;b&#39;</span><span class=\"p\">)</span>\n\n    <span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"p\">...</span> <span class=\"p\">}</span>\n<span class=\"p\">})</span>\n\n<span class=\"c1\">// RequireJS、OzJS</span>\n<span class=\"nx\">define</span><span class=\"p\">([</span><span class=\"s1\">&#39;./a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">],</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">,</span> <span class=\"nx\">require</span><span class=\"p\">,</span> <span class=\"nx\">exports</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// code</span>\n<span class=\"p\">})</span>\n\n<span class=\"c1\">// KSLITE</span>\n<span class=\"nx\">KSLITE</span><span class=\"p\">.</span><span class=\"nx\">declare</span><span class=\"p\">([</span><span class=\"s1\">&#39;./a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">],</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">require</span><span class=\"p\">,</span> <span class=\"nx\">exports</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">a</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;./a&#39;</span><span class=\"p\">)</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">b</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;b&#39;</span><span class=\"p\">)</span>\n\n    <span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"p\">...</span> <span class=\"p\">}</span>\n<span class=\"p\">})</span>\n\n<span class=\"c1\">// KISSY</span>\n<span class=\"nx\">KISSY</span><span class=\"p\">.</span><span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"s1\">&#39;my-module&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">S</span><span class=\"p\">,</span> <span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// exports</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">},</span> <span class=\"p\">{</span>\n    <span class=\"nx\">requires</span><span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"s1\">&#39;./a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">]</span>\n<span class=\"p\">})</span>\n</code></pre></div>\n\n\n<p>一时间百花齐放，只引得列位同僚眼花缭乱，良莠莫辨。所以大牛们的思想碰撞又成一话题，例如 @玉伯也叫射雕\n说 “RequireJS 没有明显 bug，而 SeaJS 明显没有 bug”，区区写代码时日尚短，但断言代码一点 bug\n没有这种话，大抵是不敢说的；又例如\n<a href=\"https://github.com/dexteryy/OzJS/issues/10\">SeaJS 与 OzJS 的讨论</a>，\n如何平衡代码与配置，该不该使用开发时编译工具（ozma）来简化运行时的代码，AMD、CJS、\n<a href=\"https://github.com/seajs/seajs/issues/242\">CMD</a>\n这些概念都是怎么回事，等等。</p>\n\n<p>该选择哪个呢？</p>\n\n<p>别着急，还有。除了上边这些个之外，还有更纯粹的 CJS 写法，预编译以运行在浏览器中的解决方案。\n我们有 <a href=\"https://github.com/substack/node-browserify#readme\">browserify</a> ，和 TJ\n大神的 <a href=\"http://component.io/\">component.io</a>。它们做的事情也简单，让你开发时仍然采用\nNodeJS 才支持的 CJS 写法，直接代码即模块：</p>\n\n<div class=\"highlight\"><pre><code class=\"js\"><span class=\"kd\">var</span> <span class=\"nx\">a</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;./a&#39;</span><span class=\"p\">)</span>\n<span class=\"kd\">var</span> <span class=\"nx\">b</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;b&#39;</span><span class=\"p\">)</span>\n\n<span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// exports</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n\n\n<p>在发布时使用相应工具，将其中的 require、exports、module 等包装起来，使其能运行在浏览器中。\n许多开源 webapp 采用这种方式开发，例如前一阵很出名的\n<a href=\"http://pcottle.github.io/learnGitBranching/?locale=zh_CN\">learnGitBranching</a>。</p>\n\n<p>好吧，现在可以问了不？</p>\n\n<h3>该选择哪个呢？</h3>\n\n<p>选择题，是个很奇怪的东西，许多人应该都听过那个有关富翁挑媳妇的笑话，他选择了胸大的，那些个候选的优劣，\n其实也都是见仁见智的东西，如 @dexteryy 的观点：</p>\n\n<blockquote><p>另外我觉得国内前端社区应该把重心放到解决实际问题和带来新价值的模块上，\n每个人都去做模块加载器或基础设施，有意无意的做差异化或重复建设，是有违这类项目的初衷的，\n也许能起到证明自身技术的作用，但只会被国外越甩越远。</p></blockquote>\n\n<p>搞明白它们都解决了啥，挑个最适合自己的，也就是了。</p>\n\n<h3>我做了啥</h3>\n\n<p>好吧，既然说投身于，那么我到底做了啥？</p>\n\n<p>我只是见证了这一系列变化，切身体会了两个加载器差异化（KSLITE 与 SeaJS）的麻烦处，\n但内心还是为后者的易用性与可用性折服，并为其撰文摇旗 <a href=\"http://cyj.me/why-seajs/zh\">Why SeaJS</a>。</p>\n\n<p>机缘巧合，我又为使用 browserify 的 learnGitBranching 项目贡献了翻译；同时，又因为组件化之事务，\n观摩了许多 component 的代码，TJ 绝对是 JavaScript 世界里我心目中排第一的。</p>\n\n<h2>组件化（或者平台化）</h2>\n\n<p>JavaScript 代码模块化事了，CSS 文件的模块化，又早已有 LESS、SASS 等来帮忙，剩下 HTML，\n我们只需将其模板化就够了，赶巧，这些年，因为 @ejohn 大神的\n<a href=\"http://ejohn.org/blog/javascript-micro-templating/\">micro templating</a> ，\n各路神仙各显其能，各种模板引擎如雨后春笋般冒将出来。</p>\n\n<p>诸位有没有发现，以上这些技术点，仍然还是仰赖后端的技术输出，才最终成为可能的。</p>\n\n<p>因为 NodeJS、Rihno 等服务端 JavaScript 引擎的需求，JS 代码行将模块化，<code>require</code> 是不得不做，\n不得不确立的事情，Rihno 其实用的是 <code>load</code> 关键词，按下不表。最终，有了 CommonJS 规范，\n大家商量好了，我们该怎么引入依赖，该如何暴露出模块，等等。</p>\n\n<p>RequireJS、SeaJS 神马的，只是以此为基础，包装了个匿名函数而已；另一种方式，即 component、\nbrowserify 等，保留服务端的模块书写方式，强依赖编译过程；OzJS 则两者均沾。</p>\n\n<p>CSS 模块化，同样如此，LESS 还好些，SASS 原本就是 ruby 代码实现的，样式代码命名空间、mixin、\n各种流程控制语法糖，等等，其实也都不是新玩意。</p>\n\n<p>HTML 模板引擎？这个就更不消说，我们现在做的，只不过把渲染拿到前台，原本抽象出来的那些概念，\n简单的模板引擎实现该做些啥，同样的，都不是新玩意。</p>\n\n<p>秉着拿来主义，许多后端旧有技术，拿将来与前端世界结合，就是一件很不错的创新。模块化是如此，而组件化，\n抛开后端技术辅助，单单在前端世界里玩，恐怕也不会太好玩。</p>\n\n<h3>我眼中的组件化</h3>\n\n<p>我们需要：</p>\n\n<ul>\n<li>一套拆分页面的规则</li>\n<li>应用这些规则拼装页面的加载器</li>\n<li>加载器的相关配套设施</li>\n</ul>\n\n\n<h3>规则与组件加载器</h3>\n\n<p>暂时都写在 <a href=\"http://github.com/dotnil/brix-core\">dotnil/brix-core</a>。</p>\n\n<p>去年年初，@lenel 李牧老师即带着大家试水组件化，并发起\n<a href=\"http://etaoux.github.com/brix\">Brix</a> 项目，在 @左莫莫右莫莫 老师的实践里，\n形成了一系列雏形。</p>\n\n<p>我对其中一些约束做了简化，并实现了演示版本，此即我修改的 Brix Core。</p>\n\n<h3>组件分享工具与服务</h3>\n\n<p>暂时都写在：</p>\n\n<ul>\n<li><a href=\"https://github.com/dotnil/mosaic-client\">dotnil/mosaic-client</a></li>\n<li><a href=\"https://github.com/dotnil/mosaic-server\">dotnil/mosaic-server</a></li>\n</ul>\n\n\n<h2>测试自动化</h2>\n\n<p>图形界面的测试自动化，是个大坑，我想做的是单元测试与持续集成。立足点自然是前文，模块化与组件化。</p>\n\n<h3>Brix Core 实践</h3>\n\n<p>这个项目里，使用 QUnit 作为测试库，为项目中的所有模块都写了单元测试，当然，现在覆盖率还不够高。\n写好之后，配合 grunt-contrib-qunit 模块，我们可以将测试、发布流程绑在一起，在发布之前，\n强制执行一次所有测试用例，类似：</p>\n\n<pre><code>grunt test &amp;&amp; grunt build\n</code></pre>\n\n<h3>发布与持续集成服务</h3>\n\n<p>鄙厂前端这些年，积累了大大小小不少的前端资源发布工具，如何形成一系列规则，将发布与集成测试结合起来，\n应该是个蛮好玩的事情。</p>\n\n<h2>后记</h2>\n\n<p><img src=\"http://pic.yupoo.com/yicai-cyj_v/CMYi0RFW/gkflG.jpg\" alt=\"花儿\" /></p>\n\n<p>本文非常可耻地烂尾了，后两项（组件化与测试自动化）是我正在经历中的事情，个中许多，我认为都还没确定，\n现在拿出来讲不太合适，留待后补吧。</p>\n\n<p>这篇乱糟糟的博文，英文别名叫 eyes opening，野心昭然若揭，想要说的是自己对前端现状的野望，\n也希望我的同仁们眼界放宽，不要只盯着这一亩三分地，多看看这花花世界，在这广袤的计算机世界里，\n还有好多是我们可以玩的，也有好多，是我们未必就已经做好的，做精、做细，也未尝不可。</p>\n",
            "$": {
              "type": "html"
            }
          }
        ]
      },
      {
        "title": [
          "Style Guide"
        ],
        "link": [
          {
            "$": {
              "href": "http://cyj.me/f2e/style-guide"
            }
          }
        ],
        "updated": [
          "2013-03-07T00:00:00-08:00"
        ],
        "id": [
          "http://cyj.me/f2e/style-guide"
        ],
        "content": [
          {
            "_": "<p>代码风格是老生常谈，做代码评审、甚至普通的代码阅读，都会注意到其风格。最开心的莫过于看到代码\n能够有章法，变量定义，函数声明，代码缩进，无不有其含义，无不助人理解其代码所作所为。然而它也\n容易成为道德绑架的工具，两种不同的风格会掐架，最终导致无意义的争辩，本文无意染指这些，只是\n说明一下我所采用的代码风格。</p>\n\n<h2>JavaScript</h2>\n\n<p><a href=\"http://en.wikipedia.org/wiki/Indent_style\">代码风格</a>或者说规范，是件有点宗教意义的事情，\n科班出身的程序员们，开始写代码没多久就会遇到这个问题，比如说我的第二门编程语言 C，\n就有两个比较典型的缩进风格：</p>\n\n<ul>\n<li>GNU Style</li>\n<li>1TBS（One True Brace Style）</li>\n</ul>\n\n\n<p>前者看起来是这样的：</p>\n\n<div class=\"highlight\"><pre><code class=\"c\"><span class=\"k\">static</span> <span class=\"kt\">char</span> <span class=\"o\">*</span>\n<span class=\"nf\">concat</span> <span class=\"p\">(</span><span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">s1</span><span class=\"p\">,</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">s2</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n  <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n      <span class=\"n\">something</span> <span class=\"p\">();</span>\n      <span class=\"n\">somethingelse</span> <span class=\"p\">();</span>\n    <span class=\"p\">}</span>\n  <span class=\"n\">finalthing</span> <span class=\"p\">();</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n\n\n<p>后者则是：</p>\n\n<div class=\"highlight\"><pre><code class=\"c\"><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">puts</span><span class=\"p\">(</span><span class=\"s\">&quot;Negative&quot;</span><span class=\"p\">);</span>\n    <span class=\"n\">negative</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">);</span>\n<span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n    <span class=\"n\">puts</span><span class=\"p\">(</span><span class=\"s\">&quot;Non-negative&quot;</span><span class=\"p\">);</span>\n    <span class=\"n\">nonnegative</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n\n\n<p>抛开缩进不谈，1TBS 最大的特点，是大括号中开括号的位置，是直接放在区块开端的行尾，而不是另起一行，\n在阿里的前端世界里，它应该是最广为接受的，KISSY 用的即是这种。</p>\n\n<h3>花括号</h3>\n\n<p>我的选择是 1TBS，与 KISSY 保持一致，花括号的开括号放在行尾：</p>\n\n<div class=\"highlight\"><pre><code class=\"js\"><span class=\"p\">;(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// code</span>\n<span class=\"p\">})()</span>\n</code></pre></div>\n\n\n<h3>分号</h3>\n\n<p>故事绝不会到此结束，鄙厂另外一个为人熟知的前端项目是 SeaJS，它的代码风格，是这样的：</p>\n\n<div class=\"highlight\"><pre><code class=\"js\"><span class=\"kd\">function</span> <span class=\"nx\">parseDependencies</span><span class=\"p\">(</span><span class=\"nx\">code</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">ret</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n  <span class=\"nx\">code</span><span class=\"p\">.</span><span class=\"nx\">replace</span><span class=\"p\">(</span><span class=\"nx\">SLASH_RE</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span>\n      <span class=\"p\">.</span><span class=\"nx\">replace</span><span class=\"p\">(</span><span class=\"nx\">REQUIRE_RE</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">m</span><span class=\"p\">,</span> <span class=\"nx\">m1</span><span class=\"p\">,</span> <span class=\"nx\">m2</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">m2</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n          <span class=\"nx\">ret</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"nx\">m2</span><span class=\"p\">)</span>\n        <span class=\"p\">}</span>\n      <span class=\"p\">})</span>\n\n  <span class=\"k\">return</span> <span class=\"nx\">ret</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n\n\n<p>和 1TBS 的明显区别是，两个空格缩进，其余基本相若。咦，有没有觉得代码干净那么一点点？\n它的风格另一大特色，就是行尾的分号一律省略，只是在 <code>[</code> 和 <code>(</code> 做行首时，加上分号，类似：</p>\n\n<div class=\"highlight\"><pre><code class=\"js\"><span class=\"nx\">foo</span><span class=\"p\">(</span><span class=\"s1\">&#39;bar&#39;</span><span class=\"p\">)</span>\n<span class=\"p\">;(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">d</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">egg</span><span class=\"p\">(</span><span class=\"s1\">&#39;ham&#39;</span><span class=\"p\">)</span>\n<span class=\"p\">})(</span><span class=\"nb\">document</span><span class=\"p\">)</span>\n</code></pre></div>\n\n\n<p>这里若不加分号，会被 JavaScript 引擎解析成 <code>foo('bar')(function(d){ ... })(document)</code>：</p>\n\n<ul>\n<li>先调用 <code>foo('bar')</code></li>\n<li>然后将它的返回值视作函数，把 <code>function(d) {...}</code> 作为参数，调用</li>\n</ul>\n\n\n<p>如果它的返回值不是函数，当场就跪，那还算好；如果它的返回值偏偏是个函数，错在哪儿了都不一定知道。\n也正是因为这个原因，Douglas Crockford 和 Google 推荐的 JS 代码风格里，表达式行尾一律加上分号，\n尽管在绝大多数时候，上述情况并不易出现。</p>\n\n<p>当然也有不吃 <a href=\"http://en.wikipedia.org/wiki/Fear,_uncertainty_and_doubt\">FUD</a> 这一套的，\n开始<a href=\"http://mislav.uniqpath.com/2010/05/semicolons/\">号召大家不要用</a>了，有\n<a href=\"http://blog.izs.me/post/2353458699/an-open-letter-to-javascript-leaders-regarding\">写得很详细</a>，\n从 ECMAScript 规范解释省略分号是本意的，也有 <a href=\"https://github.com/madrobby/semicolon.js\">行为艺术</a> 的。</p>\n\n<p>本文不讨论细节，只表述个人风格，我的选择是省略不必要的分号。</p>\n\n<h3>缩进</h3>\n\n<p>我用四个空格作为缩进。仍然用四个空格原因很简单，避免自己一不小心就写出回调金字塔，\n平白多出许多无用的闭包，只能用 27\" 的显示器写前端代码，等等。</p>\n\n<div class=\"highlight\"><pre><code class=\"js\">                   <span class=\"c1\">//some codes</span>\n              <span class=\"p\">})</span>\n         <span class=\"p\">}</span>\n    <span class=\"p\">})</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n\n\n<p>正如 Linus Torvalds 曾经说的，如果你的代码得缩进好多层，从一个角度讲，也许意味着该好好重构了。</p>\n\n<p>另外，也有好多人喜欢用制表符（tab）做缩进，并约定其宽度为四个或两个空格，jQuery 也是如此，\n但我不采用这种。</p>\n\n<h3>变量声明</h3>\n\n<p>老道推荐一个函数一个 <code>var</code>，初衷是改变从C系程序员转变过来的前端工程师对 JavaScript\n中区块的错误看法。JavaScript 里头，没有区块级别的变量声明，例如：</p>\n\n<div class=\"highlight\"><pre><code class=\"js\"><span class=\"p\">;(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">a</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">a</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">)</span> <span class=\"c1\">// =&gt; 2</span>\n<span class=\"p\">})()</span>\n</code></pre></div>\n\n\n<p>限制只能使用单个 <code>var</code>，自然避免了这种困扰。但是这个用法带来的问题是，容易写出这种代码：</p>\n\n<div class=\"highlight\"><pre><code class=\"js\"><span class=\"kd\">var</span> <span class=\"nx\">a</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">foo</span><span class=\"p\">(),</span>\n    <span class=\"nx\">b</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">bar</span><span class=\"p\">(),</span>\n    <span class=\"nx\">c</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">egg</span><span class=\"p\">(),</span>\n    <span class=\"nx\">d</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">ham</span><span class=\"p\">()</span>\n</code></pre></div>\n\n\n<p>这种写法，没法只在其中某一行下断点，只能在 <code>var</code> 起始的地方下，假如这个变量声明长得令人发指，\n想要调试的话，是很恼人的。不可能很长？你看看\n<a href=\"https://github.com/madrobby/zepto/blob/master/src/zepto.js\">zepto</a> 的风格就知道了，\n天知道他们怎么调试的（<a href=\"http://en.wikipedia.org/wiki/Edsger_W._Dijkstra\">Dijkstra</a>\n倒是说过，调试对解决臭虫的帮助并不大，它不过是慢动作演示一遍代码执行的过程而已，所以，或许大神们写代码，\n从来都是不调试的吧）。</p>\n\n<p>言归正传，我的风格是：</p>\n\n<div class=\"highlight\"><pre><code class=\"js\"><span class=\"kd\">var</span> <span class=\"nx\">a</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">foo</span><span class=\"p\">()</span>\n<span class=\"kd\">var</span> <span class=\"nx\">b</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">bar</span><span class=\"p\">()</span>\n\n<span class=\"k\">return</span> <span class=\"nb\">Math</span><span class=\"p\">.</span><span class=\"nx\">round</span><span class=\"p\">((</span><span class=\"nx\">a</span> <span class=\"o\">+</span> <span class=\"nx\">b</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">100</span><span class=\"p\">)</span>\n</code></pre></div>\n\n\n<p>这里还有个要注意的是，变量声明和表达式正文之间，空一行。</p>\n\n<h3>命名</h3>\n\n<p>至于变量名长度，全局或者范围比较广的变量，越能表达其作用越好，局部小函数体里的变量，不致歧义的情况下，\n短名字也无不可。</p>\n\n<p>类名请以大写字母开头，类似 <code>SomeClassWithLongName</code>。</p>\n\n<p>模块中的全局变量，或者模块名比较朴素，容易误覆盖的变量，可以用 <code>_</code> 开头，例如：</p>\n\n<div class=\"highlight\"><pre><code class=\"js\"><span class=\"kd\">var</span> <span class=\"nx\">_path</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;path&#39;</span><span class=\"p\">)</span>\n<span class=\"kd\">var</span> <span class=\"nx\">_cache</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n\n<span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// code</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n\n\n<p>普通变量名，使用 <code>someVar</code> 或者 <code>some_var</code> 均可，但在我的项目中，沿袭其核心数据格式的属性名规范，\n使用下划线分隔字符，这是历史原因，不对其他项目做约束。</p>\n\n<p>模块或者类暴露到外部的方法，统一使用驼峰，不可用 <code>_</code>，因为这些方法是不能被压缩工具优化掉的，\n<code>cameCase</code> 比 <code>lame_method</code> 可以少一个字符，也更加符合 JavaScript 整体的风格一些。</p>\n\n<h3>留白</h3>\n\n<div class=\"highlight\"><pre><code class=\"js\"><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">typeof</span> <span class=\"nx\">a</span> <span class=\"o\">===</span> <span class=\"s1\">&#39;undefined&#39;</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// code</span>\n<span class=\"p\">}</span>\n<span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"nx\">i</span><span class=\"o\">++</span> <span class=\"o\">!==</span> <span class=\"mi\">8848</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">climb</span><span class=\"p\">()</span>\n<span class=\"p\">}</span>\n<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">var</span> <span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"nx\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">365</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">eat</span><span class=\"p\">()</span>\n    <span class=\"nx\">sleep</span><span class=\"p\">()</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n\n\n<p>这些流程控制语句，<code>if</code>、<code>while</code> 和 <code>for</code> 与后边的开括号要有个空格，闭括号与花括号的开括号也是，\n还有其他一些地方，也都要留白。总结一下规律，除了函数调用和匿名函数声明，括号前都要留白。\n不用留白的例子：</p>\n\n<div class=\"highlight\"><pre><code class=\"js\"><span class=\"kd\">var</span> <span class=\"nx\">foo</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">)</span> <span class=\"p\">{}</span>\n<span class=\"nx\">foo</span><span class=\"p\">()</span>\n</code></pre></div>\n\n\n<p>匿名函数声明时，大括号的开括号前仍然要留的。</p>\n\n<p>错误示例：</p>\n\n<div class=\"highlight\"><pre><code class=\"js\"><span class=\"c1\">// 错误：if、=== 及相关分隔符号之间要有留白</span>\n<span class=\"k\">if</span><span class=\"p\">(</span><span class=\"k\">typeof</span> <span class=\"nx\">a</span><span class=\"o\">===</span><span class=\"s1\">&#39;undefined&#39;</span><span class=\"p\">){</span>\n    <span class=\"c1\">//code</span>\n    <span class=\"c1\">// 错误：注释符号后边也得留个空白哦</span>\n<span class=\"p\">}</span>\n<span class=\"c1\">// 同上</span>\n<span class=\"k\">while</span><span class=\"p\">(</span><span class=\"nx\">i</span><span class=\"o\">++!==</span><span class=\"mi\">8848</span><span class=\"p\">){</span>\n    <span class=\"nx\">climb</span><span class=\"p\">()</span>\n<span class=\"p\">}</span>\n<span class=\"c1\">// 同上</span>\n<span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kd\">var</span> <span class=\"nx\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"nx\">i</span><span class=\"o\">&lt;</span><span class=\"mi\">365</span><span class=\"p\">;</span><span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">){</span>\n    <span class=\"nx\">eat</span><span class=\"p\">();</span><span class=\"nx\">sleep</span><span class=\"p\">()</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n\n\n<p>另外，请不要在行尾有多余的空格。</p>\n\n<h3>单行区块</h3>\n\n<p>前面的例子里，除了 <code>for</code> 循环，<code>if</code> 和 <code>while</code> 还可以写成：</p>\n\n<div class=\"highlight\"><pre><code class=\"js\"><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">typeof</span> <span class=\"nx\">a</span> <span class=\"o\">===</span> <span class=\"s1\">&#39;undefined&#39;</span><span class=\"p\">)</span> <span class=\"nx\">findA</span><span class=\"p\">()</span>\n\n<span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"nx\">i</span><span class=\"o\">++</span> <span class=\"o\">!==</span> <span class=\"mi\">8848</span><span class=\"p\">)</span> <span class=\"nx\">climb</span><span class=\"p\">()</span>\n</code></pre></div>\n\n\n<p>请不要写成：</p>\n\n<div class=\"highlight\"><pre><code class=\"js\"><span class=\"c1\">// 如果区块代码另起一行，请别忘了大括号</span>\n<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">typeof</span> <span class=\"nx\">a</span> <span class=\"o\">===</span> <span class=\"s1\">&#39;undefined&#39;</span><span class=\"p\">)</span>\n    <span class=\"nx\">findA</span><span class=\"p\">()</span>\n\n<span class=\"c1\">// 如果只在一行内，大括号是不必要的，别画蛇添足啦</span>\n<span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"nx\">i</span><span class=\"o\">++</span> <span class=\"o\">!==</span> <span class=\"mi\">8848</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"nx\">clibm</span><span class=\"p\">()</span> <span class=\"p\">}</span>\n</code></pre></div>\n\n\n<h3>else</h3>\n\n<div class=\"highlight\"><pre><code class=\"js\"><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">a</span> <span class=\"o\">&gt;</span> <span class=\"mi\">100</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// 爆表啦！</span>\n<span class=\"p\">}</span>\n<span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">a</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// 负分！滚粗！</span>\n<span class=\"p\">}</span>\n<span class=\"k\">else</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// 同学你最乖了</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n\n\n<p><code>else</code> 另起一行，这样条件的各个分支区块会清楚许多。</p>\n\n<h3>对象字面量</h3>\n\n<div class=\"highlight\"><pre><code class=\"js\"><span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"nx\">propFoo</span><span class=\"o\">:</span> <span class=\"s1\">&#39;aha&#39;</span><span class=\"p\">,</span>\n    <span class=\"nx\">propBar</span><span class=\"o\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n    <span class=\"nx\">propArray</span><span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">],</span>\n    <span class=\"nx\">propAnotherArray</span><span class=\"o\">:</span> <span class=\"s1\">&#39;what a wonderful world&#39;</span><span class=\"p\">.</span><span class=\"nx\">split</span><span class=\"p\">(</span><span class=\"s1\">&#39; &#39;</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n\n\n<p>冒号后头一个空格即可。</p>\n\n<p>Node 的逗号前置风格，太另类了，还是不采用吧。</p>\n\n<h2>CSS 与 SCSS</h2>\n\n<p>CSS 的缩进风格与 JavaScript 相似，不同的是这里我们采用两个空格宽度：</p>\n\n<div class=\"highlight\"><pre><code class=\"css\"><span class=\"nc\">.content</span> <span class=\"p\">{</span>\n  <span class=\"k\">padding</span><span class=\"o\">:</span> <span class=\"m\">5px</span> <span class=\"m\">10px</span><span class=\"p\">;</span>\n\n  <span class=\"o\">.</span><span class=\"n\">title</span> <span class=\"err\">{</span>\n    <span class=\"k\">font-weight</span><span class=\"o\">:</span> <span class=\"k\">bold</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"err\">}</span>\n</code></pre></div>\n\n\n<p>需要有浏览器厂商前缀（vender prefix）的声明，按长短循序排列：</p>\n\n<div class=\"highlight\"><pre><code class=\"scss\"><span class=\"k\">@mixin</span><span class=\"nf\"> border-radius</span><span class=\"p\">(</span><span class=\"nv\">$radius</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"na\">-webkit-border-radius</span><span class=\"o\">:</span> <span class=\"nv\">$radius</span><span class=\"p\">;</span>\n     <span class=\"na\">-moz-border-radius</span><span class=\"o\">:</span> <span class=\"nv\">$radius</span><span class=\"p\">;</span>\n          <span class=\"na\">border-radius</span><span class=\"o\">:</span> <span class=\"nv\">$radius</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n\n\n<h2>HTML</h2>\n\n<p>请使用 HTML5，两个空格缩进：</p>\n\n<div class=\"highlight\"><pre><code class=\"html\"><span class=\"cp\">&lt;!doctype html&gt;</span>\n<span class=\"nt\">&lt;html&gt;</span>\n<span class=\"nt\">&lt;head&gt;</span>\n  <span class=\"nt\">&lt;meta</span> <span class=\"na\">charset=</span><span class=\"s\">&quot;utf-8&quot;</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;title&gt;</span>HTML Skeleton<span class=\"nt\">&lt;/title&gt;</span>\n<span class=\"nt\">&lt;/head&gt;</span>\n<span class=\"nt\">&lt;body&gt;</span>\n  <span class=\"c\">&lt;!-- your content goes here --&gt;</span>\n  <span class=\"nt\">&lt;script&gt;</span>\n  <span class=\"c1\">// JavaScript 代码的缩进，仍然是四个空格</span>\n  <span class=\"p\">;(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n      <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;foobar&#39;</span><span class=\"p\">)</span>\n  <span class=\"p\">})()</span>\n  <span class=\"nt\">&lt;/script&gt;</span>\n<span class=\"nt\">&lt;/body&gt;</span>\n<span class=\"nt\">&lt;/html&gt;</span>\n</code></pre></div>\n\n\n<h3>跋</h3>\n\n<p>以上，都是个人的风格。代码风格的讨论，是很容易引起口水的。最妥帖的原则应该是在已有项目中统一使用已有的规范，\n在新项目中则尽早确立。维持项目风格的一致性，才是最重要的，其余只是口水。</p>\n",
            "$": {
              "type": "html"
            }
          }
        ]
      },
      {
        "title": [
          "守卫你的 Arch Linux"
        ],
        "link": [
          {
            "$": {
              "href": "http://cyj.me/binary/linode-123"
            }
          }
        ],
        "updated": [
          "2013-03-06T00:00:00-08:00"
        ],
        "id": [
          "http://cyj.me/binary/linode-123"
        ],
        "content": [
          {
            "_": "<p>前不久，在 <a href=\"http://www.linode.com/?r=68f426201eccec510039ab0c2b6e5f5624d28b02\">Linode</a>\n上租的 VPS 满一年，当初初始化服务器的时候，选择的发行版是 Arch Linux，本着一颗骚包且追新的心。\n中间遇到了不少坑，去年写过<a href=\"/binary/when-arch-linux-met-linode\">一篇文章记录</a>。</p>\n\n<h2>暴涨的流量</h2>\n\n<p>续费之后，跑在这台服务器上的<a href=\"http://luoo.net\">主打网站</a>突然流量暴涨，毫无理由的。\n我的被害妄想症又冒出来，猜测是不是专门有人盯着这种续费了的 Linode 下手，耗光当月流量、拖垮服务器之类。\n幸好醒悟得比较快，开始动手排查，并最终解决了问题，以下是过程。</p>\n\n<p>首先看的是 <code>/var/log/auth.log</code>，看有否可疑的 SSH 访问，结果看到不少人在暴力破解 root 账号，\n每秒请求一次的那种，温水煮青蛙的方式。幸好，没看到成功的。</p>\n\n<p>然后看了看 <code>/var/log/vsftpd.log</code>，看看 FTP 这边厢怎么样，结果同样看到不少人在暴力破解账号，\n猜测了几个用户名在不停地试，有一个用户名猜中了。再次庆幸，没看到成功的。</p>\n\n<p>至此，流量暴涨的原因仍未找到，在暴涨的这几天里，流量高得诡异的阶段与以往网站访问高峰期基本符合，\n所以，两个猜测：1）网站真的愈发知名了，越来越多的人再用；2）有人搞了一堆肉机在搞破坏，只要肉机一开机，\n就不停地访问这个网站。</p>\n\n<p>多猜无用，看看 <code>/var/log/nginx/access.log</code> 文件一探究竟。发现几条很诡异的：</p>\n\n<pre><code>222.214.74.145 - - [05/Mar/2013:11:11:19 +0000] \"GET / HTTP/1.1\" 200 75152 \"-\" \"\"\nNSPlayer/12.00.7600.16597 WMFSDK/12.00.7600.16597\"\n</code></pre>\n\n<p>这种访问，每秒都有好多条，日志被刷出好几G（这里和 cronie 没有跑起来，logrotate 没能表现一下也有关）。\n总之打开日志当场吓尿，NSPlayer 究竟何方神圣？为何一秒内都要访问好几次？而且只请求 <code>/</code>，\n首页相关的资源却全不放过？Google 一番，都说是 Windows Media Player，这货还是我用的第一个 PC\n上的音乐播放器哇，怎么今时今日，会做这种令人不齿之事？</p>\n\n<p>没时间一个个解惑，当务之急，是把这种请求过滤掉，不然，3月才过去5天，35% 的流量已经消耗掉了，\n到时只能喝西北风去。</p>\n\n<p>找准关键词，nginx ban by http agent，Google 一番即可找到类似示例：</p>\n\n<pre><code>location / {\n    if ($http_user_agent ~* (NSPlayer)) {\n        access_log off;\n        return 200;\n    }\n}\n</code></pre>\n\n<p>把这一段配置，放到 <code>/etc/nginx/nginx.conf</code> 或者你切分好的配置文件里，<code>server</code> 章节里面，\n然后 <code>systemctl reload nginx</code> 或者 <code>rc.d reload nginx</code> 即可。</p>\n\n<p>这段代码的意思是，如果用户代理（HTTP User-Agent）是 NSPlayer，就直接返回一个空的 200，\n并不记录在访问日志里。也可以把 200 换成 403 之类，更加严厉一些。</p>\n\n<h2>如何应对暴力破解 SSH</h2>\n\n<p>nginx 的访问日志终于清净了，可是 vsftpd 和 sshd 的，都还很恼人，破坏分子什么的最讨厌了。\n对于 sshd，有个很简单直接的办法，就是在 <code>/etc/ssh/sshd_config</code> 里，把这两项改成 no：</p>\n\n<pre><code>PasswordAuthentication no\nPermitEmptyPasswords no\n</code></pre>\n\n<p>并把自己电脑上 ssh 公钥丢到服务器上 <code>~/.ssh/authorized_keys</code> 里。确定自己可以免密码登录后，\n果断 <code>systemctl reload sshd</code>。如果你配对的私钥是有密码保护的，可以用 ssh-agent 减轻一些负担，\n请看旧文 <a href=\"/binary/ssh-agent\">ssh-agent</a>。</p>\n\n<p>然后，对付暴力破解 FTP 的，有两个办法，1）换端口，不用默认的 21，2）IP 黑名单或者白名单。前者，\n暂时不考虑，我尝试的是后者，因为最早接触的，就是 /etc 下那两个文件 <code>/etc/hosts.allow</code> 和\n<code>/etc/hosts.deny</code>，可惜一直未曾一亲芳泽，没有真正接触过。</p>\n\n<p>搜索相关资料一番，大惊失色，Arch Linux 上的 vsftpd 竟然不支持 <code>/etc/hosts.deny</code>，\n因为后者依赖 tcp_wrappers 模块，而它因为年代久远已经被 Arch 的维护者们果断抛弃了，\n<a href=\"http://archlinux.2023198.n4.nabble.com/dropping-tcp-wrapper-support-td4666245.html\">在该文中</a>，\n维护着说，实在想不到有什么是 tcp_wrappers 能做，而 iptables 不能做的。</p>\n\n<p>于是，找了一些 iptables 的资料，和封特定 ip 的简单用法，写了一段小脚本，从 hosts.deny\n文件读取需要封禁的 IP，自动加到 iptables 里头去：</p>\n\n<div class=\"highlight\"><pre><code class=\"bash\"><span class=\"c\">#!/bin/zsh</span>\n<span class=\"k\">for </span>ip in <span class=\"sb\">`</span>cat /etc/hosts.deny | sed -e <span class=\"s1\">&#39;s/^[a-z]*: //&#39;</span><span class=\"sb\">`</span>; <span class=\"k\">do</span>\n<span class=\"k\">  </span>iptables -I INPUT -s <span class=\"nv\">$ip</span> -j DROP\n<span class=\"k\">done</span>\n</code></pre></div>\n\n\n<p>做法很简单，要封某个 IP，就在 iptables 里加一条记录 <code>iptables -I INPUT -s bad.i.p.addr -j DROP</code>，\n所有提交（-I INPUT）到这台机器、来源是恶意 IP（-s bad.i.p.addr) 的，一律跳转到 DROP，\n即丢弃这些请求包，包括（TCP 和 UDP）协议。更详细的做法，应该说明一下具体什么协议和端口，不然，\n这条容易误杀，但先不管这么多了，iptables 还用不熟。</p>\n\n<p>这是动态加的规则，重启 iptables 会没掉的，<code>iptables-save &gt; /etc/iptables/iptables.rules</code>\n保存一下。</p>\n\n<p>以上，就是我做的救火工作，希望有空可以把这些补充完善，能够自定义一些合理的预警机制，单单依靠 Linode，\n是不太够的。</p>\n\n<h3>2013-03-08 补充</h3>\n\n<p>感谢 @hugozhu 的分享，使用一段简单的 Bash 脚本，就可以从日志文件自动分析，无需手工维护\nhosts.deny 文件：</p>\n\n<div class=\"highlight\"><pre><code class=\"bash\"><span class=\"c\">#!/bin/bash</span>\n<span class=\"nv\">last_ip</span><span class=\"o\">=</span><span class=\"s2\">&quot;&quot;</span>\ntail -f /var/log/vsftpd.log | <span class=\"k\">while </span><span class=\"nb\">read </span>LINE; <span class=\"k\">do</span>\n<span class=\"o\">{</span>\n    <span class=\"k\">if</span> <span class=\"o\">[[</span> <span class=\"s2\">&quot;${LINE}&quot;</span> <span class=\"o\">=</span>~ <span class=\"s2\">&quot;FAIL LOGIN&quot;</span> <span class=\"o\">]]</span>; <span class=\"k\">then</span>\n<span class=\"k\">        </span><span class=\"nv\">ip</span><span class=\"o\">=</span><span class=\"s2\">&quot;$(echo ${LINE} | awk &#39;{ip=$NF;gsub(/\\&quot;/,&quot;&quot;,ip);print ip}&#39;)&quot;</span>\n        <span class=\"k\">if</span> <span class=\"o\">[[</span> <span class=\"s2\">&quot;$last_ip&quot;</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;$ip&quot;</span> <span class=\"o\">]]</span>; <span class=\"k\">then</span>\n<span class=\"k\">             </span><span class=\"nb\">echo</span> <span class=\"s2\">&quot;block $ip&quot;</span>\n             iptables -A INPUT -s <span class=\"s2\">&quot;$ip&quot;</span> -j DROP\n        <span class=\"k\">fi</span>\n<span class=\"k\">        </span><span class=\"nv\">last_ip</span><span class=\"o\">=</span><span class=\"nv\">$ip</span>\n        <span class=\"nb\">echo</span> <span class=\"nv\">$LINE</span>\n    <span class=\"k\">fi</span>\n<span class=\"o\">}</span>\n<span class=\"k\">done</span>\n\n<span class=\"c\"># nohup /root/bin/guard.sh &gt; /var/log/guard.log 2&gt;&amp;1 &amp;</span>\n</code></pre></div>\n\n",
            "$": {
              "type": "html"
            }
          }
        ]
      },
      {
        "title": [
          "The Way Life's Meant to Be"
        ],
        "link": [
          {
            "$": {
              "href": "http://cyj.me/life/the-way-lifes-meant-to-be"
            }
          }
        ],
        "updated": [
          "2013-02-25T00:00:00-08:00"
        ],
        "id": [
          "http://cyj.me/life/the-way-lifes-meant-to-be"
        ],
        "content": [
          {
            "_": "<p>今天下午是生平头一次当面试官，面试三个外包的实习生，第一个我开场，古西风接手，后面的就是他主要提问，\n我补充问题顺便记录了。来面试的同学，专业对口，但能力一般，走上前端工程师这条路，\n投名状都是一次为期三月培训，一年不到的工作经验，把 PSD 转成 HTML 占了绝大部分，而这种工作，\n已经有很不少的网站和公司在将它自动化了。</p>\n\n<p>外包的同学，基础比较差，不应该期望太高，古西风告诉我，更应该看重的是他的学习能力和是否有此意愿。\n深以为然，然而看到诸多迈入前端大门的弟弟妹妹们茫然不知所以，在前端知识层面已如此丰富，\n技术日新月异的今时今日，反而打不好基础，让我很困扰。</p>\n\n<h3>追求</h3>\n\n<p>所以我啰嗦几句，讲讲我的看法。本文的标题是《The Way Life's Meant to Be》，没错，\n我在讨论绳命的意义，但不弄玄虚，这个大题目对我来说有个简单的答案，就是电影《当幸福来敲门》，\n它的英文名字叫做《The Pursuit of Happiness》，出处是美帝国主义的《独立宣言》。\n所以我的看法很简单，人应该去追求幸福，而程序员的幸福，群体上是被认同，自我实现上说，是搞定牛逼的产品。</p>\n\n<p><img src=\"http://pic.yupoo.com/yicai-cyj_v/CFwJ8QRG/WaQSh.jpg\" alt=\"追求\" /></p>\n\n<p>而于前端工程师而言，这两方面其实都不难达成。我们的代码最容易交流，它们天生就在网络上流窜，\n你的代码清楚、简洁，像 jQuery 般挠到了别人的痒处，你便功成名就，jQuery 的作者 John Resig，\n早已不在 jQuery 项目中担任十分核心的角色，但这个项目成长了起来，甚至形成了自己的基金会，\n与 Qunit、TestSwarm 一起成为一系列的前端解决方案：</p>\n\n<ul>\n<li>jQuery</li>\n<li>jQuery UI</li>\n<li>jQuery Mobile</li>\n<li>Sizzle</li>\n<li>QUnit</li>\n<li>TestSwarm</li>\n<li>plugins.jquery.com</li>\n</ul>\n\n\n<p>它是同僚认同与自我实现的完美结合。</p>\n\n<h3>日省吾身</h3>\n\n<p>但这跟我有什么关系？我只要把它用好就行了哇，而且，严格说，我只要把 KISSY 用好就行了，\n毕竟我要做的只是网页，它们只是一堆视觉元素与交互的结合而已，可能我需要学习一些奇技淫巧来完成我的日常工作，\n但它们终归是有穷尽的，对吧？</p>\n\n<p>假如你希望自己成为前端工程师，而非切图的，则上述态度即大缪。不过我不想啰嗦什么知其然知其所以然之类的话，\n我想说的是本着追求幸福的目的，不管我们从事的是什么工作，都该要求自己多一些些，是的我切图切得很好，\n我完美地实现了视觉设计师的要求，<code>position: absolute</code> 定位得无比顺溜，<code>KISSY.io</code>\n请求发得天衣无缝，甚至我的 HTML 都是语义化的，我的 CSS 还用到了面向对象的思想，但我仍然要提醒自己，\n哎呀我的代码还没进版本控制系统，我的交互组件代码写得七零八落每次都得从一个地方拷到另一个地方再删删改改，\n我的 CSS 里选择器写得好像不太好，为什么页面重绘时会这么卡？</p>\n\n<p>这才是我认为的前端工程师的追求，我们实现需求，我们也实现自我价值，而我们对自己的要求，\n永远都该超过老板对你自己的期望，如此才能让你的老板发现，士别三日当刮目相看。</p>\n\n<p>别误会，这不是一篇劝你做牛做马当篇好员工的文章，只是希望既已搞技术的你，能有正确的做事态度，能有进步。</p>\n\n<h3>书单</h3>\n\n<p>然后是书单，列一些我看过的没看过的前端技术书籍，希望大家可以少在二手信息里绕圈子。</p>\n\n<p>HTML 与 CSS，可以看 <a href=\"http://htmldog.com\">HTML Dog</a>。</p>\n\n<p>对 HTML，别管 HTML5 是什么东西，先问自己三个问题：</p>\n\n<ol>\n<li>这些标签的意思</li>\n<li>它们分别适合用来标记什么内容</li>\n<li>它们的英文全名叫什么（这对帮助你记忆很重要）</li>\n</ol>\n\n\n<p>然后，把 HTML 提到 Web 层面，补充知识：</p>\n\n<ol>\n<li>如何不用 JavaScript 往后台提交数据？</li>\n<li>URL 具体是什么意思，它有几个组成部分，参数该如何传递？</li>\n<li>从你在浏览器中输入 <a href=\"http://etao.com\">http://etao.com</a>，到一淘网页展示，这个过程发生了什么？</li>\n</ol>\n\n\n<p>CSS，需要知道如下知识点：</p>\n\n<ol>\n<li>盒子模型（box model），padding、border、margin 在此模型里的先后顺序。</li>\n<li><a href=\"http://www.barelyfitz.com/screencast/html-training/css/positioning/\">绝对定位</a></li>\n<li><a href=\"http://css-tricks.com/all-about-floats/\">浮动定位</a>，为什么以及如何\n<a href=\"http://www.quirksmode.org/css/clearing.html\">清除浮动</a>。</li>\n<li>了解上边俩，就容易理解固定与流动式布局，以及什么是 <a href=\"http://960.gs/\">栅格</a></li>\n<li><a href=\"http://josh.github.com/css-explain/\">选择器</a>，理解选择器优先级。</li>\n</ol>\n\n\n<p>接着是 JavaScript，今天面试的时候，有个小伙子说他学习前端知识都是通过\n<a href=\"http://w3cfuns.com\">w3cfuns.com</a>，刚好那儿有张图片，我借过来用一下，算是奉劝不想认真学\nJavaScript 的诸位，或许你们该重新考虑一下职业规划：</p>\n\n<p><img src=\"http://pic.yupoo.com/yicai-cyj_v/CFwKxp43/Qj6Tc.jpg\" alt=\"不会 JavaScript 能混前端么？\" /></p>\n\n<p>学习 JavaScript，如下几本非常值得推荐：</p>\n\n<ol>\n<li><a href=\"http://book.douban.com/subject/3590768/\">JavaScript 语言精粹</a></li>\n<li><a href=\"http://book.douban.com/subject/1461786/\">DOM Scripting</a></li>\n<li><a href=\"http://book.douban.com/subject/10733304/\">基于 MVC 的 JavaScript Web 富应用开发</a></li>\n<li><a href=\"http://book.douban.com/subject/3346905/\">Professional JavaScript for Web Developers</a></li>\n<li><a href=\"http://book.douban.com/subject/3329540/\">JavaScript 设计模式</a></li>\n</ol>\n\n\n<p>刚上路的同学，看掉前两本就可以了，想进阶的同学，把剩下的看掉吧。还有本很有名而且超级厚的书，\n叫做犀牛书，《<a href=\"http://book.douban.com/subject/10549733/\">JavaScript 权威指南</a>》，\n非常厚脸皮地说，我没有看过，自行判断吧。</p>\n\n<h3>技术爱好者</h3>\n\n<p>学无止境的，搞定了 JavaScript，用熟了 jQuery、KISSY 之流，我们可能仍然发现做一些事情力不从心。\n模块化到底是什么意思？大牛们扯的 AMD、CMD 又是什么，不会跟美帝国主义的导弹防御系统（TMD）有啥联系吧？\n听说后端有个东西叫做 NodeJS，什么无阻塞、事件化的 IO，好像很厉害诶？</p>\n\n<p>怎么突然有人说<a href=\"http://mislav.uniqpath.com/2010/05/semicolons/\">分号</a>\n<a href=\"http://blog.izs.me/post/2353458699/an-open-letter-to-javascript-leaders-regarding\">不需要用了</a>？\n那个看起来很离经叛道的 <a href=\"http://coffeescript.org/\">CoffeeScript</a> 到底是干啥用的？\n哇，原来还有 <a href=\"http://sass-lang.com/\">SASS</a>、<a href=\"http://lesscss.org\">Less</a> 这种东西，\n终于不用重复写 <code>.products-bd .product .title span</code> 了。</p>\n\n<p>然后突然又有人说，回调写起来好讨厌，类似 jQuery 里的 <code>$.get</code>、<code>$.ajax</code>，每个 API 的参数还不一样，\n它们<a href=\"http://documentup.com/kriskowal/q/\">得统一起来</a>。</p>\n\n<p><code>Brick.prototype.strike = function() {}</code> 这么写面向对象好像也很有些累啊，\n既然 JavaScript 原生的这么挫，我们应该有个<a href=\"http://aralejs.org/class/\">自己的解决办法</a>。</p>\n\n<p>突然又有人说，我们的网页早就不仅仅是几次异步请求，和黄黄的消息提示框就能摆平的了，看看 gmail 和\nGoogle Calendar 之流吧，它们更像是软件而非网页，要有\n<a href=\"http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller\">MVC</a>！\n于是，我们又有了 <a href=\"http://backbonejs.org/\">Backbone</a>，\n有了 <a href=\"http://magixjs.github.com/doc/\">Magix</a>。</p>\n\n<p>等等，这个时候你该会有个问题了，<strong>为什么大牛们总能够搞出各种五花八门，让前端世界日新月异呢</strong>？</p>\n\n<p>因为创造出这些满目玲琅，决定了整个前端生态的人们，他们都是真正的技术爱好者，他们的眼界，\n不仅仅是 HTML、CSS、JavaScript 这一亩三分地，他们知道除了我们已经有的这些之外，还有更好的。\n于是，任何对这三项技术的补完，基于这三项技术的抽象，只要它们提高了前端开发的效率，就完成了一次创新。\n而绝大多数时候，这些创新都不是从头开始的，我们可以在许许多多领域找到它们的影子。</p>\n\n<p>所以，因为<strong>眼界</strong>。</p>\n\n<p>而拓宽眼界的最好办法，就是成为一个真正的技术爱好者，喜欢探索、发现，了解计算机的技术演化历史。\n熟悉本职工作之外的语言；接触过除了 Windows 之外的操作系统；了解 GBK、UTF-8 这些编码是怎么回事，\n什么是 Unicode，它们是要解决什么问题；知道什么是命令行，正则表达式从何而来；甚至了解什么叫语法树，\n有限状态机又是什么货色，等等。</p>\n\n<p>学习它们，对你的年终评审可能没有半毛钱用处，但是它们能够拓宽你的眼界，直到有一天，\n突然有个合适的问题出现在你眼前，你拿出自己的工具箱，干干脆脆地结果它。</p>\n\n<p>如此，方成大牛。</p>\n\n<p>最后给大家推荐一部电影，它以 Linux 的演化史为主线，串出多位计算机史上影响深远的任务，\n假如你在学习、进步的路上需要技术大拿作为偶像，不妨从中挑选。这部电影叫做\n《<a href=\"http://movie.douban.com/subject/1437389/\">操作系统革命</a>》。</p>\n\n<h3>烂尾</h3>\n\n<p>心灵鸡汤型的文章，我写得很差，大家凑合一看，有错漏的地方，请务必告诉我，贻笑大方不妨，\n遗臭万年可就压力大了。</p>\n",
            "$": {
              "type": "html"
            }
          }
        ]
      },
      {
        "title": [
          "温故 2011（下）"
        ],
        "link": [
          {
            "$": {
              "href": "http://cyj.me/life/digging-2011-ii"
            }
          }
        ],
        "updated": [
          "2013-02-03T00:00:00-08:00"
        ],
        "id": [
          "http://cyj.me/life/digging-2011-ii"
        ],
        "content": [
          {
            "_": "<p><img src=\"http://pic.yupoo.com/yicai-cyj_v/CC3tj0AX/nR7dj.jpg\" alt=\"绿茶餐厅\" /></p>\n\n<p>7月8日，绿茶餐厅。头一回去，貌似是等位时间相对少的一次，但也长到够我到外边溜达一圈，拍下这张照片了。\n杭州的餐厅，但凡有点名气的，都很火爆，等位的单子上动辄前面还有百来号人。</p>\n\n<p><img src=\"http://pic.yupoo.com/yicai-cyj_v/CC3tm3LS/9aIgr.jpg\" alt=\"iConference\" /></p>\n\n<p>7月10日，iConference 上的讲台。</p>\n\n<p><img src=\"http://pic.yupoo.com/yicai-cyj_v/CC3tnePh/ppCpg.jpg\" alt=\"D3115\" /></p>\n\n<p>7月21日，坐动车回家，两天后这列 D3115 动车被后车 D301\n<a href=\"http://zh.wikipedia.org/wiki/2011%E5%B9%B4%E7%94%AC%E5%8F%B0%E6%B8%A9%E9%93%81%E8%B7%AF%E5%88%97%E8%BD%A6%E8%BF%BD%E5%B0%BE%E4%BA%8B%E6%95%85\">追尾</a>，\n震惊全国。</p>\n\n<p><img src=\"http://pic.yupoo.com/yicai-cyj_v/CC3tmPv6/SevTJ.jpg\" alt=\"落成\" /></p>\n\n<p>7月22日，老家新房落成，远房表哥是厨师，会做好看的盘花。</p>\n\n<p><img src=\"http://pic.yupoo.com/yicai-cyj_v/CC3tnADT/XAtX7.jpg\" alt=\"共清团\" /></p>\n\n<p>8月5日，共清团活动，全部门出动，拿着垃圾袋和夹子分三路清理西湖，我选择了苏堤。工作日的早晨，\n苏堤静谧安详，有人活动筋骨，有人支钓竿钓鱼。</p>\n\n<p>上图，是一辆有态度的电瓶车。银色浓眉，小圆眼睛，大圆鼻子。</p>\n\n<p><img src=\"http://pic.yupoo.com/yicai-cyj_v/CC3tqiZI/5xYjE.jpg\" alt=\"灵隐寺\" /></p>\n\n<p>8月21日，父母来杭，同去灵隐寺。爸爸说，温州鼓词里头，好多故事背景里都有灵隐寺。</p>\n\n<p><img src=\"http://pic.yupoo.com/yicai-cyj_v/CC3trrpM/cv7YJ.jpg\" alt=\"西溪湿地\" /></p>\n\n<p>8月27日，表弟也来了，就近又去了趟西溪湿地，夏日炎炎，找个荫凉，在木船上吃鱼，其实感觉也不赖。</p>\n\n<p><img src=\"http://pic.yupoo.com/yicai-cyj_v/CC3tsILH/1XCJ9.jpg\" alt=\"好大一棵香樟树\" /></p>\n\n<p>同天，西溪湿地里一棵香樟树。年初时在安徽看到的那棵比这还要大一圈。偷听旁边的导游讲故事，\n说老老年间的人们啊，如果生了女儿，就在门口种一棵香樟，在屋口头埋一缸女儿红，等女儿大了，嫁作人妇，\n就砍了这棵香樟树，做了家具当嫁妆。</p>\n\n<p>那缸女儿红，就挖出来，让老丈人自个喝了吧。</p>\n\n<p><img src=\"http://pic.yupoo.com/yicai-cyj_v/CC3tuIYr/JjEby.jpg\" alt=\"乌镇\" /></p>\n\n<p>9月11日，中秋小假，时间说长不长说短不短，于是去古镇，因为都挺近而且没去过。先去了南浔，兜兜转转一下午，\n觉得不够过瘾，于是去乌镇，俩地方都在湖州、嘉兴交界处。</p>\n\n<p>到了乌镇已是晚上，灯火阑珊。</p>\n\n<p><img src=\"http://pic.yupoo.com/yicai-cyj_v/CC3turUu/IK6av.jpg\" alt=\"大伯订婚\" /></p>\n\n<p>9月17日，“大伯”订婚，和九九、老鸭一道回家。窗户下的这条狗是老婆送的，\n电影《<a href=\"http://movie.douban.com/subject/4709904/\">前度</a>》里曾国祥开的出租车上那只。</p>\n\n<p><img src=\"http://pic.yupoo.com/yicai-cyj_v/CC3twpq5/Z6dH1.jpg\" alt=\"滨江\" /></p>\n\n<p>10月1日，在老鸭家，忘了小区名字了，只觉繁华。</p>\n\n<p><img src=\"http://pic.yupoo.com/yicai-cyj_v/CC3tvSxr/wlX2N.jpg\" alt=\"老家新房楼顶\" /></p>\n\n<p>10月4日，在老家五层小楼顶上看家乡，风雨后能见度很高。</p>\n\n<p><img src=\"http://pic.yupoo.com/yicai-cyj_v/CC3txyeV/RWC2h.jpg\" alt=\"之江\" /></p>\n\n<p>10月16日，之江校区。这里的野猫真多啊…… 那天还是去的绿茶餐厅吃饭，特地打包吃剩的鱼来喂。</p>\n\n<p>此处旧洋房颇多，鲜有活人出没，诡异莫名。</p>\n\n<p><img src=\"http://pic.yupoo.com/yicai-cyj_v/CC3txgJV/mb4i0.jpg\" alt=\"烟花节\" /></p>\n\n<p>10月23日，杭州市烟花大会，老鸭当天生日，叼着烟看烟花，应该很开心。</p>\n\n<p><img src=\"http://pic.yupoo.com/yicai-cyj_v/CC3tyemn/mJJbz.jpg\" alt=\"老婆在看烟花\" /></p>\n\n<p>同天，老婆在看烟花，说来惭愧，烟花大会这么多年，从来没进去看过。</p>\n\n<p>p.s. 看到这图，千万别想到那句“她比烟花寂寞”。</p>\n\n<p><img src=\"http://pic.yupoo.com/yicai-cyj_v/CC3tzmyr/U4i6s.jpg\" alt=\"沈晨结婚\" /></p>\n\n<p>11月12日，大学室友沈晨结婚，第二次去湖州。总觉得太湖南边一圈的人，都很有些文气，连地名都透露着格调。</p>\n\n<p><img src=\"http://pic.yupoo.com/yicai-cyj_v/CC3tzUzO/iYEAT.jpg\" alt=\"老瑞中\" /></p>\n\n<p>11月21日，白羽、薛丰订婚，筵席散罢，和蔡老一块去老瑞中看看，景观、喷水池、天文台都在，物是人非尔耳。</p>\n\n<p>这是去往西岘（应为石字边，找不到这个字）山的路边围栏上一只石狮子，的菊花。</p>\n\n<p><img src=\"http://pic.yupoo.com/yicai-cyj_v/CC3tAKF9/5cyF7.jpg\" alt=\"秋日里，杭州花圃\" /></p>\n\n<p>11月26日，秋日里，阳光灿烂，和老婆、丈母娘一道去杭州花圃。</p>\n\n<p><img src=\"http://pic.yupoo.com/yicai-cyj_v/CC3tBsUL/wwwGk.jpg\" alt=\"杨公堤旁\" /></p>\n\n<p>同天，曲院风荷附近一处水塘里的枫叶，霎那芳华。</p>\n\n<p><img src=\"http://pic.yupoo.com/yicai-cyj_v/CC3tEKaB/54tsE.jpg\" alt=\"早晨\" /></p>\n\n<p>12月23日，早晨的古荡，左手边两幢通体发亮的骚包房子，叫做黄龙时代广场，其中右手边那幢是支付宝的大楼。</p>\n\n<p><img src=\"http://pic.yupoo.com/yicai-cyj_v/CC3tHg3b/e3Ueu.jpg\" alt=\"万象城\" /></p>\n\n<p>12月24日，平安夜，万象城。一路堵过去，旁边一圈马路全停满，洋人节日，怎么这么多人过。</p>\n\n<p><img src=\"http://pic.yupoo.com/yicai-cyj_v/CC3tIoJr/jz04e.jpg\" alt=\"画小画\" /></p>\n\n<p>12月29日，继续画小画。后来到 2012 年下半年，几乎不再画，不再摸吉他，甚至不再耐心阅读，\n年中的大菠萝和年尾的工作占据了我绝大部分时间，忏悔。</p>\n\n<p>以上，温故 2011。</p>\n\n<p>这篇文章写于 2013年2月3日，现在往回看，原来我每一年都好忙。</p>\n",
            "$": {
              "type": "html"
            }
          }
        ]
      },
      {
        "title": [
          "温故 2011（上）"
        ],
        "link": [
          {
            "$": {
              "href": "http://cyj.me/life/digging-2011-i"
            }
          }
        ],
        "updated": [
          "2013-02-03T00:00:00-08:00"
        ],
        "id": [
          "http://cyj.me/life/digging-2011-i"
        ],
        "content": [
          {
            "_": "<p>前些天导入了 7D 购置以来拍的所有照片，翻看过往，不胜唏嘘。2011 是个尴尬年份，没有世界杯，没有欧洲杯，\n前边 2012 又快到了，也不知卓明谷那几条船造得如何。在这忐忑中走向世界末日的年岁，我拍了好多，看了好多，\n在此小结，让我们温故 2011。</p>\n\n<p><img src=\"http://pic.yupoo.com/yicai-cyj_v/CC2M1knz/Hk2Fa.jpg\" alt=\"广告组聚会\" /></p>\n\n<p>元月下旬，广告组，当时还叫做广告与搜索发展部-UED，力主营销体验设计（MED），在文一路一家茶室聚会，\n众人嗑瓜子吃零食玩刀塔打扑克，临了还抽了个奖，充实非常。</p>\n\n<p>两年后，几经改换门庭，合并拆分，他们中的许多人仍然在一起，他们中的其他人仍然是朋友。</p>\n\n<p>好希望可以再见啊。</p>\n\n<p><img src=\"http://pic.yupoo.com/yicai-cyj_v/CC2M1OSi/J730H.jpg\" alt=\"黄昏\" /></p>\n\n<p>冬日黄昏，聚会当天，分别之后我在去往玉泉校区的路上，拍下天目山路东往西古翠路口红绿灯的照片，\n左手边的建筑，似是七院。</p>\n\n<p><img src=\"http://pic.yupoo.com/yicai-cyj_v/CC2M2fo6/dMyeV.jpg\" alt=\"华星科技大厦\" /></p>\n\n<p>他们说华星科技是阿里福地，我印象最深的只是局促的地下车库、9层楼梯和邻聚里。物业说，想包车位啊，\n没得包咯。在华星科技的日子里，我们一个月一个月地光顾了蒸功夫、台湾牛肉面、秋叶小丁、八月美食园，\n以及据说现在厕所在它对面的两岸咖啡的红京鱼（此言为缪，与两岸咖啡共享厕所的是缩水后的许府牛杂，\n但我写出来就不知道该怎么改对了所以实在不好意思我不改了请包涵）。</p>\n\n<p><img src=\"http://pic.yupoo.com/yicai-cyj_v/CC2M3s0U/11jhSF.jpg\" alt=\"HFC 聚会\" /></p>\n\n<p>百淘结束后数月，1月26日，HFC 吃过许府牛杂，前往好乐迪卡拉永远 ok。千色色的小甜给我们唱《爱情买卖》，\n印象难以磨灭。疲惫的天河拉着万老师、谢晖他们说，喝酒。</p>\n\n<p><img src=\"http://pic.yupoo.com/yicai-cyj_v/CC2M3Uev/2vwjp.jpg\" alt=\"除夕\" /></p>\n\n<p>怀念 2012 里我说虎年除夕，犯了个错误，2011 年的才是。虎年除夕，乡里挂满灯笼与彩灯，迎接我的本命年，\n乡长您贵姓，等我有票了一定投给你。</p>\n\n<p>图片里只有一盏，很孤单吧，那是因为有个小年青，没有脚架非要手持相机拍夜景，好多灯红酒绿树影婆娑的照片，\n都因为实在太糊了躺在垃圾桶里。</p>\n\n<p><img src=\"http://pic.yupoo.com/yicai-cyj_v/CC2M4FNc/78W34.jpg\" alt=\"竹子黄了\" /></p>\n\n<p>大年初一登山拜佛，山上的竹子黄了好多，它们在说，2011 年初，不太好过。</p>\n\n<p>正是在这一天，我翻过了儿时抬头望过、疑问过无数次的那座山，证实了我妈的答案，真的，山的那边，还是山，\n那里还住着人家，白云深处，五云山。</p>\n\n<p><img src=\"http://pic.yupoo.com/yicai-cyj_v/CC2M5YV3/gFUwB.jpg\" alt=\"生命之树\" /></p>\n\n<p>2月5日，走亲戚，奶奶的老家。那地方叫东坑，有座山叫东坑山，风景宜人。这两棵，我管它们叫生命之树。</p>\n\n<p><img src=\"http://pic.yupoo.com/yicai-cyj_v/CC2M68TD/U2ARd.jpg\" alt=\"金鸡山\" /></p>\n\n<p>据说这是温州东部最高的山，正月初五，我们站在金鸡山顶上，吹着冷风迎接曙光。去得太早，漆黑，寒风呼啸，\n但天空太美，勾引我哆嗦着双手拍下无数熠熠星光。一个多小时后，东方红太阳升，只剩惊叹，竟有如此造化。</p>\n\n<p><img src=\"http://pic.yupoo.com/yicai-cyj_v/CC2M6Nt8/Ss5ZH.jpg\" alt=\"家朋\" /></p>\n\n<p>安徽家朋，与老板等人结伴出游，不慎加入了个中老年摄影旅行团，满车的单反长焦，还有老人家抓着一只莱卡 M9，\n但大家看到的油菜花仍然是一样的。</p>\n\n<p><img src=\"http://pic.yupoo.com/yicai-cyj_v/CC2M876V/zeZHU.jpg\" alt=\"杭州花圃\" /></p>\n\n<p>清明时节，春雨纷纷，4月5日，天气晴好，和老婆去杭州花圃，满眼都是新绿，满脑子那句“当春乃发生”，\n完全不知所谓，权当虽不明，但觉厉了。</p>\n\n<p><img src=\"http://pic.yupoo.com/yicai-cyj_v/CC2M99VW/Nu6Zt.jpg\" alt=\"太子湾\" /></p>\n\n<p>2011 年的太子湾，游人如织，但尚未成 2012 人潮人海之态势，草地还踩不秃，郁金香也没多少人会偷摘。</p>\n\n<p>4月10日，一支特立独行的郁金香。</p>\n\n<p><img src=\"http://pic.yupoo.com/yicai-cyj_v/CC2M8vjU/bjsSF.jpg\" alt=\"仙居服务区\" /></p>\n\n<p>4月30日，五一回家，头一回开车上高速，通过留下收费站，过匝道上绕城高速的那一刻，心如鹿撞。杭州交通，\n自然不会不给惊喜，赫然发现绕城高速堵车了。</p>\n\n<p>图片摄于仙居服务区，那一片山，真真好看。</p>\n\n<p><img src=\"http://pic.yupoo.com/yicai-cyj_v/CC2M94jO/dIJSJ.jpg\" alt=\"建新房\" /></p>\n\n<p>家里的老房子拆了，改建，春节时曾看过准许改建的批文，公章密密麻麻。农村里建房，都是自己买材料，\n自己找工人。工人往往都是亲戚，有个弟弟是木匠，表弟是泥水工，某某某又是一个好劳力，诸如此类。\n这类房，样式单一，模样不讨喜，住着安心。</p>\n\n<p><img src=\"http://pic.yupoo.com/yicai-cyj_v/CC2Mb67o/SDy5t.jpg\" alt=\"独自上路\" /></p>\n\n<p>5月2日，单人单车，一路向北。</p>\n\n<p><img src=\"http://pic.yupoo.com/yicai-cyj_v/CC2Mcc7C/c4JDC.jpg\" alt=\"西溪湿地\" /></p>\n\n<p>古往，乾隆爷说，西溪且留下；今来，冯小刚说，非诚，勿扰。于是旧时渔场被重新划分，建筑被修旧如旧，\n典故传说被考证，我们突然又有了一个风景名胜，它的名字叫做西溪湿地。</p>\n\n<p>按我舅舅话说，就是一点水一点草，跟彭埠没一点分别啊……</p>\n\n<p>5月7日，坐在摇橹船上，岸边全是这些白花，水道狭小，曲径通幽，上面这些吐槽，九霄云散。</p>\n\n<p><img src=\"http://pic.yupoo.com/yicai-cyj_v/CC2Mbymd/N6M6w.jpg\" alt=\"西溪湿地的摇橹船\" /></p>\n\n<p>这船不便宜，好像是 200元/次，4人组团租，比较划算。</p>\n\n<p><img src=\"http://pic.yupoo.com/yicai-cyj_v/CC2MdPZw/rChyd.jpg\" alt=\"开放日\" /></p>\n\n<p>初次经历阿里开放日，当天公司里突然多了好多比比仔，好多阿猫阿狗，好多人气。</p>\n\n<p>5月10日，墨瞿的潮狗，莫西干头有木有。</p>\n\n<p><img src=\"http://pic.yupoo.com/yicai-cyj_v/CC2MdgmL/Uu8gA.jpg\" alt=\"集体婚礼\" /></p>\n\n<p>同一天，还是阿里巴巴集体婚礼，尾随到产业园，看到吴妈在讲话。</p>\n\n<p><img src=\"http://pic.yupoo.com/yicai-cyj_v/CC2Me9Ca/HI18I.jpg\" alt=\"枫华府第\" /></p>\n\n<p>5月22日，老婆的公寓转租空窗期，拍几张屋外夜景，金光大道。</p>\n\n<p><img src=\"http://pic.yupoo.com/yicai-cyj_v/CC2MfM0S/Bt7sp.jpg\" alt=\"玉泉草地音乐节\" /></p>\n\n<p>5月28日，玉泉草地音乐节。有许多好听的歌，有不少好看的妹纸，有回不去的4年时光。</p>\n\n<p><img src=\"http://pic.yupoo.com/yicai-cyj_v/CC2MhhAo/DX5Rh.jpg\" alt=\"华星时代\" /></p>\n\n<p>6月23日，对面的华星时代广场。这张照片真不适合与上面那张放一起看，上一秒我们唱歌我们跳舞，我们欢声笑语，\n下一秒我们痛苦我们迷惘，我们需求不断。啊不对，我得积极主动乐观向上，生活多姿多彩，理想与抱负不宜文艺，\n工作给我们以自由，装文艺青年满足我等之虚荣，两不相误。</p>\n\n<p>2011 上半部，到此结束。</p>\n",
            "$": {
              "type": "html"
            }
          }
        ]
      },
      {
        "title": [
          "在 RHEL 5 上安装 CouchDB"
        ],
        "link": [
          {
            "$": {
              "href": "http://cyj.me/binary/couchdb-rhel-5"
            }
          }
        ],
        "updated": [
          "2013-01-30T00:00:00-08:00"
        ],
        "id": [
          "http://cyj.me/binary/couchdb-rhel-5"
        ],
        "content": [
          {
            "_": "<p>公司的服务器，跑的操作系统都很老，一水的\n<a href=\"http://en.wikipedia.org/wiki/Red_Hat_Enterprise_Linux\">RedHat Enterprice Linux</a>，\n而且是 5，更加令人发指的是 yum 源陈旧得一塌糊涂。</p>\n\n<p>于是安装新鲜玩意就只剩一个选择，源代码安装。对于我等没有正经接触过 Linux 编程的人来说，\n这种安装方式之奇诡，不亚于关掉大灯开夜车，只求佛祖保佑。而在 RHEL 5 上源代码安装 CouchDB 尤甚，\n以下便是昨日之安装过程。</p>\n\n<p>tl;dr 请直接跳到末尾。</p>\n\n<p>像所有理科生一样，在使用工具之前，我们会翻阅手册。于是我参考\n《<a href=\"http://guide.couchdb.org/index.html\">CouchDB - the Definitive Guide</a>》\n中的<a href=\"http://guide.couchdb.org/draft/source.html\">源代码安装章节</a>，\n发现丫只有 Debian 与 Mac OS X 上的说明，作了第一个错误决定，跳过了</p>\n\n<pre><code>apt-get install build-essential erlang libicu-dev libmozjs-dev libcurl4-openssl-dev\n</code></pre>\n\n<p>直接跑到 apache-couchdb-1.2.1 目录中 <code>./configure</code>，不出所料它提醒我说找不到 erl 和 erlc，\n也就是说木有 erlang。本来么</p>\n\n<pre><code>yum install erlang\n</code></pre>\n\n<p>即可，但我自作聪明，非要从 <a href=\"http://www.erlang.org/\">erlang.org</a> 上搞一份手工装，庆幸无虞。\n搞定 erlang 之后，couchdb 可以顺利 <code>./configure</code> 之后 <code>make &amp;&amp; make install</code> 了。</p>\n\n<p>接着创建 couchdb 用户，并修改相关目录的权限：</p>\n\n<pre><code>adduser -r --home /usr/local/var/lib/couchdb -M --shell /bin/bash --comment \"CouchDB Administrator\" couchdb\n\nchown -R couchdb:couchdb /usr/local/etc/couchdb\nchown -R couchdb:couchdb /usr/local/var/lib/couchdb\nchown -R couchdb:couchdb /usr/local/var/log/couchdb\nchown -R couchdb:couchdb /usr/local/var/run/couchdb\n\nchmod -R 0770 /usr/local/etc/couchdb\nchmod -R 0770 /usr/local/var/lib/couchdb\nchmod -R 0770 /usr/local/var/log/couchdb\nchmod -R 0770 /usr/local/var/run/couchdb\n</code></pre>\n\n<p>于是就可以 <code>/usr/local/etc/rc.d/couchdb start</code> 这么跑起来了，测试一下看看：</p>\n\n<pre><code>curl http://127.0.0.1:5984/\n</code></pre>\n\n<div class=\"highlight\"><pre><code class=\"javascript\"><span class=\"p\">{</span>\n    <span class=\"s2\">&quot;couchdb&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;Welcome&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;version&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;1.2.1&quot;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n\n\n<p>但是，不要以为已经搞定，苦难才刚刚开始。这枚 CouchDB 是私有 npm 仓库，当然不能只限本机访问，\n我们需要修改一下 <code>bind_address</code>：</p>\n\n<pre><code>vim /usr/local/etc/couchdb/local.ini\n</code></pre>\n\n<p>找到 <code>[httpd]</code> 章节，改成 <code>bind_address = 0.0.0.0</code>。另外，为了保证 npm 客户端正常使用，\n还要在此节中加入 <code>secure_rewrite = false</code>。</p>\n\n<p>如此配置之后，http://couchdb:5984/_utils 已经能够打开 Futon 了，右下角说，\n现在所有人都是管理员，赶快 Fix This！ CouchDB 的逻辑就是，没有管理员的话，所有人都是管理员，\n修复的办法自然就是给它设置个管理员了，有两种方式，其一，在 CouchDB 服务器上：</p>\n\n<pre><code>curl -X PUT http://127.0.0.1:5984/_config/admins/obama -d '\"combo-breaker\"'\n</code></pre>\n\n<p>或者直接点击 Futon 里的那个 Fix This，输入用户名密码，再点 Create。</p>\n\n<p>但我就没这么顺利了，创建用户 500，返回的错误信息如下（curl 方式结果相同）：</p>\n\n<div class=\"highlight\"><pre><code class=\"javascript\"><span class=\"p\">{</span>\n    <span class=\"s2\">&quot;error&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;error&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;reason&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;eacces&quot;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n\n\n<p>Google 一番，这个错误的信息意思是木有权限，不对瓦，既然所有人都是管理员，为啥会木有权限。\n结果是配置文件的权限作怪，一定是前面执行相关命令的时候姿势不对，重新搞一遍：</p>\n\n<pre><code>chown -R couchdb:couchdb /usr/local/etc/couchdb\nchmod 0700 /usr/local/etc/couchdb\n</code></pre>\n\n<p>终于成功创建管理员账号了。</p>\n\n<p>然后去 <a href=\"https://github.com/isaacs/npmjs.org\">isaacs/npmjs.org</a> 上导入 npm 数据，\n一路顺遂。这里有个注意的是如果你已经创建了管理员账号，在 replicate 数据库的时候要加上身份验证：</p>\n\n<pre><code>curl -X POST -H \"Content-Type:application/json\" \\\n    http://obama:combo-breaker@127.0.0.1:5984/_replicate \\\n    -d '{\"source\":\"http://isaacs.iriscouch.com/registry/\", \\\n         \"target\":\"registry\", \\\n         \"doc_ids\":[\"_design/app\",\"_design/scratch\",\"_design/ui\"]}'\n</code></pre>\n\n<p>至此搞定 npm registry。</p>\n\n<p>但是我们在客户端</p>\n\n<pre><code>npm adduser --registry http://couchdb:5984/registry/_design/app/_rewrite\n</code></pre>\n\n<p>时，服务器报 500 错误，查看日志，说是 OS_Process_Error，如下：</p>\n\n<pre><code>… OS Process Error … {os_process_error,{exit_status,127}}\n</code></pre>\n\n<p><a href=\"http://wiki.apache.org/couchdb/Error_messages#OS_Process_Error_.7Bos_process_error.2C.7Bexit_status.2C127.7D.7D\">Wiki 上说</a>\n是因为 SpiderMonkey 没装好，于是找到这篇 CouchDB Wiki 上的\n<a href=\"http://wiki.apache.org/couchdb/Installing_SpiderMonkey\">Install SpiderMonkey</a>，\n试了 1.7.0 与 1.8.0-rc1，都告失败，现在回想可能我忘了装好之后重新 <code>./configure</code> CouchDB。</p>\n\n<p>然后我找到了 <a href=\"http://wiki.apache.org/couchdb/Installing_on_RHEL5\">Install on RHEL 5</a>，\n才发现有 <a href=\"http://fedoraproject.org/wiki/EPEL\">EPEL</a> 这种东东，可以直接从它们的源里安装预编译的 couchdb。</p>\n\n<p>首先，按照 <a href=\"http://fedoraproject.org/wiki/EPEL#How_can_I_use_these_extra_packages.3F\">EPEL 的安装流程</a>，\n找到相应版本的 rpm 包，下载过来之后执行：</p>\n\n<pre><code>rpm -Uvh epel-release-*.noarch.rpm\nyum clean all\n</code></pre>\n\n<p>要安装预编译的，执行：</p>\n\n<pre><code>yum install couchdb\n</code></pre>\n\n<p>要自行编译安装，这个源也能帮上忙，它提供了官方源里木有的 js-devel 和 erlang。</p>\n\n<p>坑爹之旅到此结束，粗枝大叶如我真干不了这个。</p>\n",
            "$": {
              "type": "html"
            }
          }
        ]
      },
      {
        "title": [
          "ssh-agent & capistrano"
        ],
        "link": [
          {
            "$": {
              "href": "http://cyj.me/binary/ssh-agent"
            }
          }
        ],
        "updated": [
          "2013-01-29T00:00:00-08:00"
        ],
        "id": [
          "http://cyj.me/binary/ssh-agent"
        ],
        "content": [
          {
            "_": "<h2>缘起</h2>\n\n<p>敝公司的线上环境与业界大拿相仿，躲在防火墙后面，需要通过跳板机登录。在本文描述的问题出现之前，\n我们的 capistrano 部署脚本一直采用的方式是，配置 <code>:gateway</code>，让 capistrano 处理中转。</p>\n\n<p><a href=\"http://weblog.jamisbuck.org/2006/9/26/inside-capistrano-the-gateway-implementation\">capistrano 的原理</a>\n是利用跳板机开一个 SSH 隧道，然后本地连接这个隧道，执行操作，等同与以下命令：</p>\n\n<div class=\"highlight\"><pre><code class=\"bash\"><span class=\"c\"># Term 1</span>\nssh -N 9999:prod.server:22 -L jake@login1\n\n<span class=\"c\"># Term 2</span>\nssh jake@127.0.0.1:9999\n</code></pre></div>\n\n\n<p>元旦之后，这种方式宣告失败，<code>ssh jake@127.0.0.1:9999</code> 连不上，终端 1 里开起来的隧道返回：</p>\n\n<pre><code>Channel 2: open failed: administratively prohibited: open failed\n</code></pre>\n\n<p>当时很苦恼，还去\n<a href=\"https://groups.google.com/forum/#!topic/capistrano/3p09d46erFQ\">capisrano 群组求助</a>，\n幸亏阅读相关文档之后，终于搞定。</p>\n\n<h2>ProxyCommand</h2>\n\n<p>解决的办法其实简单，就是 ProxyCommand。在本机的 <code>~/.ssh/config</code> 中，如下配置：</p>\n\n<pre><code>Host prod.server\n  User jake\n  ProxyCommand ssh -A login1 nc %h %p\n</code></pre>\n\n<p>然后就可以直接 <code>ssh prod.server</code> 了，也就是说，可以去掉 <code>config/deploy.rb</code> 中的\n<code>:gateway</code>，直接连接生产环境。</p>\n\n<h2>ssh-agent</h2>\n\n<p>但这有个不足处，需要输两次密码，解决办法也很简单，就是 SSH 秘钥与 <code>ssh-agent</code>。\n首先我们要生成一个秘钥：</p>\n\n<pre><code>ssh-keygen -N myprecious -f ~/.ssh/corp\n</code></pre>\n\n<p>以上命令，即生成一个名叫 corp，并有 myprecious 作为密码保护的秘钥。也可以使用无密码保护的秘钥，\n但假如秘钥文件丢失，风险很大，而使用 <code>ssh-agent</code>，在使用体验上等同于无密码，所以，\n推荐使用密码保护。</p>\n\n<p>将 corp.pub 的内容分别加入 login1 与 prod.server 的相应用户的\n<code>~/.ssh/authorized_keys</code> 中，并配置本机与 login1 机器上的转发，即修改两台机器的\n<code>~/.ssh/config</code>：</p>\n\n<p>本机：</p>\n\n<pre><code>Host login1\n  ForwardAgent true\n</code></pre>\n\n<p>login1 机器：</p>\n\n<pre><code>Host prod.server\n  ForwardAgent true\n</code></pre>\n\n<p>配置完之后，把这个秘钥交给 <code>ssh-agent</code>：</p>\n\n<pre><code>ssh-add ~/.ssh/corp\n</code></pre>\n\n<p>可能会报 Could not open a connection to your authentication agent.\n这个错误的意思是，ssh-agent 还没有跑起来，执行一下：</p>\n\n<pre><code>ssh-agent $SHELL\n</code></pre>\n\n<p>即可。公钥交付完毕之后，我们测试一把：</p>\n\n<div class=\"highlight\"><pre><code class=\"bash\"><span class=\"c\"># 通过 login1 连接 prod.server</span>\n<span class=\"c\"># -t 参数表示，请一定分配 Terminal</span>\nssh -t login1 ssh prod.server\n\n<span class=\"c\"># 看看是否连到线上</span>\nhostname    <span class=\"c\"># ==&gt; prod.server</span>\n\n<span class=\"c\"># 看看你的 SSH 公钥有没有被转发</span>\nssh-add -l  <span class=\"c\"># ==&gt; 类似 /Users/johndoe/.ssh/corp.pub</span>\n</code></pre></div>\n\n\n<p>注意这里被转发到相应服务器的只是 SSH 公钥部分，如此，配合前文所述之 ProxyCommand：</p>\n\n<pre><code>Host prod.server\n  ProxyCommand ssh -A login1 nc %h %p\n</code></pre>\n\n<p>就可以免密码，直接 <code>ssh prod.server</code> 啦。</p>\n\n<h2>Githop</h2>\n\n<p>利用 ProxyCommand，我们还可以通过跳板机获取原本不能直接访问的 Git 代码库。例如，敝人实践的方式是，\n沿用工作机器，一台 MacBook Pro，上面已经生成的公钥，交给 ssh-agent 打理：</p>\n\n<pre><code>ssh-add ~/.ssh/corp.pub\n</code></pre>\n\n<p>配置好跳板机、生产机器，以及专门用来中转 Git 仓库的 Githop 机器，使他们可以一路 <code>ForwardAgent</code>，\n并且在需要中转 Git 的机器上配置 ProxyCommand：</p>\n\n<pre><code>Host gitlab\n  User git\n  ProxyCommand ssh -A githop nc %h %p\n</code></pre>\n\n<p>配置好之后测试一下，只要在生产机器上可以做到 <code>git clone ssh://gitlab//repo.git</code> 成功，\n那么 capistrano 实际部署时就能顺利完成 <code>deploy:update_code</code> 这一步了。</p>\n\n<p><a href=\"http://stackoverflow.com/questions/4769986/git-clone-from-remote-ssh-repository-change-the-machine-on-the-remote-network\">via</a></p>\n\n<h2>自动 ssh-add</h2>\n\n<p>每次打开终端还得重新添加公钥有些麻烦，我们可以让 Shell 或者 SSH 自动来做。</p>\n\n<ol>\n<li><p>让你所使用的 Shell 来帮忙，例如 zsh，打开 <code>~/.zshrc</code>，在末尾加上 <code>ssh-add ~/.ssh/corp</code>\n即可。这么有个缺点，假如你的秘钥受密码保护，每次新开终端，都会提醒你输入该秘钥的密码，比较讨厌。</p></li>\n<li><p>放在 <code>~/.ssh/config</code> 里：</p>\n\n<p> IdentityFile ~/.ssh/corp</p></li>\n</ol>\n\n\n<p><a href=\"http://stackoverflow.com/questions/3466626/add-private-key-permanently-with-ssh-add-on-ubuntu\">via</a></p>\n\n<h2>2013-06-19 更新：</h2>\n\n<p>初次生成的密钥文件，可能会因为权限问题不能添加到 ssh-agent ，转发也不成功。将私钥的 filemode 改成 0600 即可。</p>\n\n<p>即执行：</p>\n\n<pre><code>chmod 0600 ~/.ssh/corp\n</code></pre>\n\n<h2>参考资料</h2>\n\n<ul>\n<li><a href=\"http://kimmo.suominen.com/docs/ssh/\">Introducing SSH</a></li>\n<li><a href=\"http://unixwiz.net/techtips/ssh-agent-forwarding.html\">An Illustrated Guide to SSH Agent Forwarding</a></li>\n<li><a href=\"http://sshmenu.sourceforge.net/articles/transparent-mulithop.html\">Transparent Multi-hop SSH</a></li>\n<li><a href=\"http://unix.stackexchange.com/questions/14160/ssh-tunneling-error-channel-1-open-failed-administratively-prohibited-open\">The Administratively Prohibited Error</a></li>\n<li><a href=\"http://superuser.com/questions/107679/forward-ssh-traffic-through-a-middle-machine\">ProxyCommand</a></li>\n</ul>\n\n",
            "$": {
              "type": "html"
            }
          }
        ]
      }
    ]
  }
}