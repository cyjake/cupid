{
  "rss": {
    "$": {
      "xmlns:dc": "http://purl.org/dc/elements/1.1/",
      "version": "2.0"
    },
    "channel": [
      {
        "title": [
          "潴頭在綫"
        ],
        "link": [
          "http://yehao.diandian.com/"
        ],
        "description": [
          "凌征 @ Alimama UX，思维简单，想法奇葩，喜欢各种卡通图案的东西，还在兼容IE6的前端开发一枚"
        ],
        "image": [
          {
            "title": [
              "潴頭在綫"
            ],
            "url": [
              "http://m1.img.libdd.com/farm5/2012/1209/21/1D425AB171115E28CF639E7AAE5B788C6CD90B8EBF622_64_64.jpg"
            ],
            "link": [
              "http://yehao.diandian.com/"
            ],
            "description": [
              "凌征 @ Alimama UX，思维简单，想法奇葩，喜欢各种卡通图案的东西，还在兼容IE6的前端开发一枚"
            ]
          }
        ],
        "item": [
          {
            "title": [
              "What’s new with me in July"
            ],
            "link": [
              "http://yehao.diandian.com/post/2013-08-03/40052574268"
            ],
            "description": [
              "<p><span class=\"text-img-holder\"><img src=\"http://m3.img.libdd.com/farm5/2013/0803/23/D91F1645F61B181AC2ADC3DF59ECDAEA26FE100CE90D1_400_83.jpg\" width=\"400\" height=\"83\"/></span><br /></p><p>I haven’t written anything in English since I got the CET-6 certificate back to college, I guess. So this post may be in a senior high school student’s level. If you wanna read on, I have to warn you that I haven’t updated the vocabularies and phrases in my head for a long time. So bear with me.<br /></p><p><br /></p><p><span>I haven’t written any posts in July. Looks like I break the promise that I made to no one but myself, which is to at least publish one post each month. But it’s August 3rd, Sat. still inside the last week started within June. Anyway, this is just another post which states my recent life.</span></p><p><br /></p><p><span><strong>Wacom Tablet</strong></span></p><p><span>I bought a Wacom intuos 5 tablet, though I’m not good at drawing. Or even worse, I don’t know how to draw. </span></p><p class=\"edui-filter-align-center\"><span class=\"text-img-holder\"><img src=\"http://m2.img.libdd.com/farm5/2013/0803/23/883BAEB46555B5BAC35CBEF1E362BAA46A71B5C63A436_400_533.jpg\" width=\"400\" height=\"533\"/></span><br /></p><p><span>So why purchasing such a thing? I dunno. Photoshop got some cool features, say change a photo into oil painting since CS5 and I think that’s interesting. Watching the digital drawing fundamentals course is a nice way to relax from all kinds of code. I haven’t done anything special with the tablet except for this not-good-looking-and-not-tastable cake. </span></p><p class=\"edui-filter-align-center\"><span class=\"text-img-holder\"><img src=\"http://m2.img.libdd.com/farm5/2013/0803/23/E2EF23A58250814F5D745C65617B3EAAA466D88FB7C85_400_168.jpg\" width=\"400\" height=\"168\"/></span><br /></p><p><span>Well, you may say that’s not a masterpiece. Yeah, I know. This is for my father’s birthday, which I nearly forgot, fortunately to my sister’s phone call. Delivering a cake from Hangzhou to my hometown may take a few days, which definitely results in trashing the package on its arrival. So I spent some minutes drawing this one and sent to my father in less than two seconds.</span></p><p><br /></p><p><span><strong>ADC</strong></span></p><p><span>I attended the Alibaba Developer Conference (ADC) on the second weekend in July. I signed up for D2 and Ucan. D2 is all about the web front-end development stuff while Ucan is all about user interactive design and visual design.</span></p><p class=\"edui-filter-align-center\"><span><span class=\"text-img-holder\"><img src=\"http://m2.img.libdd.com/farm5/2013/0803/23/5E10DA8227289E1EC089DFF27B2541AD461DC6AD22252_400_447.jpg\" width=\"400\" height=\"447\"/></span><br /></span></p><p><span>This is my first time attending this conference. However, one of my friends said there was more fun and interesting topics in the 2012 and 2011 sessions, during which time there were more people from different companies sharing their knowledge and experiences. This year most speakers are from Alibaba.</span></p><p><br /></p><p><span>The first day sessions includes topics on user action analysis, automated CSS test, game development using javascript and Cocoa bindings, cross-browser plugin development frameworks, automated PSD to CMS and Webtop, which is an HTML5 based app development engine.</span></p><p><br /></p><p><span>I haven’t read much of user action analysis before, so this is new to me. The speaker introduces some typical situations in Alipay’s confirming purchasing webpage’s development. Well organized and clearly introduced. A good session. </span></p><p><br /></p><p><span>When comes to front-end test, I mainly thinks of JavaScript. The tools introduced in the CSS testing session is worth paying attention to. But since I still have to deal with the out-dated MSIE, which is a nightmare, such test is not that reliable to me. One problem that we met before is, our images were displayed at the exact right place on the webpage. But some others images were placed on top of ours using absolute positioning, which made the code telling us that our advertisement was fine, but the incoming data stated it wasn’t. So its pretty complicated to do such automated testing sometimes.</span></p><p><br /></p><p><span>Game development is a relatively different area. I wrote ActionScript before, and I’m still a big fan for Adobe Flash. Most html5 effects were repeating what the Flash did in the past days. And 3D in Flash is much more mature. I don’t agree with the Flash will be dead saying, at least in the following couples of months. This does not mean I don’t think the cutting-edge HTML5 stuff is awkward. I like that and have been playing with Canvas now. All right, coming back to the game dev session at D2, this is the most impressive session to me.</span></p><p><br /></p><p><span>As for the other 3 sessions in the afternoon, not much impression on the plugin dev one. Webtop is so Tencent style. The speaker is experienced in organizing and writing code, but not that good at describing what he has done. And PSD to CMS is so Taobao based. Adobe Muse is definitely the tool for web designers to checkout, instead of just focusing on designing in photoshop and handing the artwork to the front-end engineer.</span></p><p><br /></p><p><span>On the second day, I went to D2 in the morning and Ucan in the afternoon. The session brought by ihaveu.com, which talks about their experience in html5 mobile app development, is great. Even though most of the concept were heard before. I was expecting to hear the architecture behind KISSY Mobile, but the session didn’t focus much on that. Kinda disappointed, huh~</span></p><p><br /></p><p><span>The first session I attended on Ucan mainly focused on Xiaomi’s UI design. Great talk, huge information, but the speaker should really consider about the time. The videos from Microsoft are impressive. It opens the door to the designers and developers of what can be done with the current technology. I don’t like Microsoft’s software, but the hardware, especially Kinnect, is a revolution.</span></p><p><br /></p><p><span><strong>Daily work</strong></span></p><p><span>Oops, too many words on ADC. Next comes my daily work.</span></p><p><br /></p><p><span>In the past few months I’ve been working on a project called <a href=\"http://qin.taobao.com/\" target=\"_self\"><span>Qin Taobao</span></a>, a new brand from <a href=\"http://www.alimama.com/\" target=\"_self\"><span>Alimama</span></a>. Now done with the whole site’s main pages, I’m handing my work over to another team at Beijing. I’m glad to hear the product designers and product manager saying that they feel comfortable working with me. They assured my efficiency in the project, which is a great feedback. Next I may be focus on some Node.js project. There are lots of new stuff to learn, which is a new challenge as well as some self improvements to myself. I’d like to be prepared when I face the new problem. So this gives me some pressure, which is good, making me more motivated.</span></p><p><br /></p><p><span>I’m still digging into my canvas based image clipping tool. Just came up with a new idea of doing the clipping work automatically last week. To a guy not knowing much about image processing algorithms, it is challenging.</span></p><p><br /></p><p><span>One day my leader had a conversation with me, mainly focused on the current job. When talking about the CSS stuff, we agreed that the interactive designer should at least know the basics of CSS. They should know how the style can be achieved in the front-end. Majority of the CSS course that I watched are all recorded by graphic designers. Hope we can push the thought forward and take something action.</span></p><p><br /></p><p><span>And finally a few words about the creativity in the forms of web advertisement. Currently most of the creations only vary on the visual positions of price, sales, images, etc. It may be a slide or carousel. But that’s all. The most impressive ad that I saw is apple’s ipod on <a href=\"http://pitchfork.com/\" target=\"_self\"><span>pitchfork</span></a>. You can find a video here on <a href=\"http://v.youku.com/v_show/id_XNDg5NTE2ODY4.html\" target=\"_self\"><span>Youku</span></a>. Or here on <a href=\"http://www.youtube.com/watch?v=SgfJn8FsSKg\" target=\"_self\"><span>YouTube</span></a>, 1080P. This ad itself is a video. It may not be suitable for our scenario. But it is a way of doing attractive web ad. I don’t wanna talk too much about this. ‘Cause I’m not any kind of expert in this field. Just express my feelings.</span></p><p class=\"edui-filter-align-center\"><span class=\"text-img-holder\"><img src=\"http://m3.img.libdd.com/farm5/2013/0803/23/5E4A8A77555941D9EF09A70CD3FBCCB8DF741A2192B50_400_193.jpg\" width=\"400\" height=\"193\"/></span><br /></p><p><span><strong>Wrapping up</strong></span></p><p><span>One of my best friends came to Hangzhou a few weeks ago. We walked through the Xixi National Wetland Park in a really hot day. Congratulations to ourselves that we did not drain out energy in the sun. And since I’m typing these letters, y’know I’m still alive.</span></p><p><br /></p><p><span>Thanks to him, I got this great B/W photo. Comes with the camera. Not photoshoped.</span></p><p class=\"edui-filter-align-center\"><span class=\"text-img-holder\"><img src=\"http://m1.img.libdd.com/farm4/2013/0803/23/DEFB5257AB6CF0E10240BA853940A3C85B4173DAC2E06_400_266.jpg\" width=\"400\" height=\"266\"/></span><br /></p><p><span>It’s August, gotta think about the goals of my job for the 6 months in the next few days. Once I read a tweet of learning a new programming language. The advice is to stick with it for at least 6 months. </span></p><p><span>So half a year, set the goal, stick with it. Good luck to me, and to everybody.</span></p>"
            ],
            "pubDate": [
              "Sat, 03 Aug 2013 14:06:10 GMT"
            ],
            "guid": [
              "http://yehao.diandian.com/post/2013-08-03/40052574268"
            ]
          },
          {
            "title": [
              "Outing三亚行，博客的排版太麻烦了，简单粗暴，直接..."
            ],
            "link": [
              "http://yehao.diandian.com/post/2013-06-29/40051199444"
            ],
            "description": [
              "<p><p class=\"edui-filter-align-center\">Outing三亚行，博客的排版太麻烦了，简单粗暴，直接贴图。</p><p class=\"edui-filter-align-center\">不要SEO，不要用户体验，版式满足了就OK。<br /></p></p>\r\n    <p><img src=\"http://m2.img.libdd.com/farm4/2013/0629/22/D0B71304FD43E6A4FE8689FF90974170EE83D66ABC1F5_500_104.jpg\" /></p>\r\n    <p><img src=\"http://m1.img.libdd.com/farm5/2013/0629/22/649062F3348A08050343407881978BB520367F44FF53B_500_708.jpg\" /></p>\r\n    <p><img src=\"http://m1.img.libdd.com/farm5/2013/0629/22/E6D1BA39CA130670B978ACF814777169C940D8DD196EA_500_708.jpg\" /></p>\r\n    <p><img src=\"http://m2.img.libdd.com/farm4/2013/0629/22/ABBF44E94D3A78C9B4271153E902E8F183F82269C0BAB_500_708.jpg\" /></p>\r\n    <p><img src=\"http://m1.img.libdd.com/farm4/2013/0629/22/A16DCE7DD49CF58F823D2A21205234F3C31B5D2861E2E_500_708.jpg\" /></p>\r\n    <p><img src=\"http://m1.img.libdd.com/farm5/2013/0629/22/0D63634C9ED474AF82DCBC3176C3B9AACFD8002AA7EE2_500_708.jpg\" /></p>\r\n    <p><img src=\"http://m2.img.libdd.com/farm4/2013/0629/22/8997BC9CCCB08DEB07DC776F14B84C45AF978F213D879_500_708.jpg\" /></p>\r\n    <p><img src=\"http://m3.img.libdd.com/farm4/2013/0629/22/A1C2C2AFAF0B8CC5FF1CD1B48A61AC1B9551A54D792D9_500_708.jpg\" /></p>\r\n    <p><img src=\"http://m3.img.libdd.com/farm4/2013/0629/22/AA18B9E3F721B22F8BA9A6339A9DE48B2FE0990091A9A_500_708.jpg\" /></p>"
            ],
            "pubDate": [
              "Sat, 29 Jun 2013 14:56:06 GMT"
            ],
            "guid": [
              "http://yehao.diandian.com/post/2013-06-29/40051199444"
            ]
          },
          {
            "title": [
              "关于Flash Pro CC新功能"
            ],
            "link": [
              "http://yehao.diandian.com/post/2013-06-28/40051171816"
            ],
            "description": [
              "<p><span class=\"text-img-holder\"><img src=\"http://m3.img.libdd.com/farm5/2013/0628/00/8648EF203F92269B41A360F186990D80075146266CA01_400_83.jpg\" width=\"400\" height=\"83\"/></span><br /></p><p>Adobe现在对Flash Professional的介绍是这么写的：</p><blockquote><p>Interactive experiences, game design &amp; mobile device packaging<br /></p></blockquote><p>在Adobe Max上，有好几场针对Flash平台创建游戏的Session。</p><p>下面的内容，是上个月初Adobe Max 2013上What's New and Upcoming in Flash Professional的笔记，关于Flash Pro CC的一些变化。</p><!--more--><p>&nbsp;</p><p><strong>1 UI Changes and Improvements</strong></p><p class=\"edui-filter-align-center\"><strong><span class=\"text-img-holder\"><img src=\"http://m3.img.libdd.com/farm4/2013/0628/00/D3F86FEE867213805B821A1B87784497A613B943904F9_400_250.jpg\" width=\"400\" height=\"250\"/></span><br /></strong></p><p class=\"edui-filter-align-center\">fig. Flash Professional CC</p><p><strong><br /></strong></p><p><strong>1.1 Performance</strong></p><p>在性能上罗列了这么一些提升：</p><ul class=\"edui-filter-disc\"><li><p>启动时间(warm boot)快10倍以上(我在SSD上还是能感觉到区别的)</p></li><li><p>发布时间最多快6倍</p></li><li><p>保存动画量大复杂的文件最多能提速7倍</p></li><li><p>拖动时间轴的实时渲染性能加倍</p></li><li><p>导入到舞台和库的速度更快</p></li><li><p>打开FLA和AS文件速度更快</p></li><li><p>绘图体验更加流畅</p></li><li><p>降低CPU使用率，延长电池使用时间</p></li></ul><p>&nbsp;</p><p>1.2 <strong>UI and Efficiency</strong></p><p><strong>实时绘图预览</strong></p><p>在CC里边绘图的时候，拖动鼠标时就能渲染出最终的结果。在CS6及之前的版本，只会显示一个轮廓，填充和边框都是不显示的。</p><p class=\"edui-filter-align-center\"><span class=\"text-img-holder\"><img src=\"http://m2.img.libdd.com/farm5/2013/0627/23/79638A05E18DD8F1422EE1CAC0C36A5B972B8B6AD48D7_214_105.PNG\" width=\"214\" height=\"105\"/></span><br /></p><p class=\"edui-filter-align-center\">fig. CC(L) &amp; CS6(R) live drawing compare</p><p><strong><br /></strong></p><p><strong>实时颜色预览</strong></p><p>选取颜色的时候，当鼠标滑过某个颜色，能够直接在舞台上反映出结果。以前的话需要先选中颜色，不满意再撤销重选。</p><p class=\"edui-filter-align-center\"><span class=\"text-img-holder\"><img src=\"http://m3.img.libdd.com/farm4/2013/0628/00/63FD74C11A9982AB343622C10906555F9542055A70480_400_210.jpg\" width=\"400\" height=\"210\"/></span><br /></p><p class=\"edui-filter-align-center\">fig. Flash Pro CC live color preview</p><p><strong><br /></strong></p><p><strong>以预置的控制点为参照缩放内容</strong></p><p>简单地说就是文档设置对话框里边更新了这么个东西，即下图的Anchor选项。可以在缩放舞台尺寸和舞台内容的时候做一些配置。</p><p><span class=\"text-img-holder\"><img src=\"http://m3.img.libdd.com/farm4/2013/0628/00/E713E8E809524EB8B3567C9330061539D4D2143E4D4A7_400_372.jpg\" width=\"400\" height=\"372\"/></span><br /></p><p class=\"edui-filter-align-center\">fig. Anchor option in Document Settings</p><p><strong><br /></strong></p><p><strong>简化了PS和AI文件的导入对话框，速度更快</strong></p><p>在CS6及更早的版本里边，导入对话框中能够看到每一个图层，并对具体的图层使用不同的导入选项。</p><p class=\"edui-filter-align-center\"><span class=\"text-img-holder\"><img src=\"http://m3.img.libdd.com/farm4/2013/0628/00/DCB17DCD705BDC3B139A45D762982A49463A46B0A6A65_400_333.jpg\" width=\"400\" height=\"333\"/></span><br /></p><p class=\"edui-filter-align-center\">fig. Import dialog box (CS6)</p><p>在CC里边，这个对话框被简化为针对所有同类型图层的操作。也就是说，不能够对单个图层做特殊配置了。但其实大多数情况下我们要的也就是这个功能。</p><p class=\"edui-filter-align-center\"><span class=\"text-img-holder\"><img src=\"http://m1.img.libdd.com/farm4/2013/0628/00/ED1525500879A4DC9820F541BAF78D51A51629940D4FB_400_471.jpg\" width=\"400\" height=\"471\"/></span><br /></p><p class=\"edui-filter-align-center\"><span class=\"edui-filter-align-center\">fig. Simplified import dialog box (CC)</span><br /></p><p><strong><br /></strong></p><p><strong>尺寸无限的剪贴板(paste board)</strong></p><p>Paste Board是指舞台之外的灰色区域。无尽尺寸是这样的：例如下面左图，已经滚动到最右上角的位置了。当我在这个区域绘制一个圆时，剪贴板的尺寸会加大，可以看到右图滚动条可以继续往右和往上滚动了。</p><p class=\"edui-filter-align-center\"><span class=\"edui-filter-align-center\"><span class=\"text-img-holder\"><img src=\"http://m2.img.libdd.com/farm5/2013/0628/00/D0625BB239F925E511D88606DA071527D8F8DC6B8C9C5_400_161.jpg\" width=\"400\" height=\"161\"/></span><br /></span></p><p class=\"edui-filter-align-center\"><span class=\"edui-filter-align-center\">fig. Unlimited paste board</span></p><p><strong><br /></strong></p><p><strong>全屏模式</strong></p><p>跟Photoshop类似，提供了带菜单和默认只显示舞台的全屏模式，快捷键是Cmd + Control + G(Mac)/F11(PC)。</p><p>&nbsp;</p><p><strong>回到舞台中心</strong></p><p>在舞台右上角新增了这么一个按钮，叫做Center Stage。当缩放或者滚动到文件的某一个位置，点击这个按钮，将会以当前缩放比例，把滚动条复位到中间。快捷键是Cmd/Ctrl + 0。</p><p class=\"edui-filter-align-center\"><span class=\"edui-filter-align-center\"><span class=\"text-img-holder\"><img src=\"http://m3.img.libdd.com/farm5/2013/0628/00/7B320D2FD3CE8684909361A55919136AEA0D328154AF1_186_70.PNG\" width=\"186\" height=\"70\"/></span><br /></span></p><p class=\"edui-filter-align-center\"><span class=\"edui-filter-align-center\">fig. Center stage</span></p><p><span class=\"edui-filter-align-center\"><br /></span></p><p><strong>将元件和位图分布到关键帧</strong></p><p>选中舞台上当前帧的多个对象，在右键菜单里新增了”Distribute to Keyframes”选项，会把选中的N个对象分布到N个关键帧上，每一帧对应一个对象。</p><p>这对于从Illustrator等软件导入多个图像，来做逐帧动画的时候提供很大的便利。</p><p>&nbsp;</p><p><strong>同时替换多个元件或位图</strong></p><p>选中舞台上多个元件，点击属性面板上的Swap按钮，会弹出Swap对话框。选择任意一个元件，确定后，之前选中的不同元件就都被替换为同一个新的元件了。</p><p>这个方法对于位图同样适用。</p><p>但是只能是元件与元件、位图与位图的替换，不能将多个元件一次性替换成同一个位图。</p><p class=\"edui-filter-align-center\"><span class=\"edui-filter-align-center\"><span class=\"text-img-holder\"><img src=\"http://m2.img.libdd.com/farm5/2013/0628/00/42EF49D1071BEC85DF42770D2769384454AF51767F51C_400_124.jpg\" width=\"400\" height=\"124\"/></span><br /></span></p><p class=\"edui-filter-align-center\"><span class=\"edui-filter-align-center\">fig. Swap multiple symbols</span></p><p><span class=\"edui-filter-align-center\"><br /></span></p><p><strong>一次性将多个图层设为引导层或遮罩层</strong></p><p>选中多个图层，右键菜单的Guide和Mask选项在CS6及以前的版本都是灰色的，但是在CC里面是可用的，能够一次性把多个图层设为引导或遮罩层。</p><p class=\"edui-filter-align-center\"><span class=\"edui-filter-align-center\"><span class=\"text-img-holder\"><img src=\"http://m1.img.libdd.com/farm4/2013/0628/00/DC06D2B6B7CB42BAC05232E2557C3B0820CEBE2C8BCEF_400_148.jpg\" width=\"400\" height=\"148\"/></span><br /></span></p><p class=\"edui-filter-align-center\"><span class=\"edui-filter-align-center\">fig. Multiple layers mask manipulation(L: CC; R: CS6)</span></p><p>&nbsp;</p><p><strong>同时给多个图层设置属性</strong></p><p>多个图层同时选中的时候右键打开属性面板，在CC里边，所有选项都是可用的，并且操作的结果都是针对所有图层的。在之前的版本中，属性面板里只有部分选项可选，而且操作的结果只是针对某个图层的，尽管选中了多个图层。</p><p class=\"edui-filter-align-center\"><span class=\"text-img-holder\"><img src=\"http://m3.img.libdd.com/farm4/2013/0628/00/1BFA91628E54D465CAF96F167F04C3F54664070D1A371_400_205.jpg\" width=\"400\" height=\"205\"/></span><br /></p><p class=\"edui-filter-align-center\">fig. Layer Properties when multiple layers selected (L: CC; R: CS6)</p><p>&nbsp;</p><p><strong>简化的面板</strong></p><p>最明显的是偏好设置，很多很少用到的选项卡都被移除了，下面是CS6和CC的偏好设置面板对比。左侧的Tab明显减少，并且每个Tab下的选项也精简了许多。BTW，暗色界面是否打开的选项就在General Tab下面可选。</p><p class=\"edui-filter-align-center\"><span class=\"text-img-holder\"><img src=\"http://m1.img.libdd.com/farm4/2013/0628/00/B3A9358F0077217A069F95A97DFC9D6C5BFE66AD84C36_400_198.jpg\" width=\"400\" height=\"198\"/></span><br /></p><p class=\"edui-filter-align-center\">fig. Preferences Panel (L: CS6; R: CC)</p><p>另外属性(Properties)面板下的滤镜(Filters)面板也做了一些修改，原先一排6个按钮，现在只有一个齿轮菜单和两个作用很明显的加减按钮了。</p><p class=\"edui-filter-align-center\"><span class=\"text-img-holder\"><img src=\"http://m2.img.libdd.com/farm4/2013/0628/00/E6F6CD3AF242D1C78CCD95AF998390DDA7A45441FBD7F_400_128.jpg\" width=\"400\" height=\"128\"/></span><br /></p><p class=\"edui-filter-align-center\">fig. Filters tab in Properties panel (L: CS6; R: CC)</p><p class=\"edui-filter-align-left\"><br /></p><p>可访问性(Accessibility)面板原来是在Window-&gt;Other Panels-&gt;Accessibility菜单下，现在直接集成为属性面板下的一个Tab。</p><p>&nbsp;</p><p><strong>整合的菜单</strong></p><p>测试影片的时候，原先会打开一个具有独立菜单的Flash Player，现在仍然会在新窗口中打开影片，但是菜单没变，原先的那些选项都被分布到Flash Pro的菜单里边了。因为Adobe推出了一个全新的工具，叫做Adobe Scout。</p><p class=\"edui-filter-align-left\"><br /></p><p><strong>2 New Code Editor</strong></p><p><strong>2.1 UI Changes</strong></p><p>Mac上的动作面板默认快捷键从Opt+F9改成了F9，和PC版保持一致了。和以前版本的面板相比，终于去掉了左侧几乎永远不会用到的Actions toolbox。另外顶部的按钮也精简了很多。</p><p class=\"edui-filter-align-center\"><span class=\"text-img-holder\"><img src=\"http://m2.img.libdd.com/farm4/2013/0628/00/8582FF076A727E89B8C68E9FA7A579B8743DC326C3F4C_400_238.jpg\" width=\"400\" height=\"238\"/></span><br /></p><p class=\"edui-filter-align-center\">fig. Actions panel in Flash Pro CC</p><p>现在编辑器能够识别代码块，并且带有括号高亮功能。</p><p class=\"edui-filter-align-center\"><span class=\"text-img-holder\"><img src=\"http://m3.img.libdd.com/farm5/2013/0628/00/13228278ABE5040FE3A79EA14D2EC52B52BA1FE6F5E0B_400_72.jpg\" width=\"400\" height=\"72\"/></span><br /></p><p class=\"edui-filter-align-center\">fig. Code block detection and high-lighted braces</p><p class=\"edui-filter-align-left\"><br /></p><p><strong>2.2 Code Hinting</strong></p><p>对于独立的as文件，如果需要使用代码提示的话，必须把对应的fla文件打开。否则不会有任何代码提示。</p><p>另外，如果在ActionScript 3.0设置里边指定了Class路径，而这个路径下又有很多文件的话，代码提示可能会失效。需要手动调大设置面板Code Editor选项卡下的Cache Files这个数值。</p><p class=\"edui-filter-align-left\"><br /></p><p><strong>3 Other Developer Enhancements</strong></p><p><strong>3.1 Find and Replace Panel</strong></p><p>查找和替换面板现在可以在当前帧或者所有打开的文档进行搜索。之前只能选择当前文档或者当前场景。另外搜索的内容也新增了一项，就是Code。</p><p class=\"edui-filter-align-center\"><span class=\"text-img-holder\"><img src=\"http://m1.img.libdd.com/farm4/2013/0628/00/77136FEF868231C033C1E7E975DD7A63F75626AEE548E_400_351.jpg\" width=\"400\" height=\"351\"/></span><br /></p><p class=\"edui-filter-align-center\">fig. New in find and replace panel</p><p class=\"edui-filter-align-left\"><br /></p><p><strong>3.2 JS API Enhancements</strong></p><p>对这块不是很熟，简单描述一下。</p><p>在Adobe MAX的Keynote上面，列出了这样3条：</p><ul class=\"edui-filter-disc\"><li><p>Object-level custom metadata</p></li><li><p>Improvements for debugging, event handling</p></li><li><p>DPI changes and access to color themes</p></li></ul><p>会上着重介绍了上述第一点，并且这个metadata可以是独立的json文件。第一个Demo是改变一个数值，用于测试游戏中人物的跳跃程度；第二个Demo有点类似XCode里边拖放元素布局时候的Constraints配置，根据metadata里边的信息，在缩放swf文件的时候，固定几个物体在舞台上的相对位置。</p><p>至于第二点，关于debugging一个明显的升级，就是现在可以直接从Finder里面拖拽jsfl文件到Flash窗口，就会弹出对话框问你是要用Flash打开这个文件，还是执行文件命令。在之前的版本里，只能通过Commands-&gt;Run command...菜单来执行jsfl文件。</p><p class=\"edui-filter-align-left\"><br /></p><p><strong>4 Export Video</strong></p><p>现在通过Flash Pro能够导出1080P的mov视频，而不至于丢帧。就算是有很多影片剪辑嵌套的复杂动画，或者是ActionScript驱使的动画，也能导出。此外，还能导出忽略舞台背景色的带Alpha通道的视频。因此，导出的视频跟播放swf文件几乎是一样的。下面是导出视频的对话框。</p><p class=\"edui-filter-align-center\"><span class=\"text-img-holder\"><img src=\"http://m2.img.libdd.com/farm4/2013/0628/00/E7592B0E843972339A0CE9FE6C3A1D609B51EBF7D6811_400_196.jpg\" width=\"400\" height=\"196\"/></span><br /></p><p class=\"edui-filter-align-center\">fig. Export Video</p><p>选择”Ignore stage color”就能输出带有alpha通道的视频文件。</p><p>如果是纯粹的时间轴动画，Stop exporting一项选择When last frame is reached就可以。如果是ActionScript控制嵌套的影片剪辑动画，需要自己预估一下整个动画的时长，并选择After time elapsed选项。</p><p>测试过程中，我试过两个时间轴上嵌入音频文件的fla，滑动播放头或者按Return键预览时，Flash CC一直发出刺耳的“兹”声，只能关掉程序再重新打开。看起来像是软件bug。</p><p class=\"edui-filter-align-left\"><br /></p><p><strong>5 Streamlined Mobile Workflows</strong></p><p>在移动端的开发和测试上，有这么一些新功能：</p><ul class=\"edui-filter-disc\"><li><p>在USB连接的iOS或者Android设备上调试应用（iOS也可以了喔）</p></li><li><p>使用Interpreter Mode在iOS设备上快速测试</p></li><li><p>同时在多个设备上运行应用（仅限运行，不能debug）</p></li><li><p>对于iOS设备直接发布AIR应用</p></li><li><p>支持iOS6和Retina显示</p></li><li><p>在Mac上可以直接调用iOS Simulator进行调试</p></li></ul><p class=\"edui-filter-align-left\"><br /></p><p><strong>6 Removed Featured</strong></p><p>Flash Pro的每一次升级都会去掉一些功能，CC这一次发布是重写的原生64位应用，下面列出几个值得注意的被删去的功能：</p><ul class=\"edui-filter-disc\"><li><p>ActionScript 2.0支持（不知道是不是国内用2.0的场景还比较多，上次看到微博上有人吐槽，但是AS3.0出来已经有7年了）</p></li><li><p>TLF Text支持（打开带有TLF文本的文件，会被自动转换成普通文本）</p></li><li><p>Deco工具，骨骼工具和IK动画（打开带有IK动画的文件，会被转换成逐帧动画）</p></li><li><p>Motion Editor面板（Motion Tween和Classic Tween还是支持的）</p></li><li><p>Auto-Save（Auto-Recovery仍然在，可以在偏好的General选项卡下设置）</p></li><li><p>保存文件对话框不再区分版本（Flash CS5.5和CS6可以打开新版本创建的文件）</p></li><li><p>自定义工具面板选项（如果真要自定义的话，可以使用jsfl文件）</p></li><li><p>Strings面板，Projects面板和拼写检查相关的选项</p></li></ul><p>当然，CC系列的升级会比较频繁，可能某些去掉的功能在后续还会重新回归。</p><p class=\"edui-filter-align-left\"><br /></p><p class=\"edui-filter-align-left\"><strong>7 The Future</strong></p><p class=\"edui-filter-align-left\">在结束之前，Keynote上给出了正在开发中，未来可能会出现的一个新建文件选项，HTML Canvas。在Actions面板里编写JavaScript也是未来针对Canvas可能提供的支持。</p><p class=\"edui-filter-align-left\">在设计方面，虽然移除了Deco和一些动画工具，未来会加入类似Photoshop中笔刷的选项。</p><p class=\"edui-filter-align-left\"><br /></p><p class=\"edui-filter-align-left\">会议视频地址：<a href=\"http://tv.adobe.com/watch/max-2013/whats-new-and-upcoming-in-flash-professional/\" target=\"_self\" title=\"What's New and Upcoming in Flash Professional\">What's New and Upcoming in Flash Professional</a></p>"
            ],
            "pubDate": [
              "Thu, 27 Jun 2013 16:31:44 GMT"
            ],
            "guid": [
              "http://yehao.diandian.com/post/2013-06-28/40051171816"
            ]
          },
          {
            "title": [
              "Weird Requests to Site Root from IE"
            ],
            "link": [
              "http://yehao.diandian.com/post/2013-06-01/40050011430"
            ],
            "description": [
              "<p><span class=\"text-img-holder\"><img src=\"http://m3.img.libdd.com/farm5/2013/0601/16/A3579329FD69C02987B915E34DFC92BE659EBDE90AB6F_400_83.jpg\" width=\"400\" height=\"83\"/></span><br /></p><p>前两天上线热卖广告的新品牌，叫做“亲&middot;淘宝”。今天又看到微博上一些转发，感觉这次的改版把广告改成更贴近网站的主体，相对于之前的版本，从视觉上来说更加时尚化一些。盗用一下猫姐在微博上的图。</p><p class=\"edui-filter-align-center\"><span class=\"text-img-holder\"><img src=\"http://m3.img.libdd.com/farm4/2013/0601/16/B70E5C5468A3A9ABA723710F155037403A3DEB689A783_400_248.jpg\" width=\"400\" height=\"248\"/></span><br /></p><p>这里要讲的是在上线过程中发现的一个奇怪的问题，我们在日志里面看到了很多去到网站根目录的请求，而且这些请求是不带任何额外参数的。</p><p>例如我当前页面是localhost/~yehao/qin/auction.php，在IE里面浏览页面的瀑布流区域时，会不断的发请求到localhost/~yehao/qin/这个地址。</p><p>这个页面大致是这样的，分为主区，包邮以及搭配推荐区块，还有底部以瀑布流形式展现的相似推荐部分。除了瀑布流，其他区块都是后端Java直接输出的，而瀑布流区块只会在前端发起一个请求，拿回一批宝贝，再根据滚动的情况，使用JS模版，分批渲染这些宝贝。</p><p>因此，瀑布流的滚动从理论上来说，只需要发送一次请求，拿到宝贝数据即可。但我们在日志里面看到很多到网站根目录的请求，Referrer都是当前页面，从User-Agent分析，多数为IE6-8，以及使用IE内核的浏览器，例如QQ浏览器，theWorld等等。</p><p>在做了一些试验之后，发现IE里面一个很奇怪的现象。当页面滚动到瀑布流区域的时候，JS会发送请求到数据接口获取宝贝，并展现返回结果的一部分宝贝。这个过程没有任何问题。接着继续滚动，直到滚动条距离页面底部的距离能够触发再次加载宝贝的事件，这个时候应该只要把之前结果集的另一部分宝贝直接写入DOM就可以了，但是IE却又发了一次请求到网站的根目录（本来想截个图，我只有Windows 7的虚拟机，IE还被我升级到9了，出不来这问题）。</p><p>更有意思的是，如果我一直按着End键，使瀑布流在短时间内多次加载，发到站点根目录的请求数量会减少。</p><p>起初我怀疑是不是favicon.ico缺失的问题。本期上线时favicon还没有加上，我用fiddler捕捉瀑布流每次加载宝贝时，是否发起额外请求，发现在Chrome里面会不停地去请求favicon.ico，返回404。我不知道IE里面是不是这个原因，但是结果却发送请求到网站根目录了。于是给本地测试页面加上favicon.ico，发现IE里边问题依旧。</p><p>那么能出问题的应该就是渲染宝贝的JS模版了。在这个页面上我需要在图片onload之后获取其高度，来做一些处理。因此我在模版里面把&lt;img&gt;的src属性留空，先把实际地址放到了data-src里面，类似这样：</p><pre config=\"brush:html;toolbar:false;\">&lt;img src=&quot;&quot; data-src=&quot;{{imgSrc}}&quot;&gt;</pre><p>当我把内容填入DOM之后，才会把data-src里面的内容赋值给src。</p><p>结果就是这个src= &quot;&quot;，导致了IE6-8会发送请求到站点根目录。解决方法当然很简单，把src= &quot;&quot;直接删掉就好了。</p><p>在Google搜索了一些关键词，只在<a href=\"http://stackoverflow.com/questions/15474715/ie-sometimes-requests-homepage-site-root-at-the-same-time-as-other-page?answertab=votes#tab-top\" target=\"_self\">stackoverflow</a>上看到有一个人碰到类似的问题，也有用户留言怀疑是否src为空的问题。下午顺便把我这个问题简单描述回复了一下。不太清楚是否还有其他的可能会引起这个现象，等到下周一重新测试看下反馈吧。</p>"
            ],
            "pubDate": [
              "Sat, 01 Jun 2013 08:36:19 GMT"
            ],
            "guid": [
              "http://yehao.diandian.com/post/2013-06-01/40050011430"
            ]
          },
          {
            "title": [
              "Practical JavaScript - Notes from Adobe Max 2013"
            ],
            "link": [
              "http://yehao.diandian.com/post/2013-05-26/40051450882"
            ],
            "description": [
              "<p><span><span class=\"text-img-holder\"><img src=\"http://m3.img.libdd.com/farm4/2013/0526/15/E0E833C87A6CD0613D7C861C7AC17AFDBBCC73250469B_400_83.jpg\" width=\"400\" height=\"83\"/></span><br /></span></p><p><span>这一个小时的Session属于进阶级的。Adobe开源Web编辑器<a href=\"http://brackets.io/\" target=\"_self\">Brackets</a>开发团队的Peter Flynn讲了很多JavaScript当下的情况和未来的趋势。<a href=\"http://bit.ly/W87Zwp\" target=\"_self\"><span>点击这里</span></a>查看Adobe官方的简介。他语速很快，我没有做听译，就把主要内容记录一下。</span></p><p><span>开场的时候举了JS里面很有趣的一个例子：</span></p><pre config=\"brush:js;toolbar:false;\">(![]+[])[+[]]+(![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]</pre><p><span>问上面这串代码的执行结果是什么。答案我不贴了，感兴趣的话自己试验一下吧。主要是说明JavaScript有时候是个quirky的语言。</span></p><p><span>Peter分了3块内容来讲，框架(Frameworks)，工具(Tools)和性能(Performance)。讲述的形式都是先提出问题(Problem)，说一下当前的解决方案(Solutions today)，最后看看未来的发展趋势(Future)。</span></p><!--more--><p><span><br /><br /></span></p><p><span><strong>Frameworks</strong></span></p><p><span>框架部分是概要形式的讲解，没有特别深入某一个框架。</span></p><p><br /></p><p><span><strong>Problem: Browser Inconsistencies</strong></span></p><p><span>各浏览器或者同一浏览器的不同版本之间，它们的API是不同的。例如IE9以前得使用</span><span>attachEvent</span><span>来实现</span><span>addEventListener</span><span>的功能；并不是所有浏览器都支持</span><span>&lt;input type=&quot;date&quot;&gt;</span><span>。</span></p><p><span><strong>Solution: JavaScript Libraries</strong></span></p><p><span>现在已经有很多JS库来解决这类问题。例如</span></p><p><span>jQuery和Underscore分别能够解决事件监听，异步请求和集合问题；</span></p><p><span>html5shiv/html5shim, selectivizr, es5-shim, MDN samples为旧版浏览器提供了Polyfills；</span></p><p><span>Modernizr, YepNope.js之类的在功能检测上提供了很大帮助；</span></p><p><span>另外还有一些Library bundles(HTML5 Boilerplate), Package managers(Bower), Scaffolding generators(Yeoman)提供更好的易用性。</span></p><p><span><strong>Future: Browser Improvements</strong></span></p><p><span>未来浏览器的发展还是很乐观的。现在浏览器新版本迭代速度很快，比起以前来说更加贴近规范。下面这张图，是W3Counter上截止4月份，IE的使用率变化趋势（呃，国内IE形式不太一样）。</span></p><p class=\"edui-filter-align-center\"><span class=\"text-img-holder\"><img src=\"http://m3.img.libdd.com/farm4/2013/0526/15/D790CA4C4405DBE1FD75E0578ED523FC01B3F069E6535_400_214.jpg\" width=\"400\" height=\"214\"/></span><br /></p><p><br /></p><p><span><strong>Problem: Dependency Spaghetti</strong></span></p><p><span>没有使用模块化加载之前，会碰到这样的问题：</span></p><pre config=\"brush:html;toolbar:false;\">&lt;script src=&quot;script3.js&quot;&gt;&lt;/script&gt;\r\n&lt;script src=&quot;script1.js&quot;&gt;&lt;/script&gt;\r\n&lt;script src=&quot;script4.js&quot;&gt;&lt;/script&gt;\r\n&lt;script src=&quot;script2.js&quot;&gt;&lt;/script&gt;\r\n&lt;script src=&quot;script5.js&quot;&gt;&lt;/script&gt;</pre><p><span>当然实际项目中脚本的文件名可能会更好看一点，但是文件之间的依赖性不明确。尤其是改了某些文件之后，这样的加载顺序是否还能正常工作。</span></p><p><span><strong>Solution: RequireJS</strong></span></p><p><span>阿里现在有SeaJS，人家在美国的话RequireJS更流行。来看个模块化加载的代码示例。每个文件封装成独立的模块，在文件内部需要用到其他模块是，使用require引入；使用exports把本模块暴露给其他模块。</span></p><p class=\"edui-filter-align-center\"><span class=\"text-img-holder\"><img src=\"http://m1.img.libdd.com/farm5/2013/0526/15/068BBA1743644FA92186A2B11D55C7BCE6CA071073BFA_400_93.jpg\" width=\"400\" height=\"93\"/></span><br /></p><p><span><strong>Future: Modules in ES6 Harmony</strong></span></p><p><span>ES6里面有了module的概念，比起上面这个方法，代码稍微简洁一些。</span></p><pre config=\"brush:js;toolbar:false;\">module 'foo' {\r\n    import 'pkg/Logger' as Logger;\r\n                                    \r\n    function sayHelloWorld() {\r\n        Logger.print(&quot;Hello, world!&quot;);    \r\n    }\r\n                                    \r\n    // Define public API\r\n    export sayHelloWorld;\r\n}</pre><p><br /></p><p><span><strong>Problem: Asynchronous Code</strong></span></p><p><span>异步调用是个麻烦的事情。虽然说有Callback这么个东西，但是它还是有提升的空间的。尤其是Callback嵌套的情况。</span></p><p><span><strong>Solution: Promises</strong></span></p><p><span>异步调用的时候，类似事件监听，来检测是否完成并得到结果。这种方式将返回一个Promise对象，在这个对象上做绑定事件。</span></p><pre config=\"brush:js;toolbar:false;\">var options = ...;\r\nvar promise = beginSomeAsyncOperations(options);\r\n                                   \r\npromise.done(function(result) {\r\n    console.log(&quot;Operation finished with result: &quot; + result);\r\n});\r\n                                   \r\npromise.fail(function(errorCode) {\r\n    console.log(&quot;Operation failed. Error: &quot; + errorCode);\r\n});</pre><p><span>更进一步，看下 beginSomeAsyncOperations 内部实现。</span></p><pre config=\"brush:js;toolbar:false;\">function beginSomeAsyncOperations(options) {\r\n    var result = new $.Deferred();\r\n                                  \r\n    sendNetworkRequest(function (response) {\r\n       if(response.error)\r\n           result.reject(response.error);\r\n        else\r\n           result.resolve(response.data);\r\n    });\r\n                                  \r\n    return result.promise(); // req still pending here\r\n}</pre><p><span>从上述代码可以发现这个异步API创建了一个Deferred对象，用于发送操作完成的信号。同时绑了一个Promise对象在Deferred上面，返回给外部的调用。</span></p><p><span><strong>Future: ES6 Harmony “yield” &amp; Better Debugging</strong></span></p><p><span>在ES6里面有一个任务计划的东西，即yield。下面是Promise链式调用和ES6 yield的对比。</span></p><p class=\"edui-filter-align-center\"><span class=\"text-img-holder\"><img src=\"http://m2.img.libdd.com/farm5/2013/0526/15/98DB823DF20A0F23C598D1810CF30C0A4DD44D4E189C7_400_107.jpg\" width=\"400\" height=\"107\"/></span><br /></p><p><span>异步调用的另一个问题是调试。</span></p><p><span>这里Peter介绍了Brackets的一个方向，下面这张截图是Brackets在异步调用Debug时会给出更加详尽的信息。</span></p><p class=\"edui-filter-align-center\"><span class=\"text-img-holder\"><img src=\"http://m1.img.libdd.com/farm5/2013/0526/15/A07978E0E0AD7DAF8954BB6199B5D0420DEDE70866D05_400_226.jpg\" width=\"400\" height=\"226\"/></span><br /></p><p class=\"edui-filter-align-center\"><br /></p><p><span><strong>Problem: Ad-hoc UI Updates</strong></span></p><p><span>在一个简单的页面里很可能会出现很多这样的代码：</span></p><pre config=\"brush:js;toolbar:false;\">$(&quot;#project-title&quot;).text(filename);\r\n                              \r\n$(&quot;.dialog .validation-error&quot;).toggle(isError);\r\n                              \r\n$(&quot;.modal-overlay ul.songs li:eq(&quot; + i + &quot;)&quot;).addClass(&quot;selected&quot;);\r\n                              \r\ndialog.appendChild(document.createElement(&quot;div&quot;));\r\ndialog.firstChild.innerHTML = &quot;&lt;input type='text' value='&quot;\r\n                            + htmlEscape(item.name) + &quot;'&gt;&quot;;\r\n                              \r\n$(&quot;#help-sidebar .main-content&quot;).html(newContent);</pre><p><span>这些更新View的代码分散在各种逻辑中。对于简单页面还好，但是在大型JS应用里面，这将会使维护成本大大增加，或者在将来某个时间根本就没法维护了。</span></p><p><span><strong>Solution: Templating &amp; MVC Frameworks</strong></span></p><p><span>使用JS模板引擎和MVC框架可以改善这个问题。例如使用Backbone来组织Model，配合Underscore，Mustache或者Handlebars之类的来处理View。现在也还有很多框架，诸如Knockout, Angular, Ember, Batman.js, Knockback等。</span></p><p><span><strong>Future: ES5 Getters/Setters</strong></span></p><p><span>在Getter/Setter上面还有简化的空间。</span></p><p><span>现在在Ember, Backbone里面得这么写：</span></p><pre config=\"brush:js;toolbar:false;\">name = model.get(&quot;songName&quot;);\r\nmodel.set(&quot;rating&quot;, 5);</pre><p><span>在Knockout里面是这样的：</span></p><pre config=\"brush:js;toolbar:false;\">name = model.songName();\r\nmodel.rating(5);</pre><p><span>将来都统一成ES5标准写法就更清晰了：</span></p><pre config=\"brush:js;toolbar:false;\">name = model.songName;\r\nmodel.rating = 5;</pre><p><br /></p><p><span><strong>Problem: Server Logs Miss Client-Side Trouble</strong></span></p><p><span>在Web 1.0的时代，app崩溃或者页面加载缓慢都会归结于服务端太慢。但现在的web app在客户端做的事比以前多的多了。要怎么才能知道在客户端的性能？</span></p><p><span><strong>Solution: Error Logging</strong></span></p><p><span>一种方法是创建一个errors集合，定期向服务端发送这个集合，来分析发生的错误。任何没有做特殊错误处理的代码，在出错的时候都会被push进这个集合里面。</span></p><pre config=\"brush:js;toolbar:false;\">var errors = [];\r\n                          \r\nwindow.onerror = function(msg, fileUrl, lineNum) {\r\n    errors.push({msg: msg, file: fileUrl, line: lineNum});\r\n};\r\n                          \r\nsetInterval(function() {\r\n    sendToServer(errors);\r\n    errors = [];\r\n}, 5000);</pre><p><span>这个API很简洁，但就目前来说也很有帮助。未来浏览器若能提供更好的错误反馈，那当然更好。</span></p><p><span><strong>Solution: Performance APIs</strong></span></p><p><span>在性能上，现在普遍使用事件发生前后的时间差来对比。</span></p><pre config=\"brush:html;toolbar:false;\">&lt;html&gt;\r\n&lt;head&gt;\r\n&lt;script&gt;\r\nfunction onLoad() {\r\n    var now = Date.now();\r\n    var pageLoadTime = now - performance.timing.navigationStart;\r\n                         \r\n    sendToServer(pageLoadTime);\r\n}\r\n&lt;/script&gt;\r\n&lt;/head&gt;\r\n&lt;body onload=&quot;onload()&quot;&gt;\r\n...</pre><p><br /></p><p><span><strong>Tools</strong></span></p><p><span>工具这块主要演示了Brackets编辑器的一些特性，以及对浏览器自带Debug工具的展望。</span></p><p><br /></p><p><span><strong>Problem: “Driving Without a Seatbelt”</strong></span></p><p><span>在JS里面变量的数据类型是可以随时改变的，编辑器不会有很强的类型检测。一些并不明显的类型转换， 在编辑器看来代码语法都是对的，出问题时可能会加大Debug的成本(我就有段时间把if(-1)当成是false的，折腾好久才发现)。另外，JS没有很明确的class或者module的概念，不同的人可能会使用不同的写法来处理同样的问题。</span></p><p><span><strong>Solution: Integrated Parsing/Linting</strong></span></p><p><span>JS不需要发布前编译，并不等于编辑器不用做语法检测。我现在用的是Sublime Text 2，习惯一直开着Sublime Linter。Dreamweaver在CS5以后就加入了动态检测，Peter介绍的Brackets当然也有这个功能，还做了一些改进。对一些可能发生错误的地方，会有警告。</span></p><p class=\"edui-filter-align-center\"><span class=\"text-img-holder\"><img src=\"http://m3.img.libdd.com/farm5/2013/0526/15/35093FA43C11CDD8C9165B3CCD252C3AC7679F4F0B209_400_107.jpg\" width=\"400\" height=\"107\"/></span></p><p><span><strong>Solution: Contextual Snippets</strong></span></p><p><span>Brackets的另一个功能，有点类似XCode里面的Jump to Definition。在XCode里面按住Option键点击方法名，跳到定义之后会直接切换到那个文件。看幻灯片里面的截图，Brackets想做的是直接找到方法，把它在当前位置展现出来。</span></p><p class=\"edui-filter-align-center\"><span class=\"text-img-holder\"><img src=\"http://m1.img.libdd.com/farm4/2013/0526/15/8BAB99E5D8032829FDCA35959F02D9436F039AEC0C7BB_400_113.jpg\" width=\"400\" height=\"113\"/></span><br /></p><p><span>我下载的测试版里面还没有这个功能，应该会在后续更新。</span></p><p><span><strong>Solution: Type Interface</strong></span></p><p><span>Sublime的代码提示，是根据你之前输入过的变量和方法名，来给出提示。当某个属性或方法不属于当前所在的执行环境的时候，也会提示。Brackets里面想要更进一步，判断当前变量的类型，给出对应的提示。目前测试版本的代码提示还没完善，但感觉比Dreamweaver的要好用。</span></p><p><span><strong>Solution: Cross Compilers &amp; Source Maps</strong></span></p><p><span>现在还是有很多人用诸如CoffeeScript等需要编译成JS的语言的，在浏览器的Debug工具里面加入对这些语言的支持，将给调试带来很大方便。例如Chrome现在就支持调试coffee代码，但目前它的Scope Variables这类的面板还是显示编译后的内容。所以这是个好的开端，有待完善。</span></p><p class=\"edui-filter-align-center\"><span class=\"text-img-holder\"><img src=\"http://m3.img.libdd.com/farm5/2013/0526/15/390BED8DC999821790FB7A57F054F1CBEE8AAB9259FDE_400_157.jpg\" width=\"400\" height=\"157\"/></span><br /></p><p><span><strong>Future: Code/Test/Debug Cycle</strong></span></p><p><span>Brackets编辑CSS文件的时候可以在鼠标划过颜色定义时，直接给出预览，包括CSS渐变。我之前在Mac下用过Espresso，它的预览功能可以在不保存代码的情况下直接反映出改动的结果。目前Brackets对CSS也有这个调试功能，但HTML和JS文件需要手动保存后，才会自动刷新页面。好像Windows上也有个工具叫做F5，没有用过，不晓得是什么样的交互反馈。</span></p><p><span>目前各浏览器的调试工具只会在你加断点的地方告诉你当前变量的值是多少，至于这个值是哪一段代码的执行结果，是要我们自己去查找的。这里希望未来浏览器能够给到Historical debugging/Reverse debugging的功能，让整个调试过程更清晰省事。</span></p><p><span>Peter在这里演示了Brackets里面一个叫做Instabug的功能，目前测试版好像还没有提供。简单来说，就是你可以单独执行JS文件的某一个功能函数，编辑器会让你输入变量，然后把每一步的执行结果输出，方便调试。</span></p><p class=\"edui-filter-align-center\"><span class=\"text-img-holder\"><img src=\"http://m2.img.libdd.com/farm4/2013/0526/15/ABAF8BBE6EA4FD860C20C75B9DA2C443A86A8EC9CBCF2_400_200.jpg\" width=\"400\" height=\"200\"/></span><br /></p><p><br /></p><p><span><strong>Performance</strong></span></p><p><span>性能这块着重介绍了Chrome的Timeline面板，然后简单介绍了浏览器带的其它几个小工具。</span></p><p><br /></p><p><span><strong>Problem: Hard to Measure</strong></span></p><p><span>前面已经提到过，对于一段JS代码的执行效率，可以用事件发生前后的时间差来描述。但是这个过程中CSS样式的计算，布局的变化，浏览器的重绘过程，用这样的方法是看不出来的。</span></p><pre config=\"brush:js;toolbar:false;\">var start = Date.now();\r\n                \r\n// ... Do some stuff ...\r\n                \r\nvar end = Date.now();\r\nconsole.log((end - start) + &quot;ms&quot;);\r\n                \r\n// So what about\r\n// CSS style calculation\r\n// Layout\r\n// Repaint\r\n// User sees update -&gt; Date.now() == ???</pre><p><span>这里Peter给出了一组测试数据：</span></p><p class=\"edui-filter-align-center\"><span class=\"text-img-holder\"><img src=\"http://m3.img.libdd.com/farm5/2013/0526/15/4BC339FC81DA44B4ECC77D4F159973A254547FE163CD9_400_175.jpg\" width=\"400\" height=\"175\"/></span><br /></p><p><span>从中可以看到，用上面这段代码得到的性能数据，和浏览器真实发生的时间对比，差别还是很大的。</span></p><p><span>看到这里不知道你有没有发现一个问题。</span></p><p><span>既然用上面的JS代码没法准确测试出数据，那这个图标里面的橙色数据是从哪里来的？</span></p><p><span>这里Peter给出了一个很有意思但很耗时间的测试显示器刷新内容性能的方法：用高速摄影机拍摄。</span></p><p class=\"edui-filter-align-center\"><span class=\"text-img-holder\"><img src=\"http://m2.img.libdd.com/farm5/2013/0526/15/C0416F61C952C59226CD0A559D41A30E914EBD55E5A87_400_308.jpg\" width=\"400\" height=\"308\"/></span><br /></p><p><span>他播放了一段摄影机拍下的画面，内容是他以最快的速度重复按键盘上的一个键，看屏幕的渲染与按键的时间差。从这段视频来看这个差距是很清晰的。但是用这个方法，一个问题是成本高，另一个问题是它只能告诉你这儿有一个性能问题，至于为什么会有这个问题，要怎么解决，是看不出来的。</span></p><p><span><strong>Solution: Browser Performance Tools</strong></span></p><p><span>首先介绍了Chrome的Timeline面板，讲解怎么查看浏览器渲染的效率。</span></p><p><span>Peter在这里用了一个Canvas动画的例子。他在一个固定尺寸的Canvas里边画了200个矩形，对它们做初始速度随机的匀速运动动画。</span></p><p><span>一般来说，浏览器会在JS运算完成之后，再拿到新的数据去重新渲染内容。但是，如果在动画计算的过程中，去获取某个DOM节点的宽度，那么浏览器就被迫重新渲染以返回值。在这里Peter就是把获取Canvas尺寸的代码放在初始化执行一次，和放在每一次计算动画位置时都执行一次做个对比，可以很明显地从Timeline面板里面看到数据的区别。</span></p><p class=\"edui-filter-align-center\"><span class=\"text-img-holder\"><img src=\"http://m2.img.libdd.com/farm4/2013/0526/15/7114FEDF76B54886C349DCF602E7DA933136AE4F81990_400_114.jpg\" width=\"400\" height=\"114\"/></span><br /></p><p><span>至于Timeline更详细的用法，可以参考Chrome的<a href=\"https://developers.google.com/chrome-developer-tools/docs/timeline\" target=\"_self\"><span>文档</span></a>。这些柱状图的颜色都代表着一个阶段，而每个阶段都是什么意思，在<a href=\"http://stackoverflow.com/questions/10537399/what-does-the-times-mean-in-google-chromes-timeline-in-the-network-panel\" target=\"_self\"><span>Stack Overflow</span></a>上也有人回答过了。</span></p><p><span>此外，还简单介绍了下面几个性能工具：</span></p><p><span>FPS counter: 在chrome://flags里面可以打开，但是它是影响所有的Tab的；</span></p><p><span>CSS selector profiling: 在Profiles面板下选择Collect CSS Selector Profile录制一段时间就可以看到数据；</span></p><p><span>Show paint rectangles &amp; Show composited layer borders: 在开发者工具的设置里面，Rendering分组下的两个选项，勾选后可以看到浏览器重绘页面的一些信息</span></p><p><span><strong>Future: Programmatic APIs</strong></span></p><p><span>W3C有一个Web Performance Working Group。这个小组提供了很多有价值的规范，包括页面加载性能，还有浏览器渲染相关的，如requestAnimationFrame等。在未来应该会提供更多的JS API规范，例如：</span></p><p><span>Resource Timing: 不仅是页面加载的时间，还包括图片，脚本等资源的加载分析</span></p><p><span>Async Scroll: 异步滚动加载的性能问题</span></p><p><span>Display Performance: 渲染性能，例如FPS信息</span></p><p><br /></p><p><span><strong>Conclusion</strong></span></p><p><span>以上就是这接近1个小时的Session所包含的内容，这份笔记可能不是很完善，也可能有些地方理解不到位，翻译的有问题，烦请各位指正。</span></p><p><span>我在换到Sublime Text之后就严重依赖Cmd + D和Cmd + Control + G这两个快速选择的功能，不知道这里边提到的Brackets编辑器会不会开发这个。写笔记的时候也试尝试了一下测试版，感觉代码提示还是挺不错的，jQuery这种提示也很齐全。像我这种喜欢亮色系配色风格的人，真是大爱默认的配色方案啊。</span></p><p><span>最后贴一张<a href=\"http://brackets.io/\" target=\"_self\">Brackets</a>的截图，这是个用HTML，CSS和JavaScript构建的编辑器。</span></p><p class=\"edui-filter-align-center\"><span><span class=\"text-img-holder\"><img src=\"http://m3.img.libdd.com/farm4/2013/0526/15/1BE870CCD34611E2F6E21F7346DEC1C3E465871234508_400_250.jpg\" width=\"400\" height=\"250\"/></span><br /></span></p>"
            ],
            "pubDate": [
              "Sun, 26 May 2013 07:16:56 GMT"
            ],
            "guid": [
              "http://yehao.diandian.com/post/2013-05-26/40051450882"
            ]
          },
          {
            "title": [
              "What's new with me recently"
            ],
            "link": [
              "http://yehao.diandian.com/post/2013-05-25/40051165948"
            ],
            "description": [
              "<p><span class=\"text-img-holder\"><img src=\"http://m1.img.libdd.com/farm4/2013/0525/00/80C986FBFCC6C6ACDF98BAC0EECEB827A1FAE963B1365_400_83.jpg\" width=\"400\" height=\"83\"/></span><br /></p><p>这的文章基本上保持着一个月一篇的缓慢节奏，大半个月之前就想写点最近折腾Canvas的内容，结果想着做完基本功能之后就写个小结，却在过去的两周被业务忙死。按某些人的讲法，美其名曰“拖延症”，实际上就是懒。上班够折腾了，下班回来随便看点东西也就懒得动了。呃，往下看不会有什么实质性的内容，只是把最近差不多一个月的生活流水账一下。用我同事的话讲其实就是碎碎念。</p><p><strong>House</strong></p><p>房子租期一年，下个月的这一天应该已经到期了。公司要在7月底搬到余杭，这得多少折腾啊。听起来上个班在一个偏僻的小郊区一样。月初的时候和同事往城西方向转了一大圈，接近公司新址的那一片区域，我想说荒凉。想不通住在那的人们平时是去哪吃饭的呢。</p><p>我不喜欢再往西边去了，不然大半夜的从火车站出来回个家都是麻烦。杭州人好像都歇的早，地铁8点半就没了，往城西的公交车大多数会在9点左右停掉，交通只能用“奇葩”两字来形容。</p><p>再过个礼拜估计又得去晃一圈然后定下来，好在班车能在蒋村公交中心站发车。我虽然宅，但是也得住个去杭州市区交通方便的地方，尽管次数不多。</p><p><strong>Taobao 10th Anniversary</strong></p><p>这个月10号，淘宝10周年，礼拜五，早上速度折腾完工作，去玩公司的活动。我对那个10周年的大号淘公仔比较感兴趣，谁知道玩这活动的人这么多，还都这么积极啊，11点在产业园主场什么东西都没拿到，奖品发完了。</p><p>盖个章，直奔支付宝，搞了一件10周年纪念T恤。</p><p>这一天来的家属很多，导致中午去支付宝楼下港式茶餐厅吃饭的时候人暴多，和平常过去空荡荡的场景完全是两回事，就跟刚开业凑热闹的人特多一样。更神奇的是同事吃完她的面我点的东西还没上，于是退掉跑到天猫楼下肯德基吃鸡肉卷去。话说那一天杭州还处于禽流感注意时期。</p><p>很完美的到了下午高端的奖品都发完了，去创业大厦淘宝网那个替代奖品，一盒12星座的面膜。好吧，我不需要这个东西。另一个选项是什么原液，我压根不知道原液是干嘛用的，外包装倒是很好看，礼盒装，还是算了。</p><p>要回去的时候又去天猫拿了张新卡片，去补偿一下我在产业园没拿到的淘公仔。我还想是不是多折腾几次弄一堆回去，<span>是有点邪恶了</span>。</p><p class=\"edui-filter-align-center\"><span class=\"text-img-holder\"><img src=\"http://m3.img.libdd.com/farm4/2013/0525/00/0A9F63401D15009701893CC7B5C22A26948E200093173_400_167.jpg\" width=\"400\" height=\"167\"/></span><br /></p><p>晚上晚会前各种拍照各种微博各种下载客户端，又弄到几个淘公仔。也就这个东西吸引人了，不然也不会没事情在那排队瞎折腾。在一个展位前一位MM很热情的给我介绍卖家服务什么的，我问她参加了有什么东西送么，她说可以过两天在淘宝的某个页面上看到我写的东西。然后速度打断退出，人家看着郁闷。没办法，参加这种活动我就比较庸俗，冲着物质奖品来的。另外旺旺团队那个iPhone的手机壳看着挺不错的。</p><p class=\"edui-filter-align-center\"><span class=\"text-img-holder\"><img src=\"http://m2.img.libdd.com/farm4/2013/0525/00/3DD223F93A165255B81AD9F3F65EF0243CFDEB588CB9B_400_195.jpg\" width=\"400\" height=\"195\"/></span><br /></p><p>黄龙体育馆这么大，远远地坐在看台上舞台什么事情反正都不晓得。大屏幕也看不清，真的就是纯粹来感受现场气氛的。不过很多人去看什么演唱会不也就这样么。气氛胜过内容。我对节目没什么话好说，倒是现场的舞台灯光，还有屏幕里边的特效视频对我更有吸引力。没办法，以前不会画画（现在也不会画画）要做Flash的时候我就用AE快速解决，导致现在对这种东西更感兴趣。</p><p>第一次看马云的现场演讲，人反正有看不清，就听听呗。</p><p class=\"edui-filter-align-center\"><span class=\"text-img-holder\"><img src=\"http://m1.img.libdd.com/farm5/2013/0525/00/09EC7D6F39EBAB8B3F6D0AF2B580E75E124E022904CE0_400_209.jpg\" width=\"400\" height=\"209\"/></span><br /></p><p>还有，大爱现场那个“亲”的Logo，最近我的项目改名“亲.淘宝”，这Logo越看越好看。</p><p>Zhejiang University</p><p>最近好像到了周末天气就不好，上班都是大太阳，下雨都留在周末了。上周同一天去了浙大两个校区，蹭了2次饭，并且体验了一下亚洲最大的食堂。</p><p>中午在玉泉校区的时候跟在留学生食堂和另外2个人拼桌，我们才3个人我同学点了个一品锅。话说我们平常中午出去七八个人也才吃完一品锅。更神奇的是他说没有碗，又去买了3碗饭，于是我们就有碗了。所有的菜上齐之后我们和服务员讲一品锅还没来，服务员说你们不是点了饭么，我们讲还点了一品锅。然后一大碗饭放到了桌上，对面拼桌那两人都要笑趴下了。</p><p>之前去过几次玉泉校区，反正都跟吃的有关系。浙大这么有氛围的地方在我这种人去的目的也只有一个，吃东西。最早是美食节，其实就是各种烧烤。后来中午吃饭嫌弃公司旁边那几家，又跑来这里改善伙食，价格还更不错。</p><p>这天晚上又跑去紫金港体验最大食堂。去年夏天来的时候刚好是暑假时期，都没开的。这回体验的比我原来大学食堂高级的多的多的多了。同学带我去吃自助式的，我觉得和我5年前刚上大学那会差不多价格啊，根本就没怎么涨价的。而且味道也很不错。说是外边的人过去可以办个卡，拿100块当80块用，那也比公司对面那啥餐厅便宜多了。</p><p class=\"edui-filter-align-center\"><span class=\"text-img-holder\"><img src=\"http://m1.img.libdd.com/farm4/2013/0525/00/2A26A9D45DB098F7E5EB5B376E28279DF904B7052196D_400_248.jpg\" width=\"400\" height=\"248\"/></span><br /></p><p><strong>Work</strong></p><p>最近业务线很忙，这周几乎是全负荷状态。但是不晓得为什么晚上回来还兴致很好，连续看了好几天Adobe Max 2013上感兴趣的话题。</p><p>最近在做一个东西，就是用Canvas来实现图像截取功能。其实理想的状态是让用户拉一个矩形框，然后人像就从背景里边抠出来了。网上应该有个论文讲grabcut这个算法的。我反正已经看不懂各种偏导数了，而且这东西放在JavaScript里面也不好实现。于是先按照最初的想法做，还原了Photoshop的钢笔工具。</p><p>我自己对PS还算是比较熟的，不过当你把钢笔这个算是高级的工具给普通用户使用的时候，就得更改一些使用习惯。Modifier Keys越少越好，得符合多数用户日常使用Web的习惯。</p><p>另外花一天时间折腾了个魔棒，PS里面最不会用到的一个选择工具。Color Range才是更好用的。但是实现上来说这个东西最简单了。就是<a href=\"http://en.wikipedia.org/wiki/Flood_fill\" target=\"_self\">Flood Fill</a>的一种JavaScript实现。<a href=\"http://codepen.io/sstephenson/pen/LrJIG\" target=\"_self\">蚁线</a>直接从<a href=\"http://codepen.io/\" target=\"_self\">codePen</a>上拿了现成的做了次封装。</p><p>等后面有时间的时候增加一下放大和缩小功能，然后把这东西再具体描述一下吧。</p><p><strong>Done</strong></p><p>差不多念完了，下周一去办个护照，一定要找个时间去一次罗马让同学带着晃晃。另外今年团队的outing希望能去台湾。</p><p>周末了，要自然醒。</p>"
            ],
            "pubDate": [
              "Fri, 24 May 2013 16:00:19 GMT"
            ],
            "guid": [
              "http://yehao.diandian.com/post/2013-05-25/40051165948"
            ]
          },
          {
            "title": [
              "The First Time through Ruby on Rails Tutorial"
            ],
            "link": [
              "http://yehao.diandian.com/post/2013-04-14/40049351363"
            ],
            "description": [
              "<p><span class=\"text-img-holder\"><img src=\"http://m2.img.libdd.com/farm4/2013/0414/22/ED338C13ED1F403174A1CB4F6A0321E06468DFD782C52_400_83.jpg\" width=\"400\" height=\"83\"/></span><br /></p><p>去年接近年底的时候买的<a href=\"http://www.amazon.com/Ruby-Rails-Tutorial-Addison-Wesley-Professional/dp/0321832051/ref=sr_1_1\" target=\"_self\">这本书</a>，断断续续的看着，到今天终于完整地过完第一遍了。Rails的书就看过这一本，和之前看过讲PHP或者JavaScript的书比起来，例如<a href=\"http://www.sitepoint.com/\" target=\"_self\">Sitepoint</a>的<a href=\"http://www.amazon.com/PHP-MySQL-Novice-Kevin-Yank/dp/0987153080/ref=sr_1_1\" target=\"_self\">PHP &amp; MYSQL: NOVICE TO NINJA</a>这种，在内容上编排上感觉属于两种风格的。这个更像是大学里边上课一样，除了Rails之外，外带一点点Ruby快速入门，Git的基本配置和使用，如何把站点部署到<a href=\"https://www.heroku.com/\" target=\"_self\">Heroku</a>上面。</p><p>整个过程就像上一门课一样，不能从第三章直接跳到第六章，得每个章节按顺序学习。作者的写作风格也很像是在授课，会先提出问题，描述一个大体的思路，再开始编写测试代码，然后才是程序代码，当测试通过之后可能再回过头来整理程序代码，让结构更加清晰合理，每章最后再留一些练习。</p><p>这是一本测试驱动开发的教程，完成整本书之后，会发现写的测试代码比程序代码还要多。如果从来没有过网站开发的经验，读起来还是挺累的。</p><p>第一章讲了Rails的环境搭建，Git的安装，Heroku的配置，可能会觉得作者把很多东西一下子全塞给你了。</p><p>第二章介绍了MVC和REST，并且用脚手架（scaffolding）快速搭建了一个完整的Demo。如果跟着做一遍，最后发现这么短时间就能搞出一个发布到Heroku上的应用，会稍微有点成就感。</p><p>第三章开始引出另一个应用，一个类似Twitter的网站，整个教程将一步步地讲解，利用8个章节，完成这个网站。而这一章除了介绍网站整体之外，就是一些静态页面的搭建，同时引入TDD（测试驱动开发），对静态页面编写测试。</p><p>第四章是Ruby的快速入门，里面介绍的内容足够在这个Rails项目里边使用了。我之前是先看了LDC的Ruby Essentials的，这一章就随便过了一下。</p><p>第五章把页头、页脚等公用部分搭建完毕，同时制作了一个首页，简单介绍了一下SASS和Bootstrap。跟前端有关系的东西我都没细看，直接copy了代码就过了。</p><p>第六章到第九章着重讲解User Model，用户的注册，登入，退出，更新用户信息和删除，包括权限验证。也就是Rails里面如何处理CRUD和Authentication。中途介绍了Routes的基本内容以及安全方面的一些问题。</p><p>第十章是Micropost Model，讲解了has_many和belongs_to的用法。</p><p>最后一章是Following Users，也就是新浪微博上所谓的粉丝和关注。这一章介绍这个流程的时候有点绕，因为Twitter上面用的是Following和Follower。但是Following很容易产生歧义，作者用的是Followed User，再绕几下就混乱了。 还好用微博也用了一段时间了，对整个流程算熟悉的了。这一章重点是讲解has_many through的用法，如何把用户与用户之间的相互关系实现出来，并简单的介绍了一点点Ajax提交表单的内容。</p><p>作者在最后给出了一些学习的资源，还有好几个有挑战性的任务，就是给这个项目加上更多的功能，例如邮件通知，搜索，评论等。</p><p>以上就是这本书大致讲的内容，如果有网站开发经验，又想入门Rails的话，这本书应该还不错，只要你不反感一本初中级教程在测试驱动开发上耗费很大的篇幅。</p><p>最后说点自己的感受和想法。</p><p>其实我之前准备深入学习PHP的，不过我们组的自主项目都是Rails的，于是又心血来潮买了本书开始入门。我选这本书也就是看了一下<a href=\"http://www.amazon.com/\" target=\"_self\">Amazon</a>上大家的<a href=\"http://www.amazon.com/Ruby-Rails-Tutorial-Addison-Wesley-Professional/product-reviews/0321832051/ref=dp_top_cm_cr_acr_txt?ie=UTF8&amp;showViewpoints=1\" target=\"_self\">评价</a>还挺不错，而且是去年的6月份出版的，算是比较新的了。最主要的还是这本书是测试驱动开发的，我从来没有接触过这方面的内容，所以在看了前面的章节之后觉得还挺有意思的。而作者所选的示例又是现在很流行的微博类应用，还原一个简版的每天都在用的东西，书看起来会更有兴致一点。再有就是虽然是本讲Rails开发的书，那也用了<a href=\"http://twitter.github.io/bootstrap/\" target=\"_self\">Bootstrap</a>把界面整了一下（尽管这东西满大街都是），像我这种之前也做过点设计的对样式还是挺在意的。至少不会像国内一些书，从头到尾搞个很难看的表格在那做示例。</p><p>不过Rails学习的内容感觉蛮多的，就入门而言感觉没PHP来得快。现在我只是从头到尾跟着做了一个示例，有很多内容记不太清。假设自己完全开始新建一个项目，还是有点困难的。后面有时间再回顾一下整个流程和代码，有必要把一些内容再重新看一遍。</p><p>还有，这是除了Cocoa之外，又一个MVC在我的思路里边是非常清晰的框架，我写JavaScript的时候就没有这种感觉，之前ActionScript 3也是的。或许是新建项目的时候就把整个项目结构给我定好了的原因。</p><p>其实我看书的耐心不是很好，这是去年买的书了，到现在才过完第一遍。要不是中途在我们组的一个Rails项目上要增强搜索功能，估计这会还停留在50%的进度。</p><p>多数时间我会选择视频教程。有的人可能觉得看视频学不到东西，看过就忘了。虽然说一个教程可能12-20个小时，看起来时间挺短，但事实上视频都是剪辑过的，如果边看边做，还得写keynote或者pages做笔记，一个10小时的教程估计最快也得2.5到3倍的时间，其实折算下来和一本四五百页的书也是差不多的。</p><p>这本书还有配套的<a href=\"http://ruby.railstutorial.org/#bundle\" target=\"_self\">Screencast</a>，有时间了再看看吧。</p>"
            ],
            "pubDate": [
              "Sun, 14 Apr 2013 14:11:02 GMT"
            ],
            "guid": [
              "http://yehao.diandian.com/post/2013-04-14/40049351363"
            ]
          },
          {
            "title": [
              "响应式设计初探"
            ],
            "link": [
              "http://yehao.diandian.com/post/2013-03-15/40049907910"
            ],
            "description": [
              "<p><span class=\"text-img-holder\"><img src=\"http://m2.img.libdd.com/farm5/2013/0313/23/79C7B08FDC6949A79DCFEB6473974FCAED4ED95A6C417_400_83.jpg\" width=\"400\" height=\"83\"/></span><br /></p><p>据说今年在业务上会有一些移动端的内容，目前还没接到过需求，看起来是有这么个趋势。不过就当前来看，可以说响应式设计不是可选，而是必须了。</p><p>刚好最近上班事多，回来也懒得碰跟目前业务相关的东西了，所以换个口味，看点Responsive Design的东西。<span>对网页的移动端了解不多，只在1年多以前做过一个很简单的设计，照着教程写过一个小游戏，玩一点最初级的iPhone应用开发。</span>下面的东西有点长，是这几天学习的一些基本概念。跟代码没太多关系，入门级别的内容。可能有一些名词的翻译还有解释有些问题，麻烦各位指正。</p><p>&nbsp;</p><!--more--><p><strong>Mobile viewport</strong></p><p>我不是很清楚viewport在网页设计里面翻译成什么，以前用AutoCAD的时候也会碰到这个词，中文版里面翻译成“视口”。</p><p>当我们在桌面端浏览网页的时候，viewport指的是浏览器窗口的大小。因此在桌面端，viewport是不受屏幕大小的限制的，我们可以通过调整浏览器窗口大小来改变viewport的尺寸。</p><p>在移动端，viewport也差不多是这么回事，只是我们通常没法缩放窗口。由于移动设备的屏幕尺寸比较小，移动端的viewport通常要比屏幕尺寸大一些。例如iPhone 3GS的屏幕分辨率是320x480，但是iPhone上面Safari的viewport是980px。</p><p>一般来说，移动端的网页是根据浏览器的viewport来渲染，然后向下缩放以适应屏幕尺寸。这就是为什么我们用iPhone上的Safari打开例如apple.com的时候整个页面会看起来非常小，但是却把所有的内容都展现出来了（下左图）。如果浏览器是按照1：1的屏幕尺寸和viewport比例，我们在打开一个没有对移动设备做优化的页面，将会只能看到页面的左上角部分（下右图）。</p><p class=\"edui-filter-align-center\"><span class=\"text-img-holder\"><img src=\"http://m3.img.libdd.com/farm4/2013/0314/21/30B8E676A69EC0B6A3403AACE93F19AFFD1B2E61FCC6E_400_283.jpg\" width=\"400\" height=\"283\"/></span><br /></p><p>所以说，默认的viewport缩放功能对于展现为桌面端设计的网页是很合适的，但是如果网页就是专门设计成320px的移动版，按照这种方式，整个页面会是下面这样子的。这时，我们就要手动控制viewport和初始缩放比例了。</p><p class=\"edui-filter-align-center\"><span class=\"text-img-holder\"><img src=\"http://m1.img.libdd.com/farm5/2013/0314/21/28D6573EA3239D13F5B39A07404E14848C0179E269F5C_256_369.PNG\" width=\"256\" height=\"369\"/></span><br /></p><p><strong><br /></strong></p><p><strong>Controlling viewport</strong></p><p>对于控制viewport，有两种方式：</p><p>使用&lt;meta&gt;标签，指定其name属性为viewport：</p><pre config=\"brush:html;toolbar:false;\">&lt;head&gt;\r\n  &lt;meta name=&quot;viewport&quot; content=&quot;width=480, initial-scale=1&quot;&gt;\r\n&lt;/head&gt;</pre><p>或者使用CSS的@viewport语法：</p><pre config=\"brush:css;toolbar:false;\">/* CSS Document */\r\n@viewport {\r\n  width: 480px;\r\n  zoom: 1;\r\n}</pre><p>如果使用后者的话，因为它会影响到media query，因此推荐把这段内容放到所有media query引用的前面。</p><p>当然，并不是所有的设备屏幕都是480的宽度，因此这里指定width属性的时候通常会使用device-width：</p><pre config=\"brush:html;toolbar:false;\">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width&quot;&gt;</pre><p>或者</p><pre config=\"brush:css;toolbar:false;\">@viewport {\r\n  width: device-width;\r\n}</pre><p>这里也可以指定height为device-height，不过通常不太会用到这个。</p><p>另外上面的代码里面没有写initial-scale=1。当指定width=device-width的时候，默认就会使用initial-scale=1。如果再次显式地指定initial-scale=1，在iOS上面转动设备的时候会出缩放不正常的bug。</p><p>这里我们还可以设置用户缩放比例，例如：</p><pre config=\"brush:html;toolbar:false;\">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, minimum-scale=1, maximum-scale=2&quot;&gt;</pre><p>或者</p><pre config=\"brush:css;toolbar:false;\">@viewport {\r\n  width: device-width;\r\n  min-zoom: 1;\r\n  max-zoom: 2;\r\n}</pre><p>这样的话，用户双指缩放的范围就限定在100%-200%之间。</p><p>最后，如果你觉得有必要完全禁止用户对网页内容进行缩放，可以这么写：</p><pre config=\"brush:html;toolbar:false;\">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, user-scalable=no&quot;&gt;</pre><p>或者</p><pre config=\"brush:css;toolbar:false;\">@viewport {\r\n  width: device-width;\r\n  user-zoom: fixed;\r\n}</pre><p>这里提到的两种方式，前者多数浏览器都支持，后者还是比较新的，可能需要vender prefix。</p><p>更多关于控制viewport的内容，可以看一下apple的<a href=\"http://goo.gl/Rxfdi\" target=\"_self\">Safari HTML Reference</a>和<a href=\"http://goo.gl/FV5Pa\" target=\"_self\">W3C的文档</a>。</p><p>&nbsp;</p><p><strong>Densities</strong></p><p>前面举例的时候提到了iPhone 3GS，它的屏幕是3.5英寸，分辨率是320x480。而iPhone 4S的屏幕尺寸也是3.5英寸，但是它的分辨率是640x960。也就是说，在相同的屏幕尺寸下，4S比3GS展现了更多了像素信息。因此在设计过程中，这里就牵涉到两种像素：硬件像素(Hardware Pixels)和参考像素(Reference Pixels)。</p><p>下面以iPhone 3GS和4S的屏幕为例来说明。同样的屏幕尺寸下，4S展现的硬件像素信息是3GS的4倍。如果屏幕上有一行字，以硬件像素来衡量的话，在3GS上(左图)就会比4S(右图)大一倍。</p><p class=\"edui-filter-align-center\"><span class=\"text-img-holder\"><img src=\"http://m3.img.libdd.com/farm4/2013/0314/21/ACAE4ACC9740158E527ACBA21F3771A3AC95CE5D25490_395_182.PNG\" width=\"395\" height=\"182\"/></span><br /></p><p>因此这里我们就需要另一个概念，Reference Pixels。它是独立于Hardware Pixels的，如果有一个30x30px宽的正方形，使用Reference Pixels来计算，在iPhone 3GS上就是占用30x30px的Hardware Pixels(下左图)，而在4S上则占用60x60px的Hardware Pixels(下右图)。</p><p class=\"edui-filter-align-center\"><span class=\"text-img-holder\"><img src=\"http://m1.img.libdd.com/farm4/2013/0314/21/5988A9AA2FD6CDC6ED99192205A25D05F0C7FA326801E_393_182.PNG\" width=\"393\" height=\"182\"/></span><br /></p><p>这里就产生了一个缩放比例，称为device-pixel-ratio，它是Reference Pixels和Hardware Pixels的比值。</p><p>对于这么多移动生产商的产品，在<a href=\"http://goo.gl/5aFuY\" target=\"_self\">这个页面</a>上我们可以查到很多对应的信息。</p><p>当然，高分辨率屏幕不仅仅是在移动设备上，去年6月份苹果发布的新款Retina Macbook Pro的device-pixel-ratio也是2。</p><p>说了这么一堆东西，好在我们在写CSS的时候是不用考虑这么多的。对于文本信息，我们只要按照device-pixel-ratio为1的情况来指定字体、边框等数值，设备自动会帮我们进行缩放。</p><p>然而，对于图片来说，在创建响应式页面的时候，我们还需要考虑图片在高分辨率屏幕下的显示质量。</p><p>对于图片的问题，使用SVG或者CSS来替换部分图片是一个解决方案。但就SVG来说，它的文件尺寸回比同等的位图要大，并且用户每次缩放或者拖动屏幕内容的时候都要重新绘制。用CSS来替代的话可能会在HTML里面写入一些空的标签，专门用来显示某些图像，另外CSS3的支持程度各不相同。</p><p>另一个解决方案是iconfont。可能带来的问题是在HTML中会写入一些特殊字符，对于使用屏幕阅读器会有一些影响。</p><p>最后回到图片本身。还是iPhone 4S的例子，它的device-pixel-ratio为2，对于一张普通屏幕下尺寸为100x100的图片，需要准备一张200x200px的图片给4S来用，就像这样：</p><pre config=\"brush:html;toolbar:false;\">&lt;img src=&quot;images/hi.jpg&quot; width=&quot;100&quot; height=&quot;100&quot;&gt;</pre><p>使用高清图片最省事的做法是不考虑屏幕的问题，一律使用高清素材，这样就只要准备一份图片资源了。当然这会使图片尺寸增加，并且并不是所有的设备都有相同的device-pixel-ratio，得考虑所谓的高清到底是多么高清。就上面这个iPhone 4S的例子来说，可以这么写：</p><pre config=\"brush:css;toolbar:false;\">@media screen and (device-pixel-ratio:2) {\r\n  .highres {\r\n    background: url(images/hi.jpg);\r\n    background-size: 50%;\r\n  }\r\n}</pre><p>这里hi.jpg应该是一张200x200px的图片。不过这样写CSS的兼容性还是要考虑的。</p><p>再进一步优化，就得用到JavaScript来做判断并加载合适的图片了。</p><p>说到这里又得考虑另一个问题，除了Retina屏幕的MBP，基本其他高分辨率屏幕的设备都是移动设备。而移动设备的网络又得考虑流量和速度的问题。用户在手机上看图片，到底更在乎图片的质量，还是说只想要看一下有这么个图片，下载个低质量版本就够用了？这就还得去分析应用场景了。</p><p>&nbsp;</p><p><strong>Media Queries</strong></p><p>Media Queries并不是新东西，CSS很早就支持指定media类型了，可以把Media Query看成是这个功能的扩展。普通的桌面端CSS引用，通常是这样子的：</p><pre config=\"brush:html;toolbar:false;\">&lt;link ref=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;main.css&quot; media=&quot;screen&quot;&gt;</pre><p>这里的media属性已经存在很久了。过去常用的值有screen，projection，print等等。</p><p>Media Query则允许我们这样子来写media属性：</p><pre config=\"brush:html;toolbar:false;\">&lt;link ref=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;main.css&quot; media=&quot;screen and (min-width: 480px)&quot;&gt;</pre><p>单独来看它的语法是这样的：</p><pre config=\"brush:css;toolbar:false;\">@media [not | only] screen [and] (expression) {\r\n                                                                         \r\n}</pre><p>具体这些东西代表什么，expression要怎么写，可以参见<a href=\"http://goo.gl/rdG8e\" target=\"_self\">W3C的文档</a>。</p><p>Media Query可以写在&lt;link&gt;标签内，就像上面的代码这样。也可以写在CSS的@import声明里面，例如：</p><pre config=\"brush:css;toolbar:false;\">@import url(example.css) screen and (max-width: 480px);</pre><p>还可以写在CSS的@media语句里面，例如：</p><pre config=\"brush:css;toolbar:false;\">@media only screen and (max-width: 480px) {\r\n  p {\r\n    color: white;\r\n    background: rgb(117, 15, 25);\r\n  }\r\n}</pre><p>如果还要考虑旧版IE的支持的话，可以看一下<a href=\"http://goo.gl/6ptJG\" target=\"_self\">Respond.js</a>。</p><p>Media Query在网上的很多例子，包括Dreamweaver里边的模版，经常会看到下面这样的界限尺寸：</p><pre config=\"brush:css;toolbar:false;\">@media only screen and (max-width: 480px) {\r\n  // mobile styles go here\r\n}\r\n                                                                      \r\n@media only screen and (min-width: 481px) and (max-width: 768px) {\r\n  // tablet styles go here\r\n}\r\n                                                                      \r\n@media only screen and (min-width: 769px) {\r\n  // desktop styles go here\r\n}</pre><p>这对于apple的几种设备来说，完全符合。其它的设备应该也差不多是这样。对于这样子书写的CSS，在桌面端就可以通过缩放浏览器来触发相应的样式。</p><p>另外这里使用的是width，而不是device-width。device-width是指设备的硬件像素，而width则是viewport的宽度。通过viewport的缩放来触发这个界限会更合适一些。不同设备返回device-width的值也存在差异，因此用width来判断会更加稳定。</p><p>现在应该有越来越多的人使用em而不是px来指定这个界限了，em跟字体大小有关。对于使用em的Media Query，可以访问<a href=\"http://css-tricks.com/\" target=\"_self\">CSS-Tricks</a>并缩放浏览器来观察效果，注意字体的大小变化。</p><p>&nbsp;</p><p><strong>Fluid layout</strong></p><p>流式布局就像它的名字一样，可以把内容想象成液体，屏幕尺寸是容器，就是个把液体注入不同的容器内的过程。在网页设计上面，这通常会和网格系统还有相对单位尺寸有关。以前我在学校里面做页面设计的时候还是很流行960px的固定网格布局的。随着屏幕尺寸的增加，最近我拿到的桌面端页面设计稿通常都是1000px甚至更高。把网格系统的单位宽度换成类似em这样的相对单位，再加上最大最小限制和之前说到的Media Query Breakpoints，就能创建各种通用的流式布局了。</p><p>网上也有很多现成的网格系统。如果你更喜欢自己手写的话，也可以参考CSS-Tricks的<a href=\"http://css-tricks.com/video-screencasts/115-dont-overthink-it-grids/\" target=\"_self\">这个示例</a>(你的网络需要能够访问YouTube)。</p><p>&nbsp;</p><p><strong>Responsive Images</strong></p><p>流式布局对于文本而言完全没有问题，但对于图片的话就有点麻烦了。对于不同的屏幕尺寸，可能需要不同大小的图片源。当浏览器窗口变化的时候，图片也得跟着改变大小。看起来最简单的解决方案是直接用百分比来做图片的尺寸单位：</p><pre config=\"brush:html;toolbar:false;\">&lt;!-- instead of this --&gt;\r\n&lt;img src=&quot;flex.jpg&quot; width=&quot;300&quot; height=&quot;300&quot;&gt;\r\n                                                                 \r\n&lt;!-- using this --&gt;\r\n&lt;img src=&quot;flex.jpg&quot; width=&quot;100%&quot;&gt;</pre><p>看起来好像是解决了，结果发现这个问题还蛮复杂。</p><p>稍微再高级一点，把图片放到一个流式容器里面，指定容器的max-width为图片的宽度，然后把图片本身的max-width设为100%，这样子防止图片本身被向上拉伸。当然，像我这种还在兼容IE6的人还得再考虑这个低端货的问题。</p><p>但不管怎么样，这只是把宽度直接写在&lt;img&gt;标签里的一个改版，说到底还是只有一张图片，适应各种尺寸，那么这张图片必然是张大尺寸图片，不符合移动端的需求。</p><p>如果说图片只是装饰性作用，那么用CSS的background-image来渲染，配合Media Query倒是可以更加灵活一些，例如这样：</p><pre config=\"brush:css;toolbar:false;\">@media only screen and (max-width: 480px) {\r\n  div.flexImage {\r\n    background: url(smallImg.jpg)\r\n  }\r\n}\r\n                                                               \r\n@media only screen and (min-width: 481px) and (max-width: 768px) {\r\n div.flexImage {\r\n    background: url(mediumImg.jpg)\r\n  }\r\n}\r\n                                                               \r\n@media only screen and (min-width: 769px) {\r\n div.flexImage {\r\n    background: url(largeImage.jpg)\r\n  }\r\n}</pre><p>但是在早些版本的Android上面，这个方案会导致3张图片都被下载，最后只展现一张的问题。因此想再高级一些，那就得用JavaScript了，例如Github上这个<a href=\"http://goo.gl/QqKXw\">Responsive-Images项目</a>。然后，JS又使代码复杂了，并且可能会带来速度和性能的问题。</p><p>看到这里可能又会有新的问题出现，现在很多移动设备的屏幕都是高清屏，比桌面端的还高清，而移动端又要考虑带宽和资费的问题，那么究竟应该怎么选择呢？这个问题估计可以出出来一堆讨论，最后的结论可能是：You make your choice. That’s it.</p><p>不过我还是不要以这个结果结束这块内容比较好，如果是浏览器来解决这个问题那当然最好。所以最后来看一下&lt;img&gt;标签的srcset属性。</p><pre config=\"brush:html;toolbar:false;\">&lt;img alt=&quot;image description&quot; src=&quot;fallback.png&quot; srcset=&quot;image.png 800w, another_image.png 600w&quot;&gt;</pre><p>语法上没太多好讲的，很容易看懂，先根据srcset里面的描述来选择合适的图片，如果都不合适就再使用src里面的图片。因为是在已有的标签上新增属性，兼容性就很好。</p><p>更多关于srcset的内容参见<a href=\"http://www.w3.org/html/wg/drafts/srcset/w3c-srcset/\" target=\"_self\">W3C文档</a>。</p><p>此外，在讨论中还提到使用新的&lt;picture&gt;标签，具体目前什么情况也不是很清楚，几个星期前在旺旺群里边好像有同学提到。要了解的话参考HTML5Doctor上的<a href=\"http://html5doctor.com/html5-adaptive-images-end-of-round-one/\" target=\"_self\">这篇文章</a>。</p><p>&nbsp;</p><p><strong>Conclusion</strong></p><p>在一开始说的是因为移动端的业务需求想到响应式设计，但实际上响应式设计不只是往小屏幕尺寸做改变，对于越来越多的几十寸的大屏幕设备，也是需要响应式设计的。毕业之后就不用自己做设计了，对于prototype的过程，设计软件在这方面的新增功能方面就不多讲什么了。但是有一点，如何最大限度的吸引用户，关注到站点最重点的信息，总是要放在响应式设计的首位的。<br /></p><p>最后，响应式设计并不能适应所有的站点，可能在设计了初版原型之后，发现独立的移动端网站，或者原生App是更佳的解决方案。</p>"
            ],
            "pubDate": [
              "Fri, 15 Mar 2013 01:27:33 GMT"
            ],
            "guid": [
              "http://yehao.diandian.com/post/2013-03-15/40049907910"
            ]
          },
          {
            "title": [
              "Web Animation Helper Tools"
            ],
            "link": [
              "http://yehao.diandian.com/post/2013-02-17/40048676518"
            ],
            "description": [
              "<p><span class=\"text-img-holder\"><img src=\"http://m1.img.libdd.com/farm5/2013/0217/20/640D9DB81FFDC5F71AB86EB22DFEDD230BCE332202528_400_83.jpg\" width=\"400\" height=\"83\"/></span><br /></p><p><strong><a href=\"http://visitmix.com/labs/ai2canvas/index.html\" target=\"_self\">AI -&gt; Canvas </a></strong></p><p>上一周的<a href=\"http://www.sitepoint.com/\" target=\"_self\">Sitepoint</a>邮件推送里面看到Illustrator的<a href=\"http://visitmix.com/labs/ai2canvas/index.html\" target=\"_self\">Ai-&gt;Canvas</a>插件。这个插件在2010年就已经出来了，刚好是HTML5 Canvas开始受到关注的时间。这个插件能够把Illustrator画布上的矢量和位图到处为HTML5 Canvas的绘图代码。此外，还支持动画导出，自己写一点代码之后很容易就能绑定事件，让创建基于Canvas的Web App更加方便。</p><p>Illustrator本身就是一个矢量图形工具，而且支持SVG，AI-&gt;Canvas几乎能够把任何在Illustrator内绘制的图形转换成HTML5 Canvas元素，包括复杂的形状，渐变，透明，阴影等很多效果。如果Canvas还不支持某个效果的话，插件会在导出的时候把这个效果栅格化为位图，然后用Canvas绘制图片的方法把图像定位到正确的位置上。</p><p>这个插件很好的一点就是可以根据ai文件图层的名称，导出独立的JS绘图方法，因此每个图层的内容导出后，JS代码修改起来也非常方便。如果图层名称里边传递了相应的参数，还能直接导出为Canvas动画，并且各图层元素的动画顺序也很好控制。</p><p>具体这个东西怎么用，可以看下官方的文档，实现一个太阳、月亮、地球的自转公转动画：</p><p><a href=\"http://visitmix.com/labs/ai2canvas/documentation.html\">http://visitmix.com/labs/ai2canvas/documentation.html</a></p><p>不知道你们能不能打开链接，我这边杭州电信不行，得翻墙。</p><p>文档里边使用的是1.0的版本，支持Illustrator CS3到CS5，就在文档页有的下载。</p><p>如果是CS6的话要装1.1版的（这个版本只支持CS6），方法在这里：</p><p><a href=\"http://blog.mikeswanson.com/post/29634279264/ai2canvas\">http://blog.mikeswanson.com/post/29634279264/ai2canvas</a></p><p>PC上支持Windows Vista以后的系统，Mac上支持OS X 10.6.8以后的系统。</p><p>另外因为CS3和CS4版本的Ai对图层名称长度的限制，在传递参数的时候可能需要使用简写，具体在这份扩展文档里面有介绍：</p><p><a href=\"https://visitmix.com/labs/ai2canvas/common/tutorials/ai2canvas_extended_documentation.pdf\">https://visitmix.com/labs/ai2canvas/common/tutorials/ai2canvas_extended_documentation.pdf</a></p><p>下面简单试验一下。我在Ai里面画了一个很简单的表盘轮廓，外面的蓝色圆环是在PathFinder面板里面做出来的，加了一些阴影，然后导出为HTML Canvas，最后在浏览器里的效果和Ai里看到的几乎是一样的。</p><p class=\"edui-filter-align-center\"><span class=\"text-img-holder\"><img src=\"http://m2.img.libdd.com/farm4/2013/0217/17/4F27EE21772216A61ED9047FDCD5CD1D588A51B466CB4_400_206.jpg\" width=\"400\" height=\"206\"/></span><br /></p><p class=\"edui-filter-align-center\">Fig. (Left) art in Illustrator; (Right) art exported to canvas</p><p>代码方面的话，线条都是lineTo和moveTo绘制的，我在Ai里面用的是Ellipse Tool按住Shift画的圆形，导出的代码里边都是用bezierCurveTo绘制的。另外像钢笔工具画的内容基本也都是导出为bezierCurveTo绘图。</p><p>如果是自己手写代码的话，一般使用循环来处理一圈8个刻度，插件导出的话就是8次path stroke。</p><p>另外插件的效率还是很高的，我试过一个复杂的ai文件，把所有内容作为矢量导出，最后出来10万多行代码，但是也就花了几秒钟的时间。</p><p>&nbsp;</p><p><a href=\"http://www.adobe.com/cn/products/flash/flash-to-html5.html\" target=\"_self\"><strong>Flash Professional Toolkit for CreateJS</strong></a></p><p>之前在<a href=\"http://yehao.diandian.com/post/2012-11-05/40041547076\" target=\"_self\">Flash Pro CS6新功能</a>里面有提到过<a href=\"http://www.adobe.com/cn/products/flash/flash-to-html5.html\" target=\"_self\">这个插件</a>， 相对于Ai-&gt;Canvas，这个工具导出的代码封装的更加彻底一些。</p><p>Ai-&gt;Canvas给到的仍然是原生的Canvas绘图代码，而CreateJS本身就是一套完整的JS库。</p><p>这个工具并不是Flash到Canvas的转换器，不能把一个Flash项目通过一个按钮直接转成基于Canvas的项目，它主要是能够使用Flash去创建一些纯粹的Canvas操作不太好处理的东西，相当于是工作流上的改进。</p><p>Adobe的站点上有入门教程，可以看一下这个：</p><p><a href=\"http://www.adobe.com/devnet/createjs/articles/getting-started.html\">http://www.adobe.com/devnet/createjs/articles/getting-started.html</a></p><p>使用这个工具的话就能借助Flash的时间轴来创建Motion Tween或者Shape Tween，再导出为Canvas动画，对于一些游戏素材，这个过程比起自己写角色动画代码要方便很多。</p><p>工具能够记录在Flash Pro里面自定义的实例名称，成功导出之后，在JS代码里面就能直接访问到相应的对象。</p><p>就上面入门教程里边的例子来说，舞台上有一个名为platypus的影片剪辑，里边有一个名为platypusIdle的影片剪辑，它里面又有一个名为balloon的影片剪辑。这里要对这个balloon的点击事件做监听。就像在Flash ActionScript里面访问Display Object一样，在JS中就可以这样访问balloon对象：</p><pre config=\"brush:js;toolbar:false;\">var platypus = new lib.Platypus();\r\nplatypus.platypusIdle.balloon.onClick = handleBalloonClick;\r\nfunction handleBalloonClick(event) {\r\n    // handle balloon click here\r\n}</pre><p>这里取到的balloon对象有点像ActionScript里面的Sprite，有x，y，scaleX之类的属性。像这样操作封装之后的对象，比起自己循环所有的图形，用isPointInPath之类的方法做判断，再去重绘图形要省事多了。</p><p>&nbsp;</p><p><a href=\"http://html.adobe.com/edge/animate/\" target=\"_self\"><strong>Adobe Edge Animate</strong></a></p><p><a href=\"http://html.adobe.com/edge/animate/\" target=\"_self\">Edge Animate</a>和Canvas没有关系（目前不支持任何Canvas相关操作），它主要是创建DOM元素（主要是div）动画的。只要有Adobe ID，1.0版本都是可以免费下载使用的。</p><p><a href=\"http://paultrani.com/\" target=\"_self\">Paul Trani的个人站点</a>上有很多关于Edge的免费视频教程。</p><p class=\"edui-filter-align-center\"><a href=\"http://paultrani.com/2012/12/creating-variables-and-conditional-statements-in-edge-animate/\" target=\"_self\"><span class=\"text-img-holder\"><img src=\"http://m3.img.libdd.com/farm4/2013/0217/17/9B9D24AE161969E4F2539F76FBCA7D6FF98F774909655_400_212.jpg\" width=\"400\" height=\"212\"/></span></a><br /></p><p class=\"edui-filter-align-center\">Fig. Paul Trani的其中一个Edge Animate视频</p><p>Edge的操作和Flash Pro很像，时间轴类似After Effects，属性面板里面提供了几乎所有可以用于动画的CSS属性，配合&lt;img&gt;或者background-image一起使用的话，是能制作出很多动画效果的。当然最终页面上可能会有很多空的&lt;div&gt;元素。</p><p>或许这有悖于可访问性或者语义化标签的想法，针对这种类型的动画你可能对这个文章和评论感兴趣：</p><p><a href=\"http://css-tricks.com/semantic-animation/\">http://css-tricks.com/semantic-animation/</a></p><p>在Preview阶段，Adobe的论坛上面就有人提出这个疑问，上面也有一些讨论：</p><p><a href=\"http://forums.adobe.com/thread/884525\">http://forums.adobe.com/thread/884525</a></p><p>但是不管怎么说，这是第一个基于时间轴来创建不用任何插件就能在网页上显示动画的软件。或许Adobe后续会加入Canvas或者SVG的支持呢。</p><p>&nbsp;</p><p>标题上面写的是Animation，但是前面两个工具也不只是针对动画，只是刚好最近看到了，玩了一下觉得挺有意思，先记录下来。</p>"
            ],
            "pubDate": [
              "Sun, 17 Feb 2013 09:16:39 GMT"
            ],
            "guid": [
              "http://yehao.diandian.com/post/2013-02-17/40048676518"
            ]
          },
          {
            "title": [
              "用免费工具下载整个网站"
            ],
            "link": [
              "http://yehao.diandian.com/post/2013-02-16/40049472139"
            ],
            "description": [
              "<p><span class=\"text-img-holder\"><img src=\"http://m3.img.libdd.com/farm4/2013/0216/16/5AF2E6130B20BBCA41D782C55652DED6C42B3D1051975_400_83.jpg\" width=\"400\" height=\"83\"/></span><br /></p><p>今天翻邮件的时候无意间看见的，可以把整个网站下载到本地的免费工具。这比起右键菜单的另存为要高级。</p><p>原文在这里：<a href=\"http://www.latestcrunchs.com/downloading-entire-website-using-free-software/\">http://www.latestcrunchs.com/downloading-entire-website-using-free-software/</a></p><p>文章里边也没有很详细的介绍每个平台下面对应软件的用法，其实就是介绍了一下有这么一个软件可以用。</p><p>这里也就不全篇翻译出来了，把重点的内容大致翻一下，另外我要补充一下Mac OS X下面也可以有GNU Wget。</p><p>&nbsp;</p><p>Windows:</p><p>HTTrack是一个免费易用的离线浏览工具。它可以把万维网上的站点下载到本地，递归地建立对应的目录，把HTML，图片和其他文件从服务端下载到本地。软件会自动帮你处理相对路径。下载到本地后，直接双击打开页面，就能浏览整个网站，在各个链接之间自由跳转，就像在线浏览一样。</p><p>下载地址：<a href=\"http://www.httrack.com/page/2/en/index.html\">http://www.httrack.com/page/2/en/index.html</a></p><p>使用指南：<a href=\"http://www.httrack.com/html/index.html\">http://www.httrack.com/html/index.html</a></p><p>Linux:</p><p>GNU Wget是一个从Web下载文件的免费工具。软件支持HTTP, HTTPS和FTP协议，也支持HTTP代理传输。</p><p>Wget是非交互式的（non-interactive），就是说它能够在无需用户登陆的后台环境下工作。这样你就可以启动一个接收命令，让Wget来完成工作。相对的，多数Web浏览器需要由用户交互来触发数据下载，这对于传输很多数据而言是个很大的阻碍。</p><p>Wget能够跟踪HTML和XHTML页面上的链接，创建远程站点的本地镜像，并且能创建出和原始网站同样的文件结构。这个功能有时被成为“递归式下载”(recursive downloading)。在这个过程中，Wget会遵从RES（Robot Exclusion Standard，机器人排除标准，robots.txt）。为了方便本地浏览，我们也可以告诉Wget如何对HTML中的链接进行转换。</p><p>Wget在慢速或者不稳定的网络下也能很好的工作。如果因网络问题导致下载失败，它会不断尝试直到文件完整接收。如果服务器支持的话，也可以进行断点续传（PS: 非常不错的功能，我在下载某些站点的时候发现网速不好，Control+C中断之后链接VPN再次尝试，会自动跳过已下载的文件）。</p><p>大多数Linux系统都自带了Wget，所以无需额外安装。</p><p>使用Wget下载整站资源的方法：</p><p>创建并进入你想要的存储位置，执行下面的命令：</p><pre config=\"brush:bash;toolbar:false;\">wget -r -Nc -mk http://example.com/</pre><p>-r 打开递归接收(recursive retrieving)</p><p>-N 打开时间戳(time-stamping)</p><p>-m 创建镜像</p><p>-k 转换链接</p><p>在下载完成后，所有的内容就能够离线浏览了。</p><p>&nbsp;</p><p>上面Windows和Linux的使用就是翻译的内容了，对网络名词不太熟，感觉翻起来挺生硬的哈，麻烦各位修正。</p><p>因为我是用OS X的，所以最后补充一下在Mac下面的安装。</p><p>其实也很简单，使用Homebrew，一个命令就折腾完了。</p><p>如果你还没有安装Homebrew，可以到<a href=\"http://mxcl.github.com/homebrew/\" target=\"_self\">这里</a>，拉到最底下有安装方法，往命令行里面贴这一段就可以：</p><pre config=\"brush:bash;toolbar:false;\">ruby -e &quot;$(curl -fsSL https://raw.github.com/mxcl/homebrew/go)&quot;</pre><p>有了Homebrew之后，只要运行：</p><pre config=\"brush:bash;toolbar:false;\">brew install wget</pre><p>就可以了。</p><p>去年年底的时候发现Homebrew被墙，github事件之后好像又恢复了，NICE。</p><p>当然，如果有CDN绝对路径之类的话，那这个工具还是没法把整站完整下载过来的，你可以试验一下我这个博客的地址就知道了。</p><p>不过，对于研究一些网站特效，例如<a href=\"http://inze.it/\">http://inze.it/</a>的视差滚动，下载到本地看还是很不错的，毕竟不需要经常重新下载图片了，可以节省很多时间。不过对于css文件内的相对路径，可能需要下载过来之后自己再改一下。</p>"
            ],
            "pubDate": [
              "Sat, 16 Feb 2013 08:03:51 GMT"
            ],
            "guid": [
              "http://yehao.diandian.com/post/2013-02-16/40049472139"
            ]
          }
        ]
      }
    ]
  }
}